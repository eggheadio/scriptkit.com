[{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"beta.114 - Info, Settings, Choice Events 🎛","content":"# beta.114 - Info, Settings, Choice Events\r\n\r\n## Displaying Temporary Info\r\n\r\nUntil now, `await div()` worked by waiting for the user to hit enter/escape. This still works fine, but if you want to \"timeout\" a `div` to display temporary info without user input, this entire script will run without any user interaction:\r\n\r\n[Install non-blocking-div](https://scriptkit.com/api/new?name=non-blocking-div&url=https://gist.githubusercontent.com/johnlindquist/87e92156251d09a02154f04772f1e9bf/raw/be6dde40a7f5e1f3b8eaa9abf68d8698031cd3de/non-blocking-div.js\")\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet classes = `p-5 text-3xl flex justify-center items-center text-center`\r\n\r\ndiv(`Wait 1 second...`, classes)\r\nawait wait(1000)\r\n\r\ndiv(`Just 2 more seconds...`, classes)\r\nawait wait(2000)\r\n\r\ndiv(`Almost there...`, classes)\r\nawait wait(3000)\r\n\r\n```\r\n\r\n## Remember Selection\r\n\r\nI needed to build a settings \"panel\", so I wanted to make a list that could toggle. \r\n\r\n\r\n![CleanShot 2021-11-22 at 12 08 29](https://user-images.githubusercontent.com/36073/142920816-3bf47911-578b-4e2f-9662-10257287fde4.png)\r\n\r\nThe solution was to remember the previous choice by `id`. Any time `arg` is invoked, it will check to see if a choice has an id that matched the previously submitted choice and focus back on it. This enables you to hit enter repeatedly to toggle a choice on and off.\r\n\r\n[Install remember-selection](https://scriptkit.com/api/new?name=remember-selection&url=https://gist.githubusercontent.com/johnlindquist/a86395d809c260d943f9763023f5a6f0/raw/4c1057b8500fcdf34fcd179af52f09cc7dee9ca4/remember-selection.js\")\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet data = [\r\n  {\r\n    id: uuid(),\r\n    name: \"On\",\r\n  },\r\n  {\r\n    id: uuid(),\r\n    name: \"Off\",\r\n  },\r\n  {\r\n    id: uuid(),\r\n    name: \"On\",\r\n  },\r\n]\r\n\r\nlet argConfig = {\r\n  placeholder: \"Toggle items\",\r\n  flags: {\r\n    end: {\r\n      shortcut: \"cmd+enter\",\r\n    },\r\n  },\r\n}\r\n\r\nwhile (true) {\r\n  let item = await arg(argConfig, data)\r\n  data.find(i => i.id === item.id).name =\r\n    item.name === \"On\" ? \"Off\" : \"On\"\r\n\r\n  if (flag.end) break\r\n}\r\n\r\nawait div(JSON.stringify(data), \"p-2 text-sm\")\r\n```\r\n\r\nYou could also use this when making a sequence of selections:\r\n\r\n[Install remember-sequence](https://scriptkit.com/api/new?name=remember-sequence&url=https://gist.githubusercontent.com/johnlindquist/80f9d005e5bff92691125f736199aa2c/raw/4e05c118bc91defe5e2f39cff20eb9862f4c6a2d/remember-sequence.js\")\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet data = [\r\n  {\r\n    id: uuid(),\r\n    name: \"One\",\r\n  },\r\n  {\r\n    id: uuid(),\r\n    name: \"Two\",\r\n  },\r\n  {\r\n    id: uuid(),\r\n    name: \"Three\",\r\n  },\r\n]\r\n\r\nlet selections = []\r\n\r\nlet one = await arg(`First selection`, data)\r\nselections.push(one)\r\n\r\nlet two = await arg(\r\n  {\r\n    placeholder: `Second selection`,\r\n    hint: selections.map(s => s.name).join(\", \"),\r\n  },\r\n  data\r\n)\r\nselections.push(two)\r\n\r\nlet three = await arg(\r\n  {\r\n    placeholder: `Third selection`,\r\n    hint: selections.map(s => s.name).join(\", \"),\r\n  },\r\n  data\r\n)\r\nselections.push(three)\r\n\r\nawait div(\r\n  selections.map(s => s.name).join(\", \"),\r\n  \"p-2 text-sm\"\r\n)\r\n\r\n```\r\n\r\n\r\n\r\n[Install no-choices-event](https://scriptkit.com/api/new?name=no-choices-event&url=https://gist.githubusercontent.com/johnlindquist/5534589a322bbb384e5bf4dbcbf00864/raw/1a7c2500149db3b8731e900646d568fa7fb5ed74/no-choices-event.js\")\r\n\r\n## Choice Events\r\n\r\n`onNoChoices` and `onChoices` allows Kit.app to tell your script when the user has typed something that filtered out every choice. Most commonly, you'll want to provide a `setHint` (I almost made it a default), but you can add any logic you want.\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\nawait arg(\r\n  {\r\n    placeholder: `Pick a fruit`,\r\n    onChoices: async () => {\r\n      setHint(``)\r\n    },\r\n    onNoChoices: async input => {\r\n      setHint(`No choices matched ${input}`)\r\n    },\r\n  },\r\n  [`Apple`, `Orange`, `Banana`]\r\n)\r\n\r\n```\r\n\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/615","createdAt":"2021-11-22T19:09:19Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4AOHN6"},{"avatar":"https://avatars.githubusercontent.com/u/17577332?v=4","user":"pomdtr","author":"Achille Lacoin","twitter":null,"title":"Updated Raycast Integration","content":"I've built a new extension to be able to launch my scripts from raycast. It would be cool to get a review from you @johnlindquist !\r\n\r\nLink to the pull request: https://github.com/raycast/extensions/pull/399\r\n\r\nhttps://user-images.githubusercontent.com/17577332/142733677-ae7fcd29-e267-4301-a4e7-1ac86b030c98.mp4","extension":".md","description":"Created by pomdtr","resourcePath":"/johnlindquist/kit/discussions/607","createdAt":"2021-11-20T16:29:47Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOGea"},{"avatar":"https://avatars.githubusercontent.com/u/5678065?u=e2e528a3ee58b5150a1947c7ded93695b35a8779&v=4","user":"Alarid","author":"Yohann Legrand","twitter":null,"title":"Search Kent C. Dodds blog","content":"Because we all love [Kent's blog](https://kentcdodds.com/blog) so much, I made a small script to quickly search for a blog post 😁\r\n\r\n[Install search-kent-blog](https://scriptkit.com/api/new?name=search-kent-blog&url=https://gist.githubusercontent.com/Alarid/210958c034bfeda6f1baf1cc29eed91e/raw/7777c4ed25cbbc5a4f7a5bd3bd9b7a50435e8ee1/search-kent-blog.js\")\r\n\r\n```js\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n// Menu: Search Kent's Blog\r\n\r\nconst query = await arg(\"Query\")\r\nexec(`open https://kentcdodds.com/s/${encodeURIComponent(query)}`)\r\n\r\n```\r\n","extension":".md","description":"Created by Alarid","resourcePath":"/johnlindquist/kit/discussions/600","createdAt":"2021-11-18T11:43:51Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOFh9"},{"avatar":"https://avatars.githubusercontent.com/u/5678065?u=e2e528a3ee58b5150a1947c7ded93695b35a8779&v=4","user":"Alarid","author":"Yohann Legrand","twitter":null,"title":"Purge unused Git branches","content":"[Install purge-unused-git-branches](https://scriptkit.com/api/new?name=purge-unused-git-branches&url=https://gist.githubusercontent.com/Alarid/cc25e78cefa3ae73f6b3ed12bc50ca8c/raw/2fd224db495e10f557ccfe2b209ba624f69217e3/purge-unused-git-branches.js)\r\n\r\n## Demo\r\nhttps://user-images.githubusercontent.com/5678065/142405828-21e7a439-b127-4fcb-af13-7cbe6d947400.mov\r\n\r\n## Purpose\r\nI find it quite annoying to keep old/unused Git branches in my local repositories. Most of the time, those branches have been merged some time ago, but I keep on forgetting to delete them manually. So I made this little utility to help me/you with that 😇\r\n\r\nIt will simply compare your local branches with the remote ones, and ask you if you wish to delete all the unused branches, or select the ones you want to remove manually. \r\n\r\n## Notes\r\nYou must use this script in your terminal, in a Git repository folder. This is why I excluded it from the Kit UI. Adding Kit scripts to your Path will make it easier to run this one from anywhere:\r\n```\r\n# Add this in your .zhsrc or .bashrc\r\nexport PATH=$HOME/.kenv/bin:$PATH\r\n```\r\nThen run the script from anywhere (in a Git repo):\r\n```\r\npurge-unused-git-branches\r\n```\r\n\r\n## Source\r\n```js\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n// Exclude: true\r\n\r\n$.verbose = false\r\n\r\nconst TOKENS_TO_REMOVE = [\"* \", \"origin/\", \"HEAD -> \"]\r\n\r\n// Utility to process ZX output by converting lines into an array and removing\r\n// some tokens from the branch names (so remote branches and local branches have\r\n// the same name)\r\nconst processOutput = (output) => [\r\n  ...new Set(\r\n    output\r\n      .split(\"\\n\")\r\n      .map((branch) => {\r\n        let res = branch.trim()\r\n        TOKENS_TO_REMOVE.forEach((token) => (res = res.replaceAll(token, \"\")))\r\n        return res\r\n      })\r\n      .filter((branch) => branch.length > 0)\r\n  ),\r\n]\r\n\r\n// Retrieve remote and local branches\r\nconsole.log(\"Parsing remote and local branches...\")\r\nconst remoteBranches = await $`git branch -r`.then((output) =>\r\n  processOutput(output.stdout)\r\n)\r\nconst localBranches = await $`git branch`.then((output) =>\r\n  processOutput(output.stdout)\r\n)\r\n\r\n// Compute the set of branches that are not used\r\nconst branchesToRemove = localBranches.filter(\r\n  (branch) => !remoteBranches.includes(branch)\r\n)\r\n\r\n// No branches to remove, nothing to do !\r\nif (branchesToRemove.length === 0) {\r\n  console.log(\"No branches to remove. All good 👌\")\r\n  exit()\r\n}\r\n\r\n// Output the list of branches to remove\r\nconsole.log(\r\n  `Found ${branchesToRemove.length} branches that only exist locally:`\r\n)\r\nbranchesToRemove.map((branch) => console.log(`  - ${branch}`))\r\nconsole.log()\r\n\r\n// Ask the user to confirm the list of branches to remove\r\nconst choice = await arg({\r\n  placeholder:\r\n    \"Do you wish to delete all thoses branches, or select some manually ?\",\r\n  hint: \"[a]ll/[s]elect\",\r\n})\r\nif (choice === \"a\") {\r\n  // Removing all branches at once\r\n  console.log(\"Deleting all branches...\")\r\n  for (const branch in branchesToRemove) {\r\n    await $`git branch -D ${branchesToRemove[branch]}`\r\n  }\r\n  console.log(\"✅ Done.\")\r\n} else if (choice === \"s\") {\r\n  // Ask the user to select branches to remove\r\n  for (const branch in branchesToRemove) {\r\n    const branchName = branchesToRemove[branch]\r\n    const answer = await arg({\r\n      placeholder: `Delete ${branchName}?`,\r\n      hint: `[y]es/[n]o/[e]xit`,\r\n    })\r\n    if (answer === \"y\") {\r\n      try {\r\n        await $`git branch -D ${branchName}`\r\n        console.log(`✅ Branch ${branchName} successfully deleted locally.`)\r\n      } catch (err) {\r\n        console.error(\r\n          `❌ Something went wrong while deleting your branch ${branchName}.`\r\n        )\r\n      }\r\n    } else if (answer === \"e\") {\r\n      console.log(\"Exiting...\")\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nconsole.log(\"All done, bye 👋\")\r\n```\r\n\r\n[Install purge-unused-git-branches](https://scriptkit.com/api/new?name=purge-unused-git-branches&url=https://gist.githubusercontent.com/Alarid/cc25e78cefa3ae73f6b3ed12bc50ca8c/raw/2fd224db495e10f557ccfe2b209ba624f69217e3/purge-unused-git-branches.js)","extension":".md","description":"Created by Alarid","resourcePath":"/johnlindquist/kit/discussions/599","createdAt":"2021-11-18T11:34:12Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOFhz"},{"avatar":"https://avatars.githubusercontent.com/u/180256?v=4","user":"nadeemkhedr","author":"Nadeem Khedr","twitter":"nadeemkhedr","title":"Weather converter °C/°F conversion","content":"I wanted to share a semi-useful script, primarily if you work between the states and other countries.\r\n\r\nHere I wanted to create a simple script that will run both in the CLI/UI. You enter weather in formats like `30c` or `90f,` which will convert it the other way.\r\n\r\nAlso, from the UI, it's real-time. So you will get the result while typing. \r\n\r\nThe output can improve (especially the error state). I might do it later.\r\n\r\n```javascript\r\n// Menu: Weather Degree Converter\r\n// Author: Nadeem Khedr\r\n// Twitter: @nadeemkhedr\r\n\r\nlet convertToF = (c) => {\r\n  return (c * 9) / 5 + 32\r\n}\r\n\r\nconst convertToC = (f) => {\r\n  return ((f - 32) * 5) / 9\r\n}\r\n\r\nconst getDegreeWithType = (input) => {\r\n  const matchRegex = /(\\d+)(f|c)/i\r\n  const result = matchRegex.exec(input)\r\n  if (!result) {\r\n    return null\r\n  }\r\n  return {\r\n    degree: parseInt(result[1], 10),\r\n    type: result[2].toLowerCase(),\r\n  }\r\n}\r\n\r\nconst degreeConverter = (input) => {\r\n  const degreeResult = getDegreeWithType(input)\r\n  if (!degreeResult) {\r\n    return \"You need to enter the unit in this format '30c' or '90f'\"\r\n  }\r\n\r\n  const { degree, type } = degreeResult\r\n  let oDegree = null\r\n  let oType = null\r\n  if (type === 'c') {\r\n    oDegree = convertToF(degree)\r\n    oType = 'F'\r\n  } else {\r\n    oDegree = convertToC(degree)\r\n    oType = 'C'\r\n  }\r\n  return `${oDegree.toFixed(1)}°${oType}`\r\n}\r\n\r\nconst deg = await arg(\r\n  'Enter degress in °C or °F',\r\n  (input) =>\r\n    `<div class=\"text-2xl flex justify-center items-center p-5\">\r\n${input ? degreeConverter(input) : `Waiting for input`}\r\n</div>`\r\n)\r\n\r\ndiv(degreeConverter(deg))\r\n\r\n\r\n```","extension":".md","description":"Created by nadeemkhedr","resourcePath":"/johnlindquist/kit/discussions/597","createdAt":"2021-11-15T19:05:46Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOEIe"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"beta.98 - Previews 👀, Docs, devTools, updater improvements","content":"## Previews\r\n\r\nCreating the previews feature was a huge undertaking, but it really paid off. You can now render html into a side pane by simply providing a `preview` function. A preview can be a simple string all the way to an async function per choice that loads data based on the currently selected choice. For examples, see here #555 \r\n\r\n> You can toggle previews on/off with <kbd>cmd+p</kbd>\r\n\r\nhttps://user-images.githubusercontent.com/36073/141507471-db3e4454-f0ef-4e6b-891b-bd4344a40e85.mp4\r\n\r\n## Docs\r\n\r\nAlong with previews comes the built-in docs.\r\n\r\n- Docs are built from the GitHub discussions [docs](https://github.com/johnlindquist/kit/discussions/categories/docs) category\r\n- Each time I post/update a doc, a webhook builds the docs into a json file, Kit.app checks for a new docs.json once a day (or you can manually update them from the `Help->Download Latest Docs`\r\n- You can _click an example to install it!_ 🎉\r\n- I'll keep working on docs and examples. Please ask any questions over in the [docs](https://github.com/johnlindquist/kit/discussions/categories/docs) section if you'd like to see something clarified.\r\n\r\nhttps://user-images.githubusercontent.com/36073/141507953-02d44174-3ac0-43d7-8d92-4319e917d512.mp4\r\n\r\n## Dev Tools\r\n\r\nPass any data into `devTools` to pop open a Dev Tools pane so you can interact with the data. `devTools` will first log out the data, but it's also assigned to an `x` variable you can interact with in the console.\r\n\r\n> `devTools` will be another paid feature once Script Kit 1.0 releases\r\n\r\nhttps://user-images.githubusercontent.com/36073/141508954-df3ea997-a49e-4fdd-bd40-7bff76024a6d.mp4\r\n\r\n## Updater Fixes\r\n\r\nA few users reported a strange behavior with the updater. If you've had any issues with it, please download a fresh copy of Kit.app from https://scriptkit.com and overwrite the old version. There are many more guards around the updating logic to prevent those issues from cropping up again.\r\n\r\n\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/587","createdAt":"2021-11-12T17:32:40Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4AOC-z"},{"avatar":"https://avatars.githubusercontent.com/u/4287128?u=70e8d6e39f4addac43ee9849c8d9c150363e460e&v=4","user":"davelosert","author":"David Losert","twitter":"david_losert","title":"Start tracking a Todoist Todo with Toggl","content":"Select a task from `Todoist` (configured from tasks assigned to `today`) and start a `Toggl`-timer for it.\r\nIf both, `Todoist` and `Toggl` have a Project with the same name, that project is automatically linked in the Tracking-Entry.\r\n\r\nEven though this script is very opinionated to those two tools, it might inspire you to do something similar with the tools of your choice. 😉 \r\n\r\n```typescript\r\n// Menu: Track Todo\r\n// Description: Start the tracking timer of Toggl with a todo from today of Todoist.\r\n// Author: David Losert\r\n// Twitter: @david_losert\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { getTodosOfToday, getProjectById } from '../lib/Todoist';\r\nimport { startTimeTrackerFor } from '../lib/Toggl';\r\n\r\nconst todosToday = await getTodosOfToday();\r\n\r\nconst selectedTodo = await arg(\r\n  'Select Todo to start', \r\n  todosToday.map((todo) => ({\r\n    name: todo.content,\r\n    value: todo\r\n  })\r\n));\r\n\r\nlet projectName;\r\nif(selectedTodo.project_id) {\r\n  const project = await getProjectById(selectedTodo.project_id);\r\n  projectName = project.name;\r\n}\r\n\r\nconst result = await startTimeTrackerFor({ \r\n  description: selectedTodo.content,\r\n  projectName\r\n});\r\n\r\nawait notify({\r\n  title: 'Tracking Started.',\r\n  message: `Started Tracking for ${result.description}.`\r\n});\r\n```\r\n\r\nAs I am planing to write some more actions for Todoist as well as Toggl, I externalized accessing them into two modules (might put them into own npm modules when I have the time):\r\n\r\n## `../lib/Todoist.ts`:\r\n\r\n```typescript\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst axios = await npm('axios');\r\n\r\nconst todoistApiToken = await env('TODOIST_API_TOKEN');\r\n\r\n// Types omit properties not relevant right now\r\ntype TodoistTask = {\r\n    id: number,\r\n    project_id: number,\r\n    content: string,\r\n };\r\n\r\ntype TodoistProject = {\r\n  id: number,\r\n  name: string,\r\n};\r\n\r\nconst getTodosOfToday = async (): Promise<TodoistTask[]> => {\r\n  const response =  await axios({\r\n    method: 'GET',\r\n    url: 'https://api.todoist.com/rest/v1/tasks?filter=today',\r\n    headers: {\r\n      'Authorization': `Bearer ${todoistApiToken}`\r\n    }\r\n  });\r\n  return response.data;\r\n};\r\n\r\nconst getProjectById = async (id: number): Promise<TodoistProject> => {\r\n  const response =  await axios({\r\n    method: 'GET',\r\n    url: `https://api.todoist.com/rest/v1/projects/${id}`,\r\n    headers: {\r\n      'Authorization': `Bearer ${todoistApiToken}`\r\n    }\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport {\r\n  getTodosOfToday,\r\n  getProjectById\r\n};\r\n```\r\n\r\n## `../lib/Toggl.ts`\r\n\r\n```typescript\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst axios = await npm('axios');\r\nconst togglApiToken = await env('TOGGL_API_TOKEN');\r\nconst togglWorkspaceId = await env('TOGGL_WORKSPACE_ID');\r\n\r\nconst auth = {\r\n      username: togglApiToken,\r\n      // not a real password - the token is the actual secret. For whatever reason, toggl expects it this way around.\r\n      password: 'api_token'\r\n };\r\n\r\n// Types omit properties not relevant right now\r\ntype TimeEntry = {\r\n    id: number,\r\n    description: string,\r\n};\r\n\r\ntype TogglProject = {\r\n  id: number,\r\n  name: string,\r\n}\r\n\r\nconst getProjectByName = async(name: string): Promise<TogglProject | undefined> => {\r\n  const response = await axios({\r\n    method: 'GET',\r\n    url: `https://api.track.toggl.com/api/v8/workspaces/${togglWorkspaceId}/projects`,\r\n    auth\r\n  });\r\n  return response.data.find((project: TogglProject): boolean => project.name === name)\r\n}\r\n\r\nconst startTimeTrackerFor = async (\r\n  {description, projectName}: { description: string, projectName?: string}\r\n): Promise<TimeEntry> => {\r\n  let projectId;\r\n  if(projectName) {\r\n    const project = await getProjectByName(projectName);\r\n    projectId = project.id;\r\n  }\r\n  \r\n  const response = await axios({\r\n    method: 'POST',\r\n    url: 'https://api.track.toggl.com/api/v8/time_entries/start',\r\n    data: {\r\n      time_entry: {\r\n        description,\r\n        pid: projectId,\r\n        created_with: 'script-kit'\r\n      }\r\n    },\r\n    auth\r\n  });\r\n  return response.data.data;\r\n}\r\n\r\nexport {\r\n  startTimeTrackerFor\r\n};\r\n\r\n\r\nexport {\r\n  startTimeTrackerFor\r\n};\r\n```","extension":".md","description":"Created by davelosert","resourcePath":"/johnlindquist/kit/discussions/559","createdAt":"2021-11-08T16:45:55Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOA1Z"},{"avatar":"https://avatars.githubusercontent.com/u/4287128?u=70e8d6e39f4addac43ee9849c8d9c150363e460e&v=4","user":"davelosert","author":"David Losert","twitter":"david_losert","title":"Change Wallpaper","content":"Here is a little script I wrote to easily change the background-wallpaper. \r\n\r\nI use this as I have to set a certain wallpaper before doing webinars or screencasts for my clients.\r\n\r\n```typescript\r\n// Menu: Change Wallpaper\r\n// Description: Change your background wallpaper by selecting from a configured folder.\r\n// Author: David Losert\r\n// Twitter: @david_losert\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\n// Set to the folder where you keep all your wallpapers for easy selection\r\nconst wallpapersPath = await env('WALLPAPER_PATH');\r\n\r\nconst availableWallpapers = ls(wallpapersPath);\r\nconst selectedWallpaper = await arg('select', availableWallpapers.map(image => {\r\n  const imagePath = path.resolve(wallpapersPath, image);\r\n  return {\r\n    name: image,\r\n    preview: `<img src=\"${imagePath}\">`,\r\n    value: imagePath\r\n  };\r\n}));\r\n\r\nawait applescript(`tell application \"Finder\" to set desktop picture to POSIX file \"${selectedWallpaper}\"`);\r\n```","extension":".md","description":"Created by davelosert","resourcePath":"/johnlindquist/kit/discussions/501","createdAt":"2021-11-02T07:54:32Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AN-Bb"},{"avatar":"https://avatars.githubusercontent.com/u/900523?u=ab7e35b384354f771ecd6d683d12dade83d221dd&v=4","user":"JamesHenry","author":"James Henry","twitter":"MrJamesHenry","title":"🔥 Automation Overload - Example of running macOS Monterey Shortcuts via Script Kit","content":"\r\n[Install macos-monterey-shortcuts-example](https://scriptkit.com/api/new?name=macos-monterey-shortcuts-example&url=https://gist.githubusercontent.com/JamesHenry/75292ec21a02dcb8918a96c018d47a37/raw/77182d0c994698de037c5b12cc6bc5b30949c0d6/macos-monterey-shortcuts-example.js\")\r\n\r\n```js\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\n// Menu: Say Hello World Shortcut\r\n// Description: Trigger macOS Monterey Shortcut from Script Kit\r\n// Author: James Henry\r\n// Twitter: @MrJamesHenry\r\n\r\n/**\r\n * I have created a Shortcut on my Mac running macOS Monterey called\r\n * \"Say Hello World\".\r\n *\r\n * There are a couple of options available when it comes to invoking\r\n * it programmatically (whether via Script Kit or in general).\r\n */\r\n\r\n/**\r\n * OPTION 1:\r\n *\r\n * You can use the `shortcuts` CLI that is preinstalled on macOS\r\n * Monterey to run named Shortcuts.\r\n */\r\nawait $`shortcuts run \"Say Hello World\"`;\r\n\r\n/**\r\n * OPTION 2:\r\n *\r\n * You can use AppleScript to communicate with the \"Shortcuts\"\r\n * application on macOS Monterey to run named Shortcuts.\r\n *\r\n * NOTE: I first tried to communicate with \"Shortcuts Events\" per this\r\n * video from WWDC 2021, but it does not work:\r\n * https://developer.apple.com/videos/play/wwdc2021/10232/?time=1539\r\n */\r\nawait applescript(`\r\n  tell application \"Shortcuts\"\r\n    run the shortcut named \"Say Hello World\"\r\n  end tell\r\n`);\r\n\r\n```\r\n","extension":".md","description":"Created by JamesHenry","resourcePath":"/johnlindquist/kit/discussions/496","createdAt":"2021-10-29T10:51:19Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AN8tE"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"title":"Currency Converter using Google :)","content":"Since most of currency converters are paid APIs - why not just use google for this task :)\r\n\r\nhttps://user-images.githubusercontent.com/1018759/138569135-4b682b44-8b8b-4e9b-bd30-64c180bd1d5f.mp4\r\n\r\n\r\n[Install currency-converter](https://scriptkit.com/api/new?name=currency-converter&url=https://gist.githubusercontent.com/hakubo/d4822cfc6e42d7dead70d4da73bfded9/raw/97afb98be93518b2550448e5b81d425b79642ed2/currency-converter.js\")\r\n\r\n```js\r\n// Menu: Currency Converter using google\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nconst from = await arg(\"from\", [\"pln\", \"usd\", \"eur\"]);\r\nconst to = await arg(\"to\", [\"usd\", \"pln\", \"eur\"]);\r\nconst query = await arg(\"amount\");\r\nconst value = await scrapeSelector(\r\n  `https://google.com/search?q=${encodeURIComponent(\r\n    query + \" \" + from + \" \" + to\r\n  )}`,\r\n  \"span[data-value]\"\r\n);\r\n\r\ndiv(query + \" \" + from + \" = \" + value + \" \" + to, \"p-4\");\r\n\r\n```\r\n","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/494","createdAt":"2021-10-23T19:33:03Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AN6JK"},{"avatar":"https://avatars.githubusercontent.com/u/967145?u=a0c390fc6689da83a5fb10aa017ed9f58466673a&v=4","user":"brandonpittman","author":"Brandon Pittman","twitter":null,"title":"Quick Google Translate","content":"I whipped up a quick action to take some selected text and open Google Translate with it. Swap out the source, `sl`, and target, `tl`, with your most commonly used languages.\r\n\r\n[Install script](https://scriptkit.com/api/new?name=quick-translate&url=https://gist.githubusercontent.com/brandonpittman/18791a65c6721f822473b2f1900cfb50/raw/52b9db763ed4ab31139994611aaa57a0b871e46a/google-translate.ts)\r\n\r\n```ts\r\n// Menu: JA → EN\r\n// Description: Translate selected text into with Google Translate.\r\n// Author: Brandon Pittman\r\n// Shortcut: ctrl j\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst origin = \"https://translate.google.com\";\r\nconst text = await getSelectedText();\r\nconst sl = \"ja\";\r\nconst tl = \"en\";\r\nconst op = \"translate\";\r\n\r\nconst url = encodeURI(`${origin}/?sl=${sl}&tl=${tl}&text=${text}&op=${op}`);\r\n\r\nexec(`open \"${url}\"`, { encoding: \"utf8\" });\r\n```","extension":".md","description":"Created by brandonpittman","resourcePath":"/johnlindquist/kit/discussions/491","createdAt":"2021-10-21T22:46:51Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AN5ZN"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"title":"RCKIK mobile busses","content":"This is for Poznań, Poland only. Data taken from https://www.rckik.poznan.pl/najblizsze-wyjazdy\r\n\r\nIt'll show a list of next places where you can find a bus in which you can donate a blood in Poznań - filtered by given text so you can narrow list to locations closest to you.\r\n\r\nThis is WIP - I'll try to optimize it and maybe make the list easier to read.\r\n\r\n\r\n![Screenshot 2021-10-19 at 11 39 17](https://user-images.githubusercontent.com/1018759/137884912-27795174-e583-4c32-beed-14ea806b125a.png)\r\n\r\n\r\n[Install rckik](https://scriptkit.com/api/new?name=rckik&url=https://gist.githubusercontent.com/hakubo/947f4d98c74acaa041cb9944039e4479/raw/90a0ea842b9341e8592dd30dc5a8c1a29c91212f/rckik.js\")\r\n\r\n```js\r\n// Menu: RCKIK mobile\r\n// Description: Show filtered plan of mobile RCKIK busses\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nfunction transform(node) {\r\n  // Edit that to filter locations that you're interested in\r\n  // has to be inside transform function - as it's being serialized and passed to browser\r\n  const filter = \"Poznań\";\r\n  const columns = [...node.querySelectorAll(\"td\")];\r\n\r\n  if (columns[3].innerHTML.startsWith(filter)) {\r\n    return (\r\n      columns[0].querySelector(\"a\").innerHTML +\r\n      \" \" +\r\n      columns[3].innerHTML +\r\n      \" \" +\r\n      columns[2].innerHTML\r\n    );\r\n  }\r\n}\r\n\r\nconst pagination = await scrapeSelector(\r\n  \"https://www.rckik.poznan.pl/najblizsze-wyjazdy?page=1\",\r\n  \".pagination li\"\r\n);\r\n\r\nconst numberOfPages = pagination.length;\r\nlet t = [];\r\n\r\nfor (let i = 1; i <= numberOfPages; i += 1) {\r\n  const result = await scrapeSelector(\r\n    `https://www.rckik.poznan.pl/najblizsze-wyjazdy?page=${i}`,\r\n    \"#calendarTable tr:not(.header):not(.canceled)\",\r\n    transform\r\n  );\r\n\r\n  t = t.concat(result);\r\n}\r\n\r\ndiv(\r\n  `<ul>${t\r\n    .filter(Boolean)\r\n    .map((date) => `<li>${date}</li>`)\r\n    .join(\"\")}</ul>`,\r\n  \"p-4\"\r\n);\r\n\r\n```\r\n","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/490","createdAt":"2021-10-19T09:42:02Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AN3tJ"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"title":"Weather by yr.no","content":"Very simple weather forecast (as pdf 🤣  ) from yr.no bit manual to setup but should be simple an quick.\r\n\r\n![image](https://user-images.githubusercontent.com/1018759/137885137-d2e26e62-668c-4949-a389-b98b7425601c.png)\r\n\r\n[Install weather](https://scriptkit.com/api/new?name=weather&url=https://gist.githubusercontent.com/hakubo/1fc8e04a0ab26a251c6e5113ae8e85ed/raw/ae24bf7daeea3127d9be6bd0a7cd48949921e743/weather.js\")\r\n\r\n```js\r\n// Menu: Weather by yr.no\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\n/**\r\n * 1. Open https://www.yr.no/\r\n * 2. Find your location\r\n * 3. Copy what comes AFTER https://www.yr.no/en/forecast/daily-table/ to location const\r\n */\r\n\r\nconst location = \"5-1233000/Poland/Poznan\";\r\n\r\ndiv(\r\n  `<iframe src=\"https://www.yr.no/en/print/forecast/${location}#toolbar=0\" height=800 width=600/>`,\r\n  \"p-2\"\r\n);\r\n\r\n```\r\n","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/489","createdAt":"2021-10-19T09:35:42Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AN3s_"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"Script Kit online on Stackblitz ⚡️","content":"I spent last week getting Script Kit running \"in browser\" to emulate the terminal experience over on Stackblitz. Here's a quick demo:\r\n\r\nhttps://stackblitz.com/edit/node-rnrhra?file=scripts%2Frepos-to-markdown.js\r\n\r\nThe plan is to use this to host interactive demos for the guide/docs. I'd appreciate if you could play around with it a bit and see if I missed anything.\r\n\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/488","createdAt":"2021-10-18T20:06:28Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4AN3Xv"},{"avatar":"https://avatars.githubusercontent.com/u/4882345?u=b84755144b8f4f75f19a42c33667dcc66819f7de&v=4","user":"vaskort","author":"Vasilis Kortsimelidis","twitter":null,"title":"Search ASOS","content":"It will search at ASOS.com\r\n\r\n[Install search-asos](https://scriptkit.com/api/new?name=search-asos&url=https://gist.githubusercontent.com/vaskort/2c7dcba1649783d51d1df2cb860ab2dd/raw/988c94b6eba344a61d9b9a0ee51c7b7e70870a07/search-asos.js)\r\n\r\n```js\r\n// Shortcode: asos\r\n// Menu: search-asos\r\n// Description: Search ASOS\r\n// Author: Vasilis Kortsimelidis\r\n// Twitter: @vas_kort\r\n\r\nlet searchTerm = await arg(\"ASOS term to search for:\")\r\nlet termWithEncodedSpaces = searchTerm.replace(/ /g, \"%20\");\r\n\r\nexec(`open https://www.asos.com/search/?q=${termWithEncodedSpaces}`)\r\n```","extension":".md","description":"Created by vaskort","resourcePath":"/johnlindquist/kit/discussions/485","createdAt":"2021-10-12T12:22:49Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANz-U"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"title":"Record screen","content":"This script just opens Quick Time Player and turns on recording of part of your screen.\r\n\r\nIt has a dependency on another script by @johnlindquist app-launcher: https://www.scriptkit.com/johnlindquist/app-launcher\r\n\r\n\r\n[Install record-screen](https://scriptkit.com/api/new?name=record-screen&url=https://gist.githubusercontent.com/hakubo/e3c8698169fede4baad7d9d938c37a25/raw/b8bba52ed97317eb7c8ced279d48765a04214d9e/record-screen.js\")\r\n\r\n```js\r\n// Menu: Record Screen\r\n// Description: Start QuickTime player and open screen recorder\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\nawait run(\"app-launcher\", \"QuickTime Player\");\r\nawait keystroke(\"command control n\");\r\n\r\n```\r\n","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/483","createdAt":"2021-10-11T18:54:36Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANzrg"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"title":"Ping","content":"Run ping to a destination and draw a chart of latest entries.\r\n\r\n\r\nhttps://user-images.githubusercontent.com/1018759/136839677-7bdf6871-8742-4480-a8e1-54f064e6cc50.mp4\r\n\r\n\r\n\r\n[Install ping](https://scriptkit.com/api/new?name=ping&url=https://gist.githubusercontent.com/hakubo/f499d770a72aeb944350c075e722701c/raw/c04fd12e149004bc23803458888bf87dfb4807c2/ping.js\")\r\n\r\n```js\r\n// Menu: Ping\r\n// Description: Ping destination and show line graph of latest values\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\nconst jsdom = await npm(\"jsdom\");\r\nawait npm(\"canvas\");\r\nconst Chart = await npm(\"chart.js\");\r\n\r\nconst { JSDOM } = jsdom;\r\n\r\n// Edit the list to suit your needs\r\nconst destination = await arg(\"ping\", [\"8.8.8.8\", \"google.com\"]);\r\n\r\n// How many entries should the chart show\r\nconst entries = 20;\r\n\r\nconst command = `ping ${destination}`;\r\nconst child = exec(command, { async: true });\r\n\r\nconst dom = new JSDOM(\r\n  `<!DOCTYPE html><canvas id=\"bar-chart\" width=\"800\" height=\"450\"></canvas>`\r\n);\r\n\r\nglobal.window = dom.window;\r\n\r\nChart.defaults.color = \"white\";\r\nChart.defaults.font = { size: 24, weight: \"bold\" };\r\n\r\nconst labels = new Array(entries)\r\n  .fill()\r\n  .map((_, i) => i)\r\n  .reverse();\r\n\r\nlet output = [];\r\nconst chartData = {\r\n  labels: labels,\r\n  datasets: [\r\n    {\r\n      label: `${command}: - ms`,\r\n      backgroundColor: \"rgb(255, 99, 132)\",\r\n      borderColor: \"rgb(255, 99, 132)\",\r\n      data: output,\r\n    },\r\n  ],\r\n};\r\n\r\nconst chart = new Chart(dom.window.document.getElementById(\"bar-chart\"), {\r\n  type: \"line\",\r\n  data: chartData,\r\n  options: {\r\n    animation: false,\r\n    tooltips: { enabled: false },\r\n    hover: { mode: null },\r\n  },\r\n});\r\n\r\nlet firstLine = true;\r\n\r\nchild.stdout.on(\"data\", function (data) {\r\n  if (!firstLine) {\r\n    const value = +data.replace(/.*time=(.*)ms/, \"$1\");\r\n    output.push(value);\r\n\r\n    if (output.length > entries) {\r\n      output = output.slice(1);\r\n    }\r\n\r\n    chartData.datasets[0].label = `${command}: ${value}ms`;\r\n    chartData.datasets[0].data = output;\r\n    chart.update();\r\n\r\n    div(`<img src=\"${chart.toBase64Image(\"image/jpeg\", 1)}\"/>`, \"p-4\");\r\n  } else {\r\n    firstLine = false;\r\n  }\r\n});\r\n\r\n```\r\n","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/482","createdAt":"2021-10-11T18:50:33Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANzrW"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"title":"Open Jira ticket","content":"The script parses selections to find valid JIRA ticket and when found - opens it in browser\r\n\r\n\r\n[Install open-jira-ticket](https://scriptkit.com/api/new?name=open-jira-ticket&url=https://gist.githubusercontent.com/hakubo/f73e67370a52d48ebc28bfbb09114a6a/raw/3d9b16915e3b968cbd899f885fbe58b9540b28fb/open-jira-ticket.js\")\r\n\r\n```js\r\n// Menu: Open Jira ticket in browser\r\n// Description: Parses a valid ticket number from selection and opens it in browser\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\nconst jiraDomain = await env(\"JIRA_DOMAIN\");\r\nconst text = await getSelectedText();\r\nconst jiraTicket = text.match(/([A-Z]{2,5}-[0-9]+)/);\r\n\r\nif (jiraTicket) {\r\n  focusTab(`${jiraDomain}/browse/${jiraTicket[0]}`);\r\n}\r\n\r\n```\r\n","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/481","createdAt":"2021-10-09T18:53:10Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANzA1"},{"avatar":"https://avatars.githubusercontent.com/u/12306850?u=51152dab74c9158efeb6a84a65acf2464cf84218&v=4","user":"benjaminmodayil","author":"Benjamin Modayil","twitter":"24props","title":"Mouse Mover (Python Script + ScriptKit)","content":"😅 This one is more of a Python script, but I use ScriptKit to launch it. There are moments where I have to leave my computer to address something in another room or need more time than the allotted 10 minutes that Slack provides before it makes it look like I'm unavailable. For the most part, even if I'm in another room, I am still available for conversation/inquiries, so I don't want my coworkers to think I can't be bothered if my status looks like I'm away, but in reality I just might be eating/cooking. So this keeps my computer + work messaging app status in the green so it doesn't look like I'm unavailable.\r\n\r\nThe Python script requires `pyautogui` and `time` modules. I'm not the best for Python troubleshooting as I just learned some Python through YouTube tutorials. All I remember from when I wrote this was that it was a pain to get my computer using the latest version of Python.\r\n\r\nFrom the Python script below, `pyautogui` lets you __exit the script from taking control of your mouse by running `ctrl + c` or moving your mouse to the top right corner of your screen__. Because you can't run `ctrl + c` into a non-existent terminal when using it through ScriptKit, you need to move your mouse to the top right corner of your monitor to exit. \r\n\r\n**Note:** Before connecting/disconnecting external displays while the script is active, you must exit the script first, otherwise you'll have to reconnect/disconnect your displays to the condition of your computer when you started the script to exit.\r\n\r\nYou'll have to squint to see the mouse once the script starts + I only run it for three seconds before closing... Sorry about that.\r\n\r\nhttps://user-images.githubusercontent.com/12306850/135878354-7ab7e798-c63d-4a5e-8ee8-78e938d66b9a.mp4\r\n\r\n```python\r\n\r\n#! /usr/bin/env python3\r\nimport pyautogui\r\nimport time\r\n\r\nwhile True:\r\n    pyautogui.moveRel(0, 50, duration=1.5)\r\n    time.sleep(1)\r\n    pyautogui.moveRel(0, -50, duration=1.5)\r\n    time.sleep(1)\r\n    pyautogui.moveRel(50, 0, duration=1.5)\r\n    time.sleep(1)\r\n    pyautogui.moveRel(-50, 0, duration=1.5)\r\n    time.sleep(1)\r\n\r\n# You can remove a bunch of the repetition above. I just like seeing the mouse move a lot to know it's working.\r\n\r\n```\r\n\r\nHere's the ScriptKit launcher. This will vary depending on your Python path + Python script path.\r\n\r\n```js\r\n// Menu: Mouse Mover\r\n// Description: Moves your mouse so you don't go inactive in Slack or Microsoft Teams\r\n// Author: Benjamin Modayil\r\n// Twitter: @24props\r\n\r\nawait exec(`/PATH-TO-PYTHON-EXECUTABLE/python3.9 /PATH-TO-SCRIPT/i-am-here.py`)\r\n```","extension":".md","description":"Created by benjaminmodayil","resourcePath":"/johnlindquist/kit/discussions/467","createdAt":"2021-10-04T15:26:08Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANwpi"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"Image Info from Finder","content":"![CleanShot 2021-09-30 at 12 28 58](https://user-images.githubusercontent.com/36073/135510901-7559fcd9-f8e3-4875-be16-f70057efdb26.png)\r\n\r\n\r\n[Install image-info](https://scriptkit.com/api/new?name=image-info&url=https://gist.githubusercontent.com/johnlindquist/3bffee49a8128b0ebf8be12d47dce93a/raw/4b08de2b5cafc79f4244cafe6bd946e660224a61/image-info.ts\")\r\n\r\n```js\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n// Description: Displays Image Info of Selected File\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet sharp = await npm(\"sharp\")\r\n\r\nlet metadata = await sharp(\r\n  await getSelectedFile()\r\n).metadata()\r\n\r\nawait div(\r\n  md(`\r\n~~~json\r\n${JSON.stringify(metadata, null, \"\\t\")}\r\n~~~\r\n`)\r\n)\r\n\r\n```\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/466","createdAt":"2021-09-30T18:29:41Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANvTb"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"TypeScript support! 🚀","content":"beta.62 brings with it a long-awaited, much-requested feature: TypeScript support!\r\n\r\n![CleanShot 2021-09-27 at 10 42 38](https://user-images.githubusercontent.com/36073/134951810-31754840-85c3-4ad3-a493-59c757fdda07.png)\r\n\r\n## TypeScript Support 🚀\r\n\r\n### 1. But, how?\r\n\r\nEach time your run a TS script, Script Kit will compile the TS script using `esbuild` to a JS script in a `.scripts` dir (notice the \"dot\"). The compiled JS script is then imported from there. Using `.scripts` as a sibling dir will help avoid any `import`/path issues. You can also write TS \"library\" files in your `~/.kenv/lib` dir and import them into your script just fine.\r\n\r\nIf you're experienced with `esbuild` and curious about the settings, they look like this:\r\n\r\n```js\r\nlet { build } = await import(\"esbuild\")\r\n\r\nawait build({\r\n  entryPoints: [scriptPath],\r\n  outfile,\r\n  bundle: true,\r\n  platform: \"node\",\r\n  format: \"esm\",\r\n  external: [\"@johnlindquist/kit\"],\r\n})\r\n```\r\n\r\nThis also opens the door to exporting/building/bundling scripts and libs as individual shippable tools which I'll investigate more in the future.\r\n\r\n### 2. Can I still run my JS scripts if I switch to TS?\r\n\r\nYes! Both your TS and JS scripts will show up in the UI.\r\n\r\n### 3. Why the `import \"@johnlindquist/kit\"`?\r\n\r\nWhen you create a new TS script, the generated script will start with the line: `import \"@johnlindquist/kit\"`\r\n\r\nThis is mostly to make your editor stop complaining by forcing it to load the type definition files and forcing it to treat the file as an \"es module\" so support \"top-level `await`\". It's not technically required since it's not technically importing anything, but your editor will certainly complain very loudly if you leave it out.\r\n\r\n### 4. Where is the setting stored?\r\n\r\nLook in your `~/.kenv/.env` for `KIT_MODE=ts`.\r\n\r\n## fs-extra's added to global\r\n\r\nThe [fs-extra methods](https://www.npmjs.com/package/fs-extra#methods) are now added on the global space. I found myself using `outputFile`, `write/readJson`, etc too often and found them to be a great addition. The only one missing is `copy` since we're already using that to \"copy to clipboard\". You can bring it in with the normal import/alias process if needed, e.g., `let {copy:fsCopy} = await import(\"fs-extra\")`\r\n\r\n## Sync Path\r\n\r\n![CleanShot 2021-09-27 at 11 10 26](https://user-images.githubusercontent.com/36073/134954703-7c9d779f-268a-4f8b-973a-59ac71eebaf0.png)\r\n\r\nYou may notice running scripts from the Script Kit app that some commands you can run in your terminal might be missing, like \"yarn\", etc.\r\n\r\nRun the following command in your terminal to copy the $PATH var from your terminal to your `~/.kenv/.env`. This will help \"sync\" up which commands are available between your terminal and running scripts from the app.\r\n\r\n```bash\r\n~/.kit/bin/kit sync-path\r\n```\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/457","createdAt":"2021-09-27T17:25:03Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4ANtu1"},{"avatar":"https://avatars.githubusercontent.com/u/18247063?u=b194d1f49eacbd10e90eeddfc7941822205e75d4&v=4","user":"OskarsEzerins","author":"Oskars Ezerins","twitter":null,"title":"Switch osx theme","content":"Kit has to be given permission for System events in Settings -> Security & Privacy -> Privacy -> Automation\r\n\r\n```js\r\n// Menu: Switch osx theme\r\n// Shortcut: option command t\r\n// Author: Oskars Ezerins\r\n\r\nconst toggleTheme = async () => {\r\n  let script = `\r\n  tell application \"System Events\"\r\n    tell appearance preferences\r\n      set dark mode to not dark mode\r\n    end tell\r\n  end tell\r\n  `.trim()\r\n  return await global.applescript(script)\r\n}\r\n\r\ntoggleTheme()\r\n\r\n```\r\n","extension":".md","description":"Created by OskarsEzerins","resourcePath":"/johnlindquist/kit/discussions/456","createdAt":"2021-09-26T09:22:58Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANtNt"},{"avatar":"https://avatars.githubusercontent.com/u/3830326?v=4","user":"stevebarakat","author":null,"twitter":null,"title":"React Sandbox","content":"\r\n[Install react-sandbox](https://scriptkit.com/api/new?name=react-sandbox&url=https://gist.githubusercontent.com/stevebarakat/fcb2d504ba35eb653b72f0b78d1e26b5/raw/433accc5cfc9b35974fffa141d05c410d44b1875/react-sandbox.js\")\r\n\r\n```js\r\n// Menu: React Sandbox\r\n// Description: Barebones React Starter\r\n// Author: S.Barakat\r\n\r\n//Log: false\r\n\r\n// Prevent Scriptkit from closing until script finishes\r\nsetIgnoreBlur(true);\r\n\r\n// Find and replace\r\nlet replaceInFile = async (filePath, regex, string) => {\r\n  let content = await readFile(filePath, \"utf-8\")\r\n  let updatedContent = content.replace(\r\n    new RegExp(regex),\r\n    string\r\n  )\r\n  await writeFile(filePath, updatedContent)\r\n}\r\n\r\n// $`` is using the \"zx\" tool which wraps around \"exec\"\r\n// \"sed\" is a very powerful search/replace tool. We can use it for removing lines:\r\nlet removeLine = async (searchArgs, file) => {\r\n  for (let n = 0; n < searchArgs.length; n++) {\r\n    await $`sed -i .bak /${searchArgs[n]}/d ${file}`;\r\n  }\r\n}\r\n\r\n/**************\r\n  START SCRIPT\r\n **************/\r\n\r\nlet reset = false;\r\n// Prompt to reset settings\r\nlet resetSettings = await arg(\"Reset settings?\", [\"no\", \"yes\"]);\r\nif (resetSettings === \"yes\") {\r\n  reset = true;\r\n}\r\n\r\n// Prompt for the project name\r\nlet projectName = await arg(\"Project name\");\r\n// Remove any spaces or uppercase letters from project name.\r\nprojectName = await projectName.toLowerCase().replace(/\\s/g, '');\r\n\r\n// Prompt for the project directory\r\nlet projectDir = await env(\"PROJECT_DIR\", {\r\n  placeholder: \"Project directory ~/yourDir\",\r\n  reset: reset\r\n});\r\n\r\n// Prompt for the package manager\r\n// let packageManager = await arg(\"Choose package manager:\", [\"npm\", \"yarn\"]);\r\nlet packageManager = await env(\"PACKAGE_MANAGER\", {\r\n  placeholder: \"Select a package manager:\",\r\n  choices: [\"npm\", \"yarn\"],\r\n  reset: reset\r\n});\r\n\r\nif (!which(await packageManager)) {\r\n  await terminal(`~/.kit/bin/kit sync-path`);\r\n  await div(md(\"Your PATH had to be set. Please re-run command.\"));\r\n  await exit();\r\n}\r\n\r\n// \"home\" is a helper to create paths in your home dir\r\ncd(home());\r\nmkdir(projectDir);\r\ncd(projectDir);\r\n\r\n// Create new app with CRA\r\nawait $`npx create-react-app ${projectName.toLowerCase()}`;\r\n\r\ncd(path.resolve(projectName, \"src\"));\r\n\r\n// Note: \"rm\" is actually mapped to \"trash\" so files get moved to your trash bin instead of permenantly deleted\r\nrm([\r\n  `App.test.js`,\r\n  `index.css`,\r\n  `setUpTests.js`,\r\n  `reportWebVitals.js`,\r\n  `logo.svg`,\r\n]);\r\n\r\n// remove web-vitals and testing-library\r\nawait $`${packageManager} remove web-vitals @testing-library/jest-dom @testing-library/react @testing-library/user-event`\r\n\r\nlet filePath = path.resolve();\r\n\r\nawait removeLine([\"logo\"], \"App.js\");\r\nawait removeLine([\"WebVitals\", \"vitals\", \"performance\"], \"index.js\");\r\n\r\n// Download to current dir\r\nawait download(\"https://meyerweb.com/eric/tools/css/reset/reset.css\", \".\");\r\n\r\nawait replaceInFile(\r\n  filePath + \"/App.js\",\r\n  `<header className=\"App-header\">\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>`,\r\n  `App`\r\n)\r\n\r\nawait replaceInFile(\r\n  filePath + \"/index.js\",\r\n  `import './index.css'`,\r\n  `import './reset.css'`\r\n);\r\n\r\nawait replaceInFile(\r\n  filePath + \"/App.css\",\r\n  /^(?=[\\S\\s]{10,8000})[\\S\\s]*$/im,\r\n  `\r\n  *,\r\n  *::before,\r\n  *::after {\r\n    box-sizing: border-box;\r\n  }\r\n  body {\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }`\r\n);\r\n\r\nrm([\r\n  `index.js.bak`,\r\n  `App.js.bak`\r\n]);\r\n\r\nsetIgnoreBlur(false);\r\nedit(`${filePath}/../`);\r\n```\r\n","extension":".md","description":"Created by stevebarakat","resourcePath":"/johnlindquist/kit/discussions/444","createdAt":"2021-09-22T02:35:23Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANrkH"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"Scripts in GitHub actions (preview)","content":"## tl;dr Here's an example repo\r\n\r\nThe example script creates a release, downloads an image, and uploads it to the release.\r\n\r\nhttps://github.com/johnlindquist/kit-action-example\r\n\r\n## Template Repo\r\n\r\nThis page has a \"one-click\" clone so you can add/play with your own script.\r\n\r\nhttps://github.com/johnlindquist/kit-action-template\r\n\r\n## What is it?\r\n\r\nUse any of your scripts in a GitHub action. `use` the `kit-action` and point it to a scripts in your `scripts` dir:\r\n\r\n```yml\r\nname: \"example\"\r\non:\r\n  workflow_dispatch:\r\n  pull_request:\r\n  push:\r\n    branches:\r\n      - main\r\n\r\njobs:\r\n  example:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Script Kit\r\n        uses: johnlindquist/kit-action@main\r\n        with:\r\n          script: \"example-script\" # The name of a script in your ./scripts dir\r\n```\r\n\r\n## Add env vars:\r\n\r\nYou most likely add [\"secrets\" to GitHub actions](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-an-environment), so you'll want to pass them to your scripts as environment variables:\r\n\r\n```yml\r\njobs:\r\n  example:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Script Kit\r\n        uses: johnlindquist/kit-action@main\r\n        with:\r\n          script: \"example-script\"\r\n        env:\r\n          REPO_TOKEN: \"${{ secrets.REPO_TOKEN }}\" # load in your script with await env(\"REPO_TOKEN\")\r\n```\r\n\r\n## Works with your existing repos\r\n\r\nFeel free to add this action and a `scripts` dir to your existing repos. It automatically loads in your repo so you can parse `package.json`, compress assets, or whatever it is you're looking to add to your CI.\r\n\r\n## What does \"preview\" mean?\r\n\r\nEverything is working, but it's pointing to the \"main\" branch rather than a tagged version. Once I get some feedback, I'll tag a \"1.0\" version so you can `uses: @johlindquist/kit-action@v1`\r\n\r\n## Please ask for help! 😇\r\n\r\nI'd ❤️ to help you script something for a github action! Please let me know whatever I can do to help.","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/442","createdAt":"2021-09-21T19:34:15Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4ANrYA"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"title":"(Gitlab) Open next MR that awaits approval","content":"\r\n[Install nextMR](https://scriptkit.com/api/new?name=nextMR&url=https://gist.githubusercontent.com/hakubo/9b08be9ee12fa5862dd5e10d8d5ac8b4/raw/1ccb059df8f5017f51250377c71425d81389efaf/nextMR.js\")\r\n\r\n```js\r\n// Menu: GitLab - next MR\r\n// Description: Open next MR that I have not approved\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n// Shortcut: ctrl opt \\\r\n\r\nconst { request, gql, GraphQLClient } = await npm(\"graphql-request\");\r\nconst dayjs = await npm(\"dayjs\");\r\nimport relativeTime from \"dayjs/plugin/relativeTime.js\";\r\ndayjs.extend(relativeTime);\r\n\r\nconst domain = await env(\"GITLAB_DOMAIN\");\r\nconst token = await env(\"GITLAB_TOKEN\");\r\nconst username = await env(\"GITLAB_USERNAME\");\r\nconst jiraDomain = await env(\"JIRA_DOMAIN\");\r\nconst requiredApprovals = Number(await env(\"GITLAB_REQUIRED_APPROVALS\"));\r\nconst debug = false;\r\n\r\nfunction log(...args) {\r\n  if (debug) {\r\n    console.log(...args);\r\n  }\r\n}\r\n\r\nconst graphQLClient = new GraphQLClient(domain + \"/api/graphql\", {\r\n  headers: {\r\n    \"PRIVATE-TOKEN\": token,\r\n  },\r\n});\r\n\r\nconst projects = gql`\r\n  query($name: String!) {\r\n    projects(search: $name, membership: true) {\r\n      nodes {\r\n        nameWithNamespace\r\n        fullPath\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nif (!env.GITLAB_PROJECT_PATH) {\r\n  const fullPath = await arg(\"Search project\", async (input) => {\r\n    return (\r\n      await graphQLClient.request(projects, { name: input })\r\n    ).projects.nodes.map((project) => ({\r\n      name: project.nameWithNamespace,\r\n      description: project.fullPath,\r\n      value: project.fullPath,\r\n    }));\r\n  });\r\n\r\n  await cli(\"set-env-var\", \"GITLAB_PROJECT_PATH\", fullPath);\r\n}\r\n\r\nconst queryMrs = gql`\r\n  query($projectPath: ID!) {\r\n    project(fullPath: $projectPath) {\r\n      mergeRequests(state: opened, sort: UPDATED_DESC) {\r\n        nodes {\r\n          title\r\n          webUrl\r\n          iid\r\n          draft\r\n          description\r\n          createdAt\r\n          approvedBy {\r\n            nodes {\r\n              name\r\n              username\r\n            }\r\n          }\r\n          author {\r\n            name\r\n            username\r\n            avatarUrl\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst query = gql`\r\n  query($iid: String!, $projectPath: ID!) {\r\n    project(fullPath: $projectPath) {\r\n      mergeRequest(iid: $iid) {\r\n        commitsWithoutMergeCommits(first: 1) {\r\n          nodes {\r\n            authoredDate\r\n          }\r\n        }\r\n        headPipeline {\r\n          status\r\n        }\r\n        notes {\r\n          nodes {\r\n            updatedAt\r\n            author {\r\n              username\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nlet nextMR;\r\nconst myMrs = [];\r\nconst drafts = [];\r\nconst awaitingReview = [];\r\nconst alreadyCommented = [];\r\nconst haveAuthorCommented = [];\r\nconst haveOthersCommented = [];\r\nconst haveFailingPipeline = [];\r\nconst alreadyApprovedByMe = [];\r\nconst alreadyApprovedByOthers = [];\r\n\r\nconst {\r\n  project: {\r\n    mergeRequests: { nodes: mergeRequests },\r\n  },\r\n} = await graphQLClient.request(queryMrs, {\r\n  projectPath: env.GITLAB_PROJECT_PATH,\r\n});\r\n\r\narg(\"Processing...\");\r\nlog(\"Show list\", flag.showList);\r\nlog(\"Checking\", mergeRequests.length, \"MRs\");\r\n\r\nfor (let mr of mergeRequests) {\r\n  log(\"Checking MR\", mr.title, `(${mr.author.username})`);\r\n  const approvedBy = mr.approvedBy.nodes.map((node) => node.username);\r\n\r\n  if (mr.author.username === username) {\r\n    log(\"^ This is my MR\");\r\n    myMrs.push(mr);\r\n    continue;\r\n  }\r\n\r\n  if (mr.draft) {\r\n    drafts.push(mr);\r\n    log(\"^ This is a draft\");\r\n    continue;\r\n  }\r\n\r\n  if (approvedBy.includes(username)) {\r\n    log(\"^ Approved by me\");\r\n    alreadyApprovedByMe.push(mr);\r\n    continue;\r\n  } else {\r\n    if (approvedBy.length >= requiredApprovals) {\r\n      log(\"^ Approved by others\");\r\n      alreadyApprovedByOthers.push(mr);\r\n      continue;\r\n    }\r\n\r\n    const {\r\n      project: { mergeRequest },\r\n    } = await graphQLClient.request(query, {\r\n      iid: mr.iid,\r\n      projectPath: env.GITLAB_PROJECT_PATH,\r\n    });\r\n\r\n    const pipelineStatus = mergeRequest.headPipeline.status;\r\n\r\n    if (pipelineStatus !== \"SUCCESS\") {\r\n      log(\"^ Failed pipeline\");\r\n      haveFailingPipeline.push(mr);\r\n      continue;\r\n    }\r\n\r\n    const comments = mergeRequest.notes.nodes;\r\n\r\n    const anyLatestComment = comments[0];\r\n    const myLatestComment = comments.find(\r\n      (comment) => comment.author.username === username\r\n    );\r\n    const authorLatestComment = comments.find(\r\n      (comment) => comment.author.username === mr.author.username\r\n    );\r\n\r\n    if (myLatestComment) {\r\n      const latestCommitTime = dayjs(\r\n        mergeRequest.commitsWithoutMergeCommits.nodes[0].authoredDate\r\n      );\r\n      const myLatestCommentTime = dayjs(myLatestComment.updatedAt);\r\n\r\n      if (latestCommitTime.isBefore(myLatestCommentTime)) {\r\n        log(\"^ awaits new commits after my comments\");\r\n        alreadyCommented.push(mr);\r\n        continue;\r\n      }\r\n\r\n      if (authorLatestComment) {\r\n        const authorLatestCommentTime = dayjs(authorLatestComment.updatedAt);\r\n\r\n        if (authorLatestCommentTime.isAfter(myLatestComment.updatedAt)) {\r\n          log(\"^ have some comments by the MR author after my comment\");\r\n          haveAuthorCommented.push(mr);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      if (anyLatestComment) {\r\n        const latestCommentTime = dayjs(anyLatestComment.updatedAt);\r\n\r\n        if (latestCommentTime.isAfter(myLatestComment.updatedAt)) {\r\n          log(\"^ have some comments by other after my comment\");\r\n          haveOthersCommented.push(mr);\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!flag.showList) {\r\n      nextMR = mr;\r\n      break;\r\n    } else {\r\n      awaitingReview.push(mr);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createJiraLinks(text) {\r\n  return text.replace(\r\n    /[A-Z]{1,5}-[0-9]*/g,\r\n    (ticketNumber) => `[${ticketNumber}](${jiraDomain}}/browse/${ticketNumber})`\r\n  );\r\n}\r\n\r\nfunction getName(mr) {\r\n  if (mr.author.username === username) {\r\n    return `${!mr.draft && mr.approvedBy.nodes.length < 2 ? \"!A \" : \"\"}${\r\n      mr.title\r\n    }`;\r\n  }\r\n\r\n  return mr.title;\r\n}\r\n\r\nfunction getChoices(mrs, description) {\r\n  return mrs.map((mr) => ({\r\n    name: getName(mr),\r\n    value: mr.webUrl,\r\n    description: description,\r\n    img: mr.author.avatarUrl.includes(\"http\")\r\n      ? mr.author.avatarUrl\r\n      : domain + mr.author.avatarUrl,\r\n    preview: md(\r\n      `# ${createJiraLinks(mr.title)}\r\n## Created ${dayjs(mr.createdAt).fromNow()} by ${mr.author.name}\r\n\r\n## ${description}\r\n\r\n## Approved by\r\n${\r\n  mr.approvedBy.nodes.length\r\n    ? mr.approvedBy.nodes\r\n        .map(\r\n          (user) => `* ${user.name}\r\n`\r\n        )\r\n        .join(\"\")\r\n    : \"- nobody\"\r\n}\r\n\r\n${createJiraLinks(\r\n  mr.description.replace(\r\n    /\\/uploads\\//g,\r\n    domain + \"/uploads/\" + env.GITLAB_PROJECT_PATH + \"/\"\r\n  )\r\n)}`\r\n    ),\r\n  }));\r\n}\r\n\r\nif (nextMR) {\r\n  await focusTab(nextMR.webUrl);\r\n} else {\r\n  const choices = [\r\n    ...getChoices(awaitingReview, \"Awaiting Review\"),\r\n    ...getChoices(haveAuthorCommented, \"Author have comments after you\"),\r\n    ...getChoices(haveOthersCommented, \"Someone have comments after you\"),\r\n    ...getChoices(myMrs, \"My merge request\"),\r\n    ...getChoices(haveFailingPipeline, \"Failing Pipeline\"),\r\n    ...getChoices(alreadyCommented, \"You have commented on this\"),\r\n    ...getChoices(alreadyApprovedByOthers, \"Already approved by others\"),\r\n    ...getChoices(alreadyApprovedByMe, \"Already approved by you\"),\r\n    ...getChoices(drafts, \"Draft\"),\r\n  ];\r\n\r\n  if (choices.length) {\r\n    const mr = await arg(\"Open MR:\", choices);\r\n\r\n    if (mr) {\r\n      focusTab(mr);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n```\r\n\r\nThis one I use every day at work. It checks a project for any MR that have no approvals and open it for me automatically.\r\nIn case there is no MR that I should review - it opens arg with a list of all MRs that I might be interested in in this order:\r\n\r\n1. All MRs that I approved but author have comments after me\r\n2. All MRs that I approved but someone have comments after me\r\n3. All my MRs\r\n4. All MRs that have a pipeline failing\r\n5. All MRs that I have already commented\r\n6. All MRs that is already approved by others\r\n7. All MR s that is already approved by me\r\n8. All Draft Mrs.\r\n\r\nFirst time you run it i'll ask you to configure it with gitlab domain, token and your username, jira domain and number of approvals required for each MR.","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/440","createdAt":"2021-09-18T20:02:58Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANqQ0"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"title":"Conventional comments","content":"\r\n[Install comment](https://scriptkit.com/api/new?name=comment&url=https://gist.githubusercontent.com/hakubo/7813751d84d00da902f997df98a4b9a6/raw/d8e610f13ae4f943c70370195d27497124ee817e/comment.js\")\r\n\r\n```js\r\n// Menu: Conventional comment\r\n// Description: Comments that are easy to grok and grep\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n// Shortcut: opt 0\r\n// Based on: https://hemdan.hashnode.dev/conventional-comments\r\n\r\nconst type = await arg(\"Label\", [\r\n  {\r\n    name: \"👏 praise\",\r\n    value: \"**👏 praise**: \",\r\n    description:\r\n      \"Praises highlight something positive. Try to leave at least one of these comments per review (if it exists :^)\",\r\n  },\r\n  {\r\n    name: \"🤓 nitpick\",\r\n    value: \"**🤓 nitpick**: \",\r\n    description:\r\n      \"Nitpicks are small, trivial, but necessary changes. Distinguishing nitpick comments significantly helps direct the reader's attention to comments requiring more involvement.\",\r\n  },\r\n  {\r\n    name: \"🎯 suggestion\",\r\n    value: \"**🎯 suggestion**: \",\r\n    description:\r\n      \"Suggestions are specific requests to improve the subject under review. It is assumed that we all want to do what's best, so these comments are never dismissed as “mere suggestions”, but are taken seriously.\",\r\n  },\r\n  {\r\n    name: \"🔨 issue\",\r\n    value: \"**🔨 issue**: \",\r\n    description:\r\n      \"Issues represent user-facing problems. If possible, it's great to follow this kind of comment with a suggestion.\",\r\n  },\r\n  {\r\n    name: \"❔ question\",\r\n    value: \"**❔ question**: \",\r\n    description:\r\n      \"Questions are appropriate if you have a potential concern but are not quite sure if it's relevant or not. Asking the author for clarification or investigation can lead to a quick resolution.\",\r\n  },\r\n  {\r\n    name: \"💭 thought\",\r\n    value: \"**💭 thought**: \",\r\n    description:\r\n      \"Thoughts represent an idea that popped up from reviewing. These comments are non-blocking by nature, but they are extremely valuable and can lead to more focused initiatives and mentoring opportunities.\",\r\n  },\r\n  {\r\n    name: \"💣 chore\",\r\n    value: \"**💣 chore**: \",\r\n    description:\r\n      \"Chores are simple tasks that must be done before the subject can be “officially” accepted. Usually, these comments reference some common processes. Try to leave a link to the process described so that the reader knows how to resolve the chore.\",\r\n  },\r\n]);\r\n\r\nsetSelectedText(type);\r\n\r\n```\r\n\r\nSimple list of conventional comments ready to be used.\r\nhttps://conventionalcomments.org/\r\n\r\n","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/439","createdAt":"2021-09-18T19:47:08Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANqQp"},{"avatar":"https://avatars.githubusercontent.com/u/3830326?v=4","user":"stevebarakat","author":null,"twitter":null,"title":"Computer Info","content":"\r\n[Install computer-info](https://scriptkit.com/api/new?name=computer-info&url=https://gist.githubusercontent.com/stevebarakat/f8c4140f0fc23638cc851a4ae352811a/raw/3dbfd57e6e24f5065cbafc43917a129ab4bc5f2e/computer-info.js\")\r\n\r\n```js\r\n// Menu: Computer Info\r\n// Description: Gets Computer info\r\n// Author: S.Barakat\r\n\r\nimport os from \"os\";\r\n\r\nconst homeDirectory = os.homedir();\r\n\r\nconst osPlatform = os.platform();\r\n\r\nconst cpu = os.cpus();\r\nconst coreCount = cpu.length;\r\nconst cpuModel = cpu[0].model;\r\nconst cpuSpeed = cpu[0].speed;\r\n\r\nlet info = `\r\n* OS: ${osPlatform}\r\n* Home: ${homeDirectory}\r\n* CPU: ${cpuModel}\r\n* Speed: ${cpuSpeed} MHz\r\n* Cores: ${coreCount}\r\n`\r\n\r\n\r\nawait say(\r\n  `\r\n  Your home directory is: ${homeDirectory}. \r\n  The OS platform is: ${osPlatform}. \r\n  The processor speed is ${cpuSpeed} megahertz.\r\n  Your ${cpuModel} has ${coreCount} cores.\r\n  `\r\n);\r\n\r\nawait div(md(info), `p-4`)\r\n```\r\n","extension":".md","description":"Created by stevebarakat","resourcePath":"/johnlindquist/kit/discussions/433","createdAt":"2021-09-13T20:28:09Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNTcwMTQ1"},{"avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","author":"Kent C. Dodds","twitter":"kentcdodds","title":"Create new Blog Post","content":"I'm even using metascraper to scrape unsplash for an image, it's alt text, and author (unsplash does not make any of these things easy, yes I realize they have an API, but their terms say you have to hotlink to them if you use it and I don't want to).\r\n\r\nI'm using cloudinary auto-uploads so I don't have to bother uploading the photo manually either :)\r\n\r\n[Install new-post](https://scriptkit.com/api/new?name=new-post&url=https://gist.githubusercontent.com/kentcdodds/f9a5b9f24f8866e75138ff1629bab071/raw/ba9205394f971b62e56064ea528a905b49e10768/new-post.js\")\r\n\r\n```js\r\n// Menu: New Post\r\n// Description: Create a new blog post\r\n// Author: Kent C. Dodds\r\n// Shortcut: command option control p\r\n// Twitter: @kentcdodds\r\n\r\nconst dateFns = await npm('date-fns')\r\nconst prettier = await npm('prettier')\r\nconst YAML = await npm('yaml')\r\nconst slugify = await npm('@sindresorhus/slugify')\r\nconst {format: formatDate} = await npm('date-fns')\r\nconst makeMetascraper = await npm('metascraper')\r\nconst {$filter, toRule} = await npm('@metascraper/helpers')\r\n\r\nconst unsplashTitleToAlt = toRule(str => str.replace(/ photo – .*$/, ''))\r\nconst unsplashOGTitleToAuthor = toRule(str =>\r\n  str.replace(/Photo by (.*?) on Unsplash/, '$1'),\r\n)\r\nconst unsplashImageToPhotoId = toRule(str =>\r\n  new URL(str).pathname.replace('/', ''),\r\n)\r\n\r\nconst metascraper = makeMetascraper([\r\n  {\r\n    unsplashPhotoId: [\r\n      unsplashImageToPhotoId($ =>\r\n        $('meta[property=\"og:image\"]').attr('content'),\r\n      ),\r\n    ],\r\n  },\r\n  {\r\n    author: [\r\n      unsplashOGTitleToAuthor($ =>\r\n        $('meta[property=\"og:title\"]').attr('content'),\r\n      ),\r\n    ],\r\n  },\r\n  {alt: [unsplashTitleToAlt($ => $('title').text())]},\r\n])\r\n\r\nasync function getMetadata(url) {\r\n  const html = await fetch(url).then(res => res.text())\r\n  return metascraper({html, url})\r\n}\r\n\r\nconst blogDir = await env(\r\n  'KCD_BLOG_CONTENT_DIR',\r\n  `What's the path to the blog content directory on this machine?`,\r\n)\r\n\r\nconst title = await arg({\r\n  placeholder: `What's the title of this post?`,\r\n  hint: 'Title',\r\n  ignoreBlur: true,\r\n})\r\n\r\nconst description = await arg({\r\n  placeholder: `What's the description of this post?`,\r\n  hint: 'Description',\r\n  input: 'TODO: add a description',\r\n  ignoreBlur: true,\r\n})\r\n\r\nconst categories = (\r\n  await arg({\r\n    placeholder: `What are the categories of this post?`,\r\n    hint: 'Categories (comma separated)',\r\n    ignoreBlur: true,\r\n  })\r\n)\r\n  .split(',')\r\n  .map(c => c.trim())\r\n\r\nconst keywords = (\r\n  await arg({\r\n    placeholder: `What are the keywords of this post?`,\r\n    hint: 'Keywords (comma separated)',\r\n    ignoreBlur: true,\r\n  })\r\n)\r\n  .split(',')\r\n  .map(c => c.trim())\r\n\r\nconst unsplashPhotoInput = await arg({\r\n  placeholder: `What's the unsplash photo?`,\r\n  hint: 'Unsplash Photo',\r\n  ignoreBlur: true,\r\n})\r\nconst unsplashPhotoUrl = unsplashPhotoInput.startsWith('http')\r\n  ? unsplashPhotoInput\r\n  : `https://unsplash.com/photos/${unsplashPhotoInput}`\r\n\r\nconst metadata = await getMetadata(unsplashPhotoUrl)\r\n\r\nconst frontmatter = YAML.stringify({\r\n  title,\r\n  date: dateFns.format(new Date(), 'yyyy-MM-dd'),\r\n  description,\r\n  categories,\r\n  meta: {keywords},\r\n  bannerCloudinaryId: `unsplash/${metadata.unsplashPhotoId}`,\r\n  bannerAlt: metadata.alt,\r\n  bannerCredit: `Photo by [${metadata.author}](${unsplashPhotoUrl})`,\r\n})\r\n\r\nconst md = `---\r\n${frontmatter}\r\n---\r\n\r\nBe excellent to each other.\r\n`\r\n\r\n// prettify the markdown\r\nconst prettyMd = await prettier.format(md, {\r\n  parser: 'markdown',\r\n  arrowParens: 'avoid',\r\n  bracketSpacing: false,\r\n  embeddedLanguageFormatting: 'auto',\r\n  htmlWhitespaceSensitivity: 'css',\r\n  insertPragma: false,\r\n  jsxBracketSameLine: false,\r\n  jsxSingleQuote: false,\r\n  printWidth: 80,\r\n  proseWrap: 'always',\r\n  quoteProps: 'as-needed',\r\n  requirePragma: false,\r\n  semi: false,\r\n  singleQuote: true,\r\n  tabWidth: 2,\r\n  trailingComma: 'all',\r\n  useTabs: false,\r\n  vueIndentScriptAndStyle: false,\r\n})\r\n\r\nconst filename = slugify(title, {decamelize: false})\r\nconst newFile = path.join(blogDir, `${filename}.mdx`)\r\nawait writeFile(newFile, prettyMd)\r\nawait edit(newFile)\r\n\r\n```\r\n","extension":".md","description":"Created by kentcdodds","resourcePath":"/johnlindquist/kit/discussions/420","createdAt":"2021-09-03T13:25:47Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNTU0MjEx"},{"avatar":"https://avatars.githubusercontent.com/u/1780212?u=d13d5e4e13fac82156fe85a78a2079c560a349b8&v=4","user":"hariombalhara","author":null,"twitter":"hariom_balhara","title":"Github Actions","content":"[Github Actions Script](https://gist.github.com/hariombalhara/969bd98ec14006d5b8b60fb51d018aa2)\r\n\r\nI have my blog using Notion API and whenever I want to publish a post to my blog, I trigger a GitHub Workflow that does the job.\r\n\r\nEarlier, I used to do it using a bookmark for the workflow and 1-2 additional clicks in Github UI. \r\n","extension":".md","description":"Created by hariombalhara","resourcePath":"/johnlindquist/kit/discussions/409","createdAt":"2021-08-25T07:43:09Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNTM4MjI2"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"beta.55 Improved Search, Drag, and Happiness 😊","content":"## Search Improvements\r\n\r\nbeta.55 has a vastly improved search:\r\n\r\nSearch descriptions 🎉\r\n\r\n![CleanShot 2021-08-20 at 13 37 44](https://user-images.githubusercontent.com/36073/130285547-24f111d7-a706-4be2-b0d6-b425afbe6683.png)\r\n\r\nSearch shortcuts\r\n\r\n![CleanShot 2021-08-20 at 13 51 49](https://user-images.githubusercontent.com/36073/130286634-4797c029-c2ed-4071-9e1d-285d6bf1a15f.png)\r\n\r\nSearch by kenv\r\n\r\n![CleanShot 2021-08-20 at 13 51 18](https://user-images.githubusercontent.com/36073/130286567-4fd0a155-43a7-4af5-bd3f-c0a9db9ae8dc.png)\r\n\r\nSear by \"command-name\" (if you can't think of // Menu: name)\r\n\r\n![CleanShot 2021-08-20 at 13 54 45](https://user-images.githubusercontent.com/36073/130286878-62b2a139-b3b7-4c34-904f-40d7b03a7e1c.png)\r\n\r\nSorts by \"score\" (rather than alphabetically)\r\n\r\n## Drag\r\n\r\nChoices can now take a `drag` property. This will make list items \"draggable\" and allow you to drag/drop to copy files from your machine (or even from URLs!) into any app. When using remote URLs, their will be a bit of \"delay\" while the file downloads (depending on the file size) between \"drag start\" and \"drop enabled\", so just be aware. I'll add some sort of download progress indicator sometime in the future, just not high priority 😅\r\n\r\n```js\r\n// Menu: Drag demo\r\n\r\nawait arg(\r\n  {\r\n    placeholder: \"Drag something from below\",\r\n    ignoreBlur: true,\r\n  },\r\n  [\r\n    {\r\n      name: \"Heart Eyes (local)\",\r\n      drag: \"/Users/johnlindquist/Downloads/john-hearts@2x.png\",\r\n      img: \"/Users/johnlindquist/Downloads/john-hearts@2x.png\",\r\n    },\r\n    {\r\n      name: \"React logo svg (wikipedia)\",\r\n      drag: \"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\",\r\n      img: \"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\",\r\n    },\r\n  ]\r\n)\r\n```\r\n\r\n![CleanShot 2021-08-20 at 15 26 07](https://user-images.githubusercontent.com/36073/130294979-c45aabe2-6c30-41ad-94b4-64a85a2c34eb.gif)\r\n\r\nYou can use the `drag` object syntax to define a `format` and `data`\r\n\r\n> `text/html`: Renders the HTML payload in contentEditable elements and rich text (WYSIWYG) editors like Google Docs, Microsoft Word, and others.\r\n> `text/plain`: Sets the value of input elements, content of code editors, and the fallback from text/html.\r\n> `text/uri-list`: Navigates to the URL when dropping on the URL bar or browser page. A URL shortcut will be created when dropping on a directory or the desktop.\r\n\r\n```js\r\n// Menu: Drag demo\r\n\r\nawait arg(\r\n  {\r\n    placeholder: \"Drag something from below\",\r\n    ignoreBlur: true,\r\n  },\r\n  [\r\n    {\r\n      name: \"Padding 4\",\r\n      drag: {\r\n        format: \"text/plain\",\r\n        data: `className=\"p-4\"`,\r\n      },\r\n    },\r\n    {\r\n      name: \"I love code\",\r\n      drag: {\r\n        format: \"text/html\",\r\n        data: `<span style=\"background-color:yellow;font-family:Roboto Mono\">I ❤️ code</span>`,\r\n      },\r\n    },\r\n  ]\r\n)\r\n```\r\n\r\n![CleanShot 2021-08-20 at 15 48 00](https://user-images.githubusercontent.com/36073/130296713-6249d5c2-c01f-42d1-b2c2-ea86d2e4c29b.gif)\r\n\r\n## Happiness\r\n\r\nI'm _very_ happy with the state of Script Kit. When I started almost a year ago, I had no idea I could push the concept of creating/sharing/managing custom scripts so far. I think it looks great, feels speedy, and is flexible enough to handle so, so many scenarios.\r\n\r\nWith everything in place, next week I'm starting on creating lessons, demos, and docs. It's time to show you what Script Kit can really do 😉 \r\n\r\nP.S. - Thanks for all the beta-testing and feedback. It's been tremendously helpful!\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/405","createdAt":"2021-08-20T21:58:48Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zNTMxOTA2"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"Search MDN","content":"\r\n[Install mdn-search](https://scriptkit.com/api/new?name=mdn-search&url=https://gist.githubusercontent.com/johnlindquist/3c3b581c19e5ad78d2a0a8d659dafee8/raw/bc7e56597e2eb90872b1133e17ee77d5b380760e/mdn-search.js\")\r\n\r\n```js\r\n// Shortcode: mdn\r\n// Menu: Search MDN\r\n// Description: Search and open MDN docs\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet searchIndexResponse = await get(\r\n  `https://developer.mozilla.org/en-US/search-index.json`\r\n)\r\n\r\nlet url = await arg(\r\n  `Select doc:`,\r\n  searchIndexResponse.data.map(({ title, url }) => ({\r\n    name: title,\r\n    description: url,\r\n    value: `https://developer.mozilla.org${url}`,\r\n  }))\r\n)\r\n\r\nexec(`open '${url}'`)\r\n\r\n```\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/400","createdAt":"2021-08-17T21:34:27Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNTI1OTI0"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"beta.46 Design, ⚐ Flags, div, fixed notify","content":"## Design/theme\r\n\r\nPut a lot of work into tightening up pixels and made progress towards custom themes:\r\n\r\n![CleanShot 2021-08-13 at 09 35 40](https://user-images.githubusercontent.com/36073/129383567-ae628c68-3c96-463f-a47e-4800186ea7ac.png)\r\n\r\nHere's a silly demo of me playing with theme generation:\r\n\r\nhttps://user-images.githubusercontent.com/36073/129384214-2af744ab-8165-4e3f-825d-42fadbf86aec.mp4\r\n\r\n## Flags ⚐\r\n\r\nAn astute observer would notice that the `Edit` and `Share` tabs are now gone. They've been consolidated into a \"flag menu\".\r\n\r\nWhen you press the `right` key from the main menu of script, the flag menu now opens up. This shows the selected script and gives you some options. It also exposes the keyboard shortcuts associated with those options that you can use to :\r\n\r\n![CleanShot 2021-08-13 at 09 42 52](https://user-images.githubusercontent.com/36073/129384559-bff59ebf-88d9-4b95-b9b5-640ce755fe8f.png)\r\n\r\nI've found I use `cmd+o` and `cmd+n` all the time to tweak scripts of quickly create a new one to play around with.\r\n\r\n### Custom Flags\r\n\r\nYou can pass your own custom flags like so:\r\n\r\n[Install flags-demo](https://scriptkit.com/api/new?name=flags-demo&url=https://gist.githubusercontent.com/johnlindquist/b96c8f8de9c256f909ae0f6ab0adda39/raw/9f049cf454f0766fb278e5ee7a24c6b6776df889/flags-demo.js)\r\n\r\n```js\r\n//Menu: Flags demo\r\n\r\nlet urls = [\r\n  \"https://scriptkit.com\",\r\n  \"https://egghead.io\",\r\n  \"https://johnlindquist.com\",\r\n]\r\n\r\nlet flags = {\r\n  open: {\r\n    name: \"Open\",\r\n    shortcut: \"cmd+o\",\r\n  },\r\n  copy: {\r\n    name: \"Copy\",\r\n    shortcut: \"cmd+c\",\r\n  },\r\n}\r\n\r\nlet url = await arg(\r\n  { placeholder: `Press 'right' to see menu`, flags },\r\n  urls\r\n)\r\n\r\nif (flag?.open) {\r\n  $`open ${url}`\r\n} else if (flag?.copy) {\r\n  copy(url)\r\n} else {\r\n  console.log(url)\r\n}\r\n```\r\n\r\nNotice that `flag` is a global while `flags` is an object you pass to `arg`. This is to help keep it consistent with terminal usage:\r\n\r\nFrom the terminal\r\n```bash\r\nflags-demo --open\r\n```\r\n\r\nWill set the global `flag.open` to `true`\r\n\r\n![CleanShot 2021-08-13 at 10 08 30](https://user-images.githubusercontent.com/36073/129388037-3f27a12d-9e44-4402-a51f-bac39eead54d.png)\r\n\r\n\r\nYou could also run this and pass in all the args:\r\n\r\n```bash\r\nflags-demo https://egghead.io --copy\r\n```\r\n\r\nIn the app, you could create a second script to pass flags to the first with. This is required if you need to pass multiple flags since the `arg` helper can only \"submit\" one per `arg`.\r\n\r\n```js\r\nawait run(`flags-demo https://egghead.io --copy`)\r\n```\r\n\r\nI'll put together some more demos soon. There are plenty of existing CLI tools out there using flags heavily, so lots of inspiration to pull from.\r\n\r\n## `await div()`\r\n\r\nThere's a new `div` \"component\". You can pass in arbitrary HTML. This works well with the `md()` helper which generates `html` from markdown.\r\n\r\n[Install div-demo](https://scriptkit.com/api/new?name=div-demo&url=https://gist.githubusercontent.com/johnlindquist/0ad790953f7101d313abfd48182356b0/raw/c70e17649317986707d2ac714c31afe6f7850015/div-demo.js)\r\n\r\n```js\r\n// Menu: Div Demo\r\n\r\n// Hit \"enter\" to continue, escape to exit\r\nawait div(`<img src=\"https://placekitten.com/320\"/>`)\r\n\r\nawait div(\r\n  md(\r\n    `\r\n    # Some header\r\n\r\n    ## You guessed it, an h2\r\n\r\n    * I\r\n    * love\r\n    * lists\r\n    `\r\n  )\r\n)\r\n\r\n```\r\n\r\n## Fixed `notify`\r\n\r\n`notify` is now fixed so that it doesn't open a prompt\r\n\r\nThe most basic usage is:\r\n\r\n```js\r\nnotify(\"Hello world\")\r\n```\r\n\r\n`notify` leverages [https://www.npmjs.com/package/node-notifier](https://www.npmjs.com/package/node-notifier)\r\n\r\nSo the entire API should be available. Here's an example of using the \"type inside a notification\":\r\n\r\n[Install notify-demo](https://scriptkit.com/api/new?name=notify-demo&url=https://gist.githubusercontent.com/johnlindquist/44387dc5b0c170e4146b061162c33532/raw/1bce77fb778a45cf9052a63d02dcab94a9cf7ef0/notify-demo.js)\r\n\r\n```js\r\n// Menu: Notify Demo\r\nlet notifier = notify({\r\n  title: \"Notifications\",\r\n  message: \"Write a reply?\",\r\n  reply: true,\r\n})\r\n\r\nnotifier.on(\"replied\", async (obj, options, metadata) => {\r\n  await arg(metadata.activationValue)\r\n})\r\n\r\n```\r\n\r\n\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/397","createdAt":"2021-08-13T16:33:27Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zNTE2OTE1"},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"title":"Genius Lyrics Lookup","content":"Just what it says on the tin. How can I improve this one?\r\n\r\n[Install song-search](https://scriptkit.com/api/new?name=song-search&url=https://gist.githubusercontent.com/dealingwith/11ca5e660d3873a3e521ad2905e2b5b7/raw/4910306cd3818772b1cd67b1718e0f3d59e7ced5/song-search.js)\r\n\r\n```js\r\n// Menu: Genius Lyrics Search\r\n\r\nlet Genius = await npm('genius-lyrics-api')\r\n\r\nlet geniusUserToken = await env(\"GENIUS_AUTH_TOKEN\")\r\nimport { getLyrics, searchSong } from 'genius-lyrics-api';\r\n\r\nlet songTitle = await arg(\"Song Title\")\r\n\r\nlet options = {\r\n  apiKey: geniusUserToken,\r\n  title: songTitle,\r\n  artist: '',\r\n  optimizeQuery: true\r\n}\r\n\r\nlet returnedSongs = await(searchSong(options).then((r) => r))\r\nlet returnedSongTitles = returnedSongs.map(s => s.title)\r\n\r\nlet chosenSongTitle = await arg(\"Which song?\", returnedSongTitles)\r\n\r\nlet songData = returnedSongs.filter(s => s.title == chosenSongTitle)\r\nlet lyrics = await(getLyrics(songData[0].url).then((r) => r))\r\n\r\nlet whatToDo = await arg(\"\", [\"Copy\", \"View\", \"Visit\"])\r\n\r\nif (whatToDo == \"Copy\") copy(lyrics)\r\nelse if (whatToDo == \"View\") await textarea(lyrics)\r\nelse if (whatToDo == \"Visit\") await focusTab(songData[0].url)\r\n\r\n```\r\n","extension":".md","description":"Created by dealingwith","resourcePath":"/johnlindquist/kit/discussions/392","createdAt":"2021-08-12T13:50:24Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNTE0ODcy"},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"title":"Resize selected images","content":"Resizes selected images to specified width. Note: overwrites existing files.\r\n\r\n[Install batch-image-resize](https://scriptkit.com/api/new?name=batch-image-resize&url=https://gist.githubusercontent.com/dealingwith/3cdc6420882928df72f9671fd8f366d7/raw/cce80aaf26edd7210f15af16ecb3cade4013dd39/batch-image-resize.js)\r\n\r\n```js\r\nlet Jimp = await npm('jimp')\r\n\r\nlet width = await arg('New width in pixels')\r\n\r\nlet selectedFiles = await getSelectedFile();\r\nlet filePaths = selectedFiles.split(\"\\n\");\r\n\r\nfor (let filePath of filePaths) {\r\n  Jimp.read(filePath, (err, image) => {\r\n    if (err) throw err;\r\n    image.resize(parseInt(width), Jimp.AUTO).write(filePath); // save\r\n  });\r\n}\r\n```","extension":".md","description":"Created by dealingwith","resourcePath":"/johnlindquist/kit/discussions/390","createdAt":"2021-08-12T04:37:13Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNTE0MDc3"},{"avatar":"https://avatars.githubusercontent.com/u/17577332?v=4","user":"pomdtr","author":"Achille Lacoin","twitter":null,"title":"Manipulate the clipboard content using the command line","content":"This script allows to quickly run and preview any shell command on the clipboard content using the command line.\r\nExample usecase -> urlencode a string, extract column from a csv, run a jq command...\r\nYou can also chain shell commands using pipes.\r\n\r\n[Install pipe](https://scriptkit.com/api/new?name=pipe&url=https://gist.githubusercontent.com/pomdtr/6d389a4490fd53b6eeaf4ac1e74e820e/raw/65e967a027e2296f620761d949062173979c998b/pipe.js)\r\n\r\n```js\r\n// Menu: Pipe Clipboard to Command\r\n// Decription: Manipulate clipboard content using the command line\r\n// Author: pomdtr\r\n\r\nprocess.env.PATH = `${process.env.HOME}/.local/bin:/usr/local/bin/:${process.env.PATH}`;\r\n\r\nfunction codeblock(text) {\r\n  const triple_backquote = \"```\";\r\n  return `${triple_backquote}shell\\n${text}\\n${triple_backquote}`;\r\n}\r\n\r\n// Persist clipoard inside a file\r\nconst clipboardContent = await paste();\r\nconst tempfile = `${kit.tempdir()}/input.txt`;\r\nawait kit.writeFile(tempfile, clipboardContent, {\r\n  flag: \"w\",\r\n  encoding: \"utf-8\",\r\n});\r\n\r\nlet command = \"\";\r\nlet [stdout, stderr, code] = [null, null, 0];\r\nlet panelContent = await kit.readFile(tempfile, { encoding: \"utf-8\" });\r\n\r\nwhile (true) {\r\n  command = await arg(\r\n    {\r\n      placeholder: \"Input Command:\",\r\n      className: \"p-2\",\r\n      input: command,\r\n      hint: \"Hit enter to run command and save output to clipboard, esc to dismiss window.\"\r\n    },\r\n    md(codeblock(panelContent))\r\n  );\r\n\r\n  if (command) {\r\n    ({ stdout, stderr, code } = exec(`cat ${tempfile} | ${command}`));\r\n    panelContent = code == 0 ? stdout : stderr;\r\n    if (code == 0) {\r\n      panelContent = stdout;\r\n    } else {\r\n      panelContent = stderr;\r\n    }\r\n  } else {\r\n    panelContent = await kit.readFile(tempfile, { encoding: \"utf-8\" });\r\n  }\r\n\r\n  await copy(panelContent);\r\n}\r\n\r\n```\r\n","extension":".md","description":"Created by pomdtr","resourcePath":"/johnlindquist/kit/discussions/377","createdAt":"2021-07-31T10:42:01Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDkxODQ3"},{"avatar":"https://avatars.githubusercontent.com/u/12306850?u=51152dab74c9158efeb6a84a65acf2464cf84218&v=4","user":"benjaminmodayil","author":"Benjamin Modayil","twitter":"24props","title":"Generate TS Interfaces from JSON input","content":"Hi everyone,\r\n\r\nJust made this quick script and thought I'd share. My company is updating our codebases to use TypeScript and wanted a way to quickly generate interfaces from JSON input. I'm usually right clicking and copying parts of API responses in the Network tab to pick out the JSON and manually type things out. Now I just copy the JSON, paste into Kit, and then save a few moments of my time. \r\n\r\n## Script\r\n\r\n```javascript\r\n// Title: Generate types\r\n// Description: Paste your JSON in and get your Interfaces straight to your clipboard\r\n// Author: Benjamin Modayil\r\n// Twitter: @24props\r\n\r\nlet {json2ts} = await npm('json-ts')\r\n\r\nlet schema = await arg(\"What is the schema?\");\r\nawait copy(`${json2ts(schema)}`)\r\n\r\nnotify({\r\n  title: 'Interfaces copied to the clipboard',\r\n  message: \"Paste your interfaces into a text editor\"\r\n})\r\nexit() // needed otherwise scriptkit hangs open\r\n```\r\n\r\nI haven't tested the script that much yet, but something that could be tweaked would be wrapping `json-ts` in a try/catch and outputting a different notification depending on the result. \r\n\r\nAnother thing to note is that the output from `json-ts` could always be improved from the developer using the script. I would assume for `json-ts` that it's pretty hard to generate union types without more data to comb through and it's up to the developer to determine when you might need flexibility `number | string` or strictness from something like `\"success\" | \"error\" | \"warning\"`. Also, from the example output below, `json-ts` generates the property `previous` as null, based on the data provided, but I'm guessing it's actually supposed to be a string like `next`. All this to say: \"use at your own discretion\".\r\n\r\n## Example\r\n\r\nGo to this [Pokemon API JSON link](https://pokeapi.co/api/v2/pokemon/), copy JSON, paste into script, paste into editor, and see the below output: \r\n\r\n```typescript\r\ninterface IRootObject {\r\n    count: number;\r\n    next: string;\r\n    previous: null;\r\n    results: IResultsItem[];\r\n}\r\ninterface IResultsItem {\r\n    name: string;\r\n    url: string;\r\n}\r\n```\r\n","extension":".md","description":"Created by benjaminmodayil","resourcePath":"/johnlindquist/kit/discussions/373","createdAt":"2021-07-29T20:12:56Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDg5Njcw"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"beta.33 `console.log` component, cmd+o to Open, `className`","content":"## `console.log` Component\r\n\r\nThe follow code will create the below prompt (👀 notice the black background logging component):\r\n```js\r\nlet { stdout } = await $`ls ~/projects | grep kit`\r\n\r\nawait arg(`Select a kit dir`, stdout.split(\"\\n\"))\r\n\r\n```\r\n<img width=\"402\" alt=\"CleanShot 2021-07-22 at 16 13 10@2x\" src=\"https://user-images.githubusercontent.com/36073/126716080-db8e1361-7972-488c-8873-2996a7c03064.png\">\r\n\r\n```js\r\nconsole.log(chalk`{green.bold The current date is:}`)\r\nconsole.log(new Date().toLocaleDateString())\r\nawait arg()\r\n```\r\n\r\n<img width=\"416\" alt=\"CleanShot 2021-07-22 at 16 12 24@2x\" src=\"https://user-images.githubusercontent.com/36073/126716010-b38c8d28-af68-4f1f-aefd-93de186a03d2.png\">\r\n\r\nThe log even persists between prompts:\r\n\r\n```js\r\nlet first = await arg(\"First name\")\r\nconsole.log(first)\r\nlet last = await arg(\"Last name\")\r\nconsole.log(`${first} ${last}`)\r\nlet age = await arg(\"Age\")\r\nconsole.log(`${first} ${last} ${age}`)\r\nlet emotion = await arg(\"Emotion\")\r\nconsole.log(`${first} ${last} ${age} ${emotion}`)\r\nawait arg()\r\n```\r\n<img width=\"415\" alt=\"CleanShot 2021-07-22 at 16 19 36@2x\" src=\"https://user-images.githubusercontent.com/36073/126716651-bb7b539a-2314-4d95-bcd9-5104c8d18ec5.png\">\r\n\r\nClick the \"edit\" icon to open the full log in your editor:\r\n![CleanShot 2021-07-22 at 16 20 57@2x](https://user-images.githubusercontent.com/36073/126716749-4eda367a-4e55-424f-915a-30207583cd3f.png)\r\n\r\n## cmd+o to Open\r\n\r\nFrom the main menu, hitting `cmd+o` will open:\r\n\r\n1. The currently selected script from the main menu\r\n2. The currently running script\r\n3.  Any \"choice\" that provides a \"filePath\" prop:\r\n\r\n```js\r\nawait arg(`cmd+o to open file`, [\r\n  {\r\n    name: \"Karabiner config\",\r\n    filePath: \"~/.dotfiles/karabiner/karabiner.edn\",\r\n  },\r\n  {\r\n    name: \"zshrc\",\r\n    filePath: \"~/.zshrc\",\r\n  },\r\n])\r\n```\r\n\r\nI've found this really useful when I want to tweak the running script, but I don't want to go back through the process of finding it.\r\n\r\n## Experimental `className`\r\n\r\nYou can pass `className` into the arg options to affect the container for the list items or panel. Most classes from Tailwind should be available. Feel free to play around with it and let me know how it goes 😇:\r\n\r\n```js\r\nawait arg(\r\n  {\r\n    className: \"p-4 bg-black font-mono text-xl text-white\",\r\n  },\r\n  `\r\n  <p>Working on Script Kit today</p>\r\n  <img src=\"https://i.imgflip.com/5hc0v4.jpg\" title=\"made at imgflip.com\"/>`\r\n)\r\n\r\n```\r\n\r\n<img width=\"428\" alt=\"CleanShot 2021-07-22 at 16 38 40@2x\" src=\"https://user-images.githubusercontent.com/36073/126717978-2bf8d0e4-24a4-47ad-948a-97fde38a83e0.png\">\r\n\r\n\r\n```js\r\nawait arg(\r\n  {\r\n    className: \"p-4 bg-black font-mono text-xl text-white\",\r\n  },\r\n  [\"Eat\", \"more\", \"tacos 🌮\"]\r\n)\r\n```\r\n\r\n<img width=\"420\" alt=\"CleanShot 2021-07-22 at 16 41 19@2x\" src=\"https://user-images.githubusercontent.com/36073/126718146-c3c94b10-0e5a-4e9d-8bab-a6b7c3b6f1d3.png\">\r\n\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/365","createdAt":"2021-07-22T22:44:19Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zNDczNTEw"},{"avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","author":"Kent C. Dodds","twitter":"kentcdodds","title":"Daily Story","content":"Wrote a new script where I can quickly write little stories of what's going on in my life. It's kind of like a little journal. I set the `DAILY_STORY_DIRECTORY` to a folder in dropbox.\r\n\r\nThe only thing I'm unsure of right now is I want to use `textarea` but I don't know how to actually submit what's been typed. Hitting \"enter\" just (correctly) inserts a newline. I tried ⌘+enter and that didn't work. Anyone know how to submit a textarea?\r\n\r\n[Install daily-story](https://scriptkit.com/api/new?name=daily-story&url=https://gist.githubusercontent.com/kentcdodds/1a5d2b4eabd90ae6b45734ddc2a040dc/raw/d59daeb69d8ef54d54fc4823c0b7f2c147d6932e/daily-story.js)\r\n\r\n```js\r\n// Menu: Daily Story\r\n// Description: Write a quick story\r\n// Author: Kent C. Dodds\r\n// Shortcut: command option control o\r\n// Twitter: @kentcdodds\r\n\r\nconst dateFns = await npm('date-fns')\r\nconst filenamify = await npm('filenamify')\r\nconst prettier = await npm('prettier')\r\n\r\nconst storyDir = await env(\r\n  'DAILY_STORY_DIRECTORY',\r\n  `Where do you want daily stories to be saved?`,\r\n)\r\n\r\nconst story = await arg({placeholder: 'Write your story here'})\r\n\r\nconst today = dateFns.format(new Date(), 'yyyy-MM-dd')\r\nconst date = await arg({\r\n  input: today,\r\n  hint: 'When did this happen?',\r\n})\r\nconst title = await arg({\r\n  placeholder: 'What do you want to call this story?',\r\n  hint: 'Title',\r\n})\r\n\r\nconst md = `---\r\ntitle: ${title}\r\ndate: ${date}\r\nwritten: ${today}\r\n---\r\n\r\n${story}\r\n`\r\n\r\n// prettify the markdown\r\nconst prettyMd = await prettier.format(md, {\r\n  parser: 'markdown',\r\n  arrowParens: 'avoid',\r\n  bracketSpacing: false,\r\n  embeddedLanguageFormatting: 'auto',\r\n  htmlWhitespaceSensitivity: 'css',\r\n  insertPragma: false,\r\n  jsxBracketSameLine: false,\r\n  jsxSingleQuote: false,\r\n  printWidth: 80,\r\n  proseWrap: 'always',\r\n  quoteProps: 'as-needed',\r\n  requirePragma: false,\r\n  semi: false,\r\n  singleQuote: true,\r\n  tabWidth: 2,\r\n  trailingComma: 'all',\r\n  useTabs: false,\r\n  vueIndentScriptAndStyle: false,\r\n})\r\n\r\nconst filename = filenamify(\r\n  `${date}-${title.toLowerCase().replace(/ /g, '-')}.md`,\r\n  {replacement: '-'},\r\n)\r\nawait writeFile(path.join(storyDir, filename), prettyMd)\r\n\r\n```\r\n","extension":".md","description":"Created by kentcdodds","resourcePath":"/johnlindquist/kit/discussions/357","createdAt":"2021-07-20T18:16:42Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDY5NTIw"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"beta.29 M1 build, install remote kenvs, polish, upcoming lessons","content":"I'm starting on lessons/docs on Monday. If you have anything specific you want me to cover, please reply below!\r\n\r\n## M1 Build\r\n If you're on an M1 mac, you can download the new M1 build from https://www.scriptkit.com/\r\n\r\n1. Download https://www.scriptkit.com/\r\n2. Quit Kit. *note - typing `kit quit` or `k q` in the app is the fastest way to quit.\r\n3. Drag/drop to overwrite your previous build\r\n4. Kit should now auto-update from the M1 channel\r\n5. Open Kit\r\n\r\n## Kenv Management\r\nThere are a lot of tools to help manage other kenvs. They're in the `Kit` menu and once you've installed a remote kenv (which is really just a git repo with a scripts dir), then more options show up in the `Edit` menu to move scripts between kenvs, etc. I'll cover this in detail in the docs/lessons\r\n\r\n## Polish\r\nLots of UI work:\r\n* Remembering position - Each script with a `//Shortcut` will remember its last individual prompt position. For example, if you have a script that uses `textarea`, then drag it to the upper right, the next time you launch that script, it will launch in that position.\r\n* `//Image` metadata - Scripts can now have images:\r\n```js\r\n//Image: https://placekitten.com/64\r\n```\r\nor\r\n```js\r\n//Image: logo.png\r\n```\r\nwill load from `~/.kenv/assets/logo.png`\r\n\r\n\r\n* Spinner - added a spinner for when you submit a prompt and the process needs to do some work before opening the next prompt\r\n\r\n![CleanShot 2021-07-16 at 12 22 58](https://user-images.githubusercontent.com/36073/125992326-7b6f0034-00e8-41df-9ca7-f0e33becf0b2.gif)\r\n\r\n\r\n* Resizing - *Lots* of work on getting window resizing behavior consistent between different UIs. This was a huge pain, but you'll probably never appreciate it 😅\r\n* Lots more - many more small things\r\n\r\n## Lessons!\r\n\r\nI'm starting to work on lessons next week and getting back into streaming schedule. I would ♥️ to hear any specific questions or lessons you would like to see to help you remove some friction from your day. I'll be posting the lessons over on [egghead.io](egghead.io) for your viewing pleasure. Please ask questions in the replies!\r\n\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/353","createdAt":"2021-07-16T18:29:00Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zNDY0MDk2"},{"avatar":"https://avatars.githubusercontent.com/u/2118956?u=dd12813efdeb91151f98fcecd5c078f29bed6ff9&v=4","user":"JCofman","author":"Jacob Cofman","twitter":null,"title":"Generate fake data with faker.js","content":"Here is a simple one to generate fake data with https://github.com/marak/Faker.js/ and save it to clipboard.\r\n\r\n```js\r\n// Menu: Fake\r\n// Description: generate fake data with faker.js\r\n// Author: Jacob Cofman\r\n// Twitter: @jcofman\r\n\r\nconst faker = await npm(\"faker\");\r\n\r\nfunction getMethodFakerData(method) {\r\n  return Object.keys(faker[method]);\r\n}\r\n\r\nconst fakerMethods = [\r\n  \"name\",\r\n  \"address\",\r\n  \"phone\",\r\n  \"internet\",\r\n  \"company\",\r\n  \"image\",\r\n  \"lorem\",\r\n  \"helpers\",\r\n  \"date\",\r\n  \"random\",\r\n  \"finance\",\r\n  \"hacker\",\r\n  \"system\",\r\n  \"commerce\",\r\n  \"database\",\r\n  \"animal\",\r\n  \"git\",\r\n  \"music\",\r\n  \"datatype\",\r\n];\r\n\r\nconst method = await arg(\"Select-Base-Method:\", fakerMethods);\r\n\r\nconst fakerBaseMethods = getMethodFakerData(method);\r\n\r\nconst script = await arg(\"Select-Script:\", fakerBaseMethods);\r\n\r\nconst result = await faker[method][script]();\r\ncopy(result);\r\nawait arg(result);\r\n```","extension":".md","description":"Created by JCofman","resourcePath":"/johnlindquist/kit/discussions/341","createdAt":"2021-07-10T10:00:11Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDU0MDky"},{"avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","author":"Kent C. Dodds","twitter":"kentcdodds","title":"ConvertKit lookup","content":"Created a new script to easily query convert kit because I was tired of the manual process of going to convert kit and clicking around to find a particular user. Wrote this in 2 minutes (had some of the convert kit API code already). Man I love ScriptKit.\r\n\r\n[Install convert-kit-lookup](https://scriptkit.com/api/new?name=convert-kit-lookup&url=https://gist.githubusercontent.com/kentcdodds/815c2fad013740830946c17468e3bbb7/raw/7b1c9ba639eb6881ba8d595f14eca04832087af9/convert-kit-lookup.js)\r\n\r\n```js\r\n// Menu: ConvertKit > Lookup\r\n// Description: Query convertkit\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nconst CONVERT_KIT_API_SECRET = await env('CONVERT_KIT_API_SECRET')\r\nconst CONVERT_KIT_API_KEY = await env('CONVERT_KIT_API_KEY')\r\n\r\nconst query = await arg('query')\r\nlet url\r\nif (query.includes('@')) {\r\n  const sub = await getConvertKitSubscriber(query)\r\n  if (sub?.id) {\r\n    url = `https://app.convertkit.com/subscribers/${sub.id}`\r\n  }\r\n}\r\n\r\nif (!url) {\r\n  url = `https://app.convertkit.com/subscribers?utf8=%E2%9C%93&q=${query}&status=all`\r\n}\r\nexec(`open \"${url}\"`)\r\n\r\nasync function getConvertKitSubscriber(email) {\r\n  const url = new URL('https://api.convertkit.com/v3/subscribers')\r\n  url.searchParams.set('api_secret', CONVERT_KIT_API_SECRET)\r\n  url.searchParams.set('email_address', email)\r\n\r\n  const resp = await fetch(url.toString())\r\n  const json = await resp.json()\r\n  const {subscribers: [subscriber] = []} = json\r\n\r\n  return subscriber\r\n}\r\n\r\n```\r\n","extension":".md","description":"Created by kentcdodds","resourcePath":"/johnlindquist/kit/discussions/336","createdAt":"2021-07-08T05:07:55Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDUwNjMy"},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"title":"Title Case Selected Text","content":"Here's a really quick one I decided to spin up this morning:\r\n\r\n[Install title-case](https://scriptkit.com/api/new?name=title-case&url=https://gist.githubusercontent.com/dealingwith/02ad42f0b334ed36faf7d034f8d97c76/raw/14467032b86ce587d70032f4cd29b913ef30234c/title-case.js)\r\n\r\n```js\r\nlet { titleCase } = await npm(\"title-case\");\r\nlet selectedText = await getSelectedText();\r\nlet value = titleCase(selectedText);\r\nawait setSelectedText(value);\r\n```\r\n\r\n\r\n...also, a tiny variant on the above I like to call The Proper Namifier™\r\n\r\n```js\r\nlet { titleCase } = await npm(\"title-case\");\r\nlet selectedText = await getSelectedText();\r\nlet value = titleCase(selectedText) + '™';\r\nawait setSelectedText(value);\r\n``` ","extension":".md","description":"Created by dealingwith","resourcePath":"/johnlindquist/kit/discussions/335","createdAt":"2021-07-01T14:06:36Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDQwNDQw"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"Beta.20 MOAR SPEED! ⚡️","content":"## Process Pools and Virtualized Lists\r\n\r\nhttps://user-images.githubusercontent.com/36073/123519955-7fdd8200-d66b-11eb-8167-09b9daed1c9f.mp4\r\n\r\n\r\n## Experimental `textarea`\r\n\r\nFeel free to play around with the `textarea` for multiline input.\r\n\r\n```js\r\nlet value = await textarea()\r\n```\r\n\r\nThe API of textarea will change (it currently just sets the placeholder), but it will always return the string value of the textarea, so there won't be any breaking changes if you just keep the default behavior. `cmd+s` submits. `cmd+w` cancels.\r\n\r\n## Experimental `editor` (this will become a _paid_  💵 feature later this year)\r\n\r\nAs an upgrade to `textarea`, `await editor()` will give you a full editor experience. Same as the textarea, the API will also change, but will always return a string of the content.\r\n\r\n\r\n```js\r\n// Defaults to markdown\r\nlet value = await editor()\r\n```\r\n\r\n> ⚠️ API is subject to change!\r\n```js\r\nlet value = await editor(\"markdown\", `\r\n## Preloaded content\r\n\r\n* nice\r\n`)\r\n```\r\n\r\n```js\r\nlet value = await editor(\"javascript\", `\r\nconsole.log(\"Support other languages\")\r\n`)\r\n```\r\n\r\n### A note on paid features\r\n\r\nEverything you've used so far in the Script Kit app will stay free. The core `kit` is open-source MIT. \r\n\r\nThe paid features will be add-ons to the core experience: Themes, Editor, Widgets, Screenshots, Record Audio, and many more fun ideas. These will roll out experimentally in the free version first then move exclusively to the paid version. Expect the paid versions later this year.\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/330","createdAt":"2021-06-26T17:03:40Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zNDMxOTgz"},{"avatar":"https://avatars.githubusercontent.com/u/25487857?u=a371b702ae9208d23d523acc1fcd02ce6573ffe0&v=4","user":"vojtaholik","author":"Vojta Holik","twitter":"vjthlk","title":"Compress selected images with Tinify","content":"![tinify](https://user-images.githubusercontent.com/25487857/123306748-f706ff00-d521-11eb-9f11-6744d7b1e76b.gif)\r\n\r\n```js\r\n// Menu: Tinify\r\n// Description: Compress selected images with Tinify\r\n// Author: Vojta Holik\r\n// Twitter: @vjthlk\r\n\r\nlet tinify = await npm(\"tinify\");\r\nlet fs = await import(\"fs\");\r\nlet selectedFiles = await getSelectedFile();\r\n\r\ntinify.key = env.TINIFY_API_KEY;\r\n\r\nlet filePaths = selectedFiles.split(\"\\n\");\r\n\r\nfor (let filePath of filePaths) {\r\n  let directory = path.dirname(filePath);\r\n  let extension = path.extname(filePath);\r\n  let originalFileName = path.basename(filePath);\r\n  let suffix = \"-optimized\";\r\n  let newFileName = originalFileName.replace(extension, suffix + extension);\r\n\r\n  fs.readFile(filePath, (err, sourceData) => {\r\n    if (err) throw err;\r\n    tinify.fromBuffer(sourceData).toBuffer((err, resultData) => {\r\n      if (err) throw err;\r\n      fs.writeFile(`${directory}/` + newFileName, resultData, (err) => {\r\n        if (err) throw err;\r\n      });\r\n    });\r\n  });\r\n}\r\n```\r\n\r\nGet your api key on [tinify.com/dashboard/api](https://tinify.com/dashboard/api) _(assuming you're logged in)_ and add it to `~/.kenv/.env` file like so:\r\n```env\r\n# ...\r\nTINIFY_API_KEY=your_key\r\n```\r\n\r\n---\r\n\r\n<details>\r\n  <summary>You can change file names and directory to best suite your workflow. Since I often work with <code>@2x</code> images I adjusted the script to correctly suffix that part.</summary>\r\n\r\n```js\r\nlet isHD = originalFileName.includes(\"@2x\");\r\nlet newFileName = isHD\r\n  ? originalFileName\r\n      .replace(\"@2x\", \"\")\r\n      .replace(extension, `${suffix}@2x${extension}`)\r\n  : originalFileName.replace(extension, `${suffix}${extension}`);\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n","extension":".md","description":"Created by vojtaholik","resourcePath":"/johnlindquist/kit/discussions/328","createdAt":"2021-06-24T17:28:25Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDI4OTg5"},{"avatar":"https://avatars.githubusercontent.com/u/12891645?u=eb9ed13c1bc9eeccf0b87ddbeea8778c7c32c05a&v=4","user":"JoepKockelkorn","author":"Joep Kockelkorn","twitter":"JoepKockelkorn","title":"Paste last item from clipboard","content":"With two globals you can paste the last item from the clipboard:\r\n\r\n`await setSelectedText(await paste());`","extension":".md","description":"Created by JoepKockelkorn","resourcePath":"/johnlindquist/kit/discussions/325","createdAt":"2021-06-20T07:15:54Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDIwNDMy"},{"avatar":"https://avatars.githubusercontent.com/u/25487857?u=a371b702ae9208d23d523acc1fcd02ce6573ffe0&v=4","user":"vojtaholik","author":"Vojta Holik","twitter":"vjthlk","title":"Slugify selected file names","content":"<img src=\"https://p-ZmFjNlQ.b3.n0.cdn.getcloudapp.com/items/mXur6N2W/50e6f3d6-8b3d-4b24-a4c6-3ee047a9613e.gif?v=f5fe168354cb0d1e34dcbf405c7891ac\" width=\"700\" />\r\n\r\n```js\r\n// Menu: Slugify file name\r\n// Description: Slugify selected files\r\n// Author: Vojta Holik\r\n// Twitter: @vjthlk\r\n\r\nlet slugify = await npm(\"slugify\")\r\nlet selectedFiles = await getSelectedFile()\r\n\r\nconst filePaths = selectedFiles.split(\"\\n\")\r\n\r\nfor (let filePath of filePaths) {\r\n  let originalFileName = path.basename(filePath)\r\n  let newFileName = slugify(originalFileName, {\r\n    lower: true,\r\n  })\r\n  let newFilePath = path.join(\r\n    path.dirname(filePath),\r\n    newFileName\r\n  )\r\n\r\n  cp(filePath, newFilePath)\r\n}\r\n```","extension":".md","description":"Created by vojtaholik","resourcePath":"/johnlindquist/kit/discussions/320","createdAt":"2021-06-15T08:26:48Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDEyNTU1"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"Beta.19 New Features - Gotta go fast! 🏎💨","content":"Beta.19 is all about _speed_! I've finally landed on an approach I love to get the prompt moving waaaay faster.\r\n\r\nCouple videos below:\r\n\r\n## Instant Prompts\r\n\r\nhttps://user-images.githubusercontent.com/36073/121084054-6d270a00-c79d-11eb-8b37-96473de7e0e4.mp4\r\n\r\n```js\r\n// Shortcut: option 5\r\n\r\nlet { items } = await db(async () => {\r\n  let response = await get(\r\n    `https://api.github.com/users/johnlindquist/repos`\r\n  )\r\n\r\n  return response.data\r\n})\r\n\r\nawait arg(\"Select repo\", items)\r\n\r\n```\r\n\r\n## Instant Tabs\r\n\r\nhttps://user-images.githubusercontent.com/36073/121084134-85972480-c79d-11eb-9e18-94e5a2efa5d1.mp4\r\n\r\n## Instant Main Menu\r\n\r\nThe main menu now also leverages the concepts behind Instant Prompts listed above.\r\n\r\n## Faster in the future\r\n\r\nThese conventions laid the groundwork for caching prompt data, but I still have plenty ideas to speed things, especially around how the app launches the process. I'm looking forward to making this even faster for you!\r\n\r\nI'm also starting the work on an \"Instant Textarea\" because I know popping open a little textarea to take/save notes/ideas is something many people would use. 📝\r\n\r\n\r\n\r\n\r\n\r\n\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/312","createdAt":"2021-06-07T20:47:28Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zNDAwNjgx"},{"avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","author":"Kent C. Dodds","twitter":"kentcdodds","title":"Cloudinary upload","content":"I made this handy little script that makes it really easy for me to upload images to cloudinary.\r\n\r\nI just realized that I need to make it so I can create a new folder from script kit (right now you can only choose from folders that already exist). But it should make it much easier for me to get images up to cloudinary while I'm in the zone writing a blog post :)\r\n\r\n```js\r\n// Menu: Cloudinary upload\r\n// Description: Upload an image to cloudinary\r\n// Shortcut: command option control c\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nimport path from 'path'\r\n\r\nconst cloudinaryCloudName = await env('CLOUDINARY_CLOUD_NAME')\r\nconst cloudinaryKey = await env('CLOUDINARY_API_KEY')\r\nconst cloudinarySecret = await env('CLOUDINARY_API_SECRET')\r\nconst cloudiaryConsoleId = await env('CLOUDINARY_CONSOLE_ID')\r\n\r\nawait npm('cloudinary')\r\nimport cloudinary from 'cloudinary'\r\n\r\nconst cacheDb = await db('cloudinary-cache', {lastChoice: '', folders: {}})\r\nawait cacheDb.read()\r\n\r\ncloudinary.config({\r\n  cloud_name: cloudinaryCloudName,\r\n  api_key: cloudinaryKey,\r\n  api_secret: cloudinarySecret,\r\n  secure: true,\r\n})\r\n\r\nconst actions = {\r\n  CREATE_NEW: 'creating new folder',\r\n  REFRESH_CACHE: 'refreshing cache',\r\n  OPEN_DIR: 'opening directory',\r\n}\r\n\r\nlet chosenDirectory = await cacheDb.data.lastChoice\r\nlet lastSelection\r\nwhile (true) {\r\n  // if the last action was to create a new directory then we know the chosen\r\n  // directory is new and has no folders otherwise we have to wait a few seconds\r\n  // for the API to be prepared for us to make a request for the contents.\r\n  const directories =\r\n    lastSelection === actions.CREATE_NEW\r\n      ? []\r\n      : await getFolders(chosenDirectory)\r\n  lastSelection = await arg(\r\n    `Select directory in ${chosenDirectory}`,\r\n    [\r\n      {name: '.', value: '.', description: '✅ Choose this directory'},\r\n      !chosenDirectory\r\n        ? null\r\n        : {name: '..', value: '..', description: '⤴️ Go up a directory'},\r\n      ...directories.map(folder => ({\r\n        name: folder.name,\r\n        value: folder.path,\r\n        description: '⤵️ Select directory',\r\n      })),\r\n      {\r\n        name: 'Open directory',\r\n        value: actions.OPEN_DIR,\r\n        description: '🌐 Open this directory in the browser',\r\n      },\r\n      {\r\n        name: 'Refresh cache',\r\n        value: actions.REFRESH_CACHE,\r\n        description: '🔄 Refresh the cache for this directory',\r\n      },\r\n      {\r\n        name: 'Create new directory',\r\n        value: actions.CREATE_NEW,\r\n        description: '➕ Create a new directory here',\r\n      },\r\n    ].filter(Boolean),\r\n  )\r\n  if (lastSelection === '..') {\r\n    chosenDirectory = chosenDirectory.split('/').slice(0, -1).join('/')\r\n  } else if (lastSelection === '.') {\r\n    break\r\n  } else if (lastSelection === actions.CREATE_NEW) {\r\n    const newFolderName = await arg(`What's the new folder name?`)\r\n    const newDirectory = `${chosenDirectory}/${newFolderName}`\r\n    const result = await cloudinary.v2.api.create_folder(newDirectory)\r\n    delete cacheDb.data.folders[chosenDirectory]\r\n    chosenDirectory = newDirectory\r\n  } else if (lastSelection === actions.REFRESH_CACHE) {\r\n    delete cacheDb.data.folders[chosenDirectory]\r\n  } else if (lastSelection === actions.OPEN_DIR) {\r\n    await openFolder(chosenDirectory)\r\n  } else {\r\n    chosenDirectory = lastSelection\r\n  }\r\n}\r\n\r\ncacheDb.data.lastChoice = chosenDirectory\r\nawait cacheDb.write()\r\n\r\nconst images = await arg({\r\n  placeholder: 'Drop the image(s) you want to upload',\r\n  drop: true,\r\n  ignoreBlur: true,\r\n})\r\nfor (const image of images) {\r\n  const defaultName = path.parse(image.path).name\r\n\r\n  const name =\r\n    (await arg({\r\n      placeholder: `Name of this image?`,\r\n      hint: `Default is: \"${defaultName}\"`,\r\n    })) || defaultName\r\n\r\n  const uploadedImage = await cloudinary.v2.uploader.upload(image.path, {\r\n    public_id: name,\r\n    overwrite: false,\r\n    folder: chosenDirectory,\r\n  })\r\n\r\n  // If you have multiple files then this isn't really useful unless you have\r\n  // clipbloard history (which I recommend you get!)\r\n  await copy(uploadedImage.secure_url)\r\n}\r\n\r\nawait openFolder(chosenDirectory)\r\n\r\nfunction openFolder(folder) {\r\n  const encodedFolder = encodeURIComponent(folder)\r\n  console.log('opening')\r\n  return exec(\r\n    `open \"https://cloudinary.com/console/${cloudiaryConsoleId}/media_library/folders/${encodedFolder}\"`,\r\n  )\r\n}\r\n\r\nasync function getFolders(directory) {\r\n  const cachedDirectories = cacheDb.data.folders[directory]\r\n  if (cachedDirectories) {\r\n    return cachedDirectories\r\n  }\r\n\r\n  try {\r\n    const {folders: directories} = !directory\r\n      ? await cloudinary.v2.api.root_folders()\r\n      : await cloudinary.v2.api.sub_folders(directory)\r\n\r\n    cacheDb.data.folders[directory] = directories\r\n\r\n    await cacheDb.write()\r\n\r\n    return directories\r\n  } catch (error) {\r\n    console.error('error with the directory')\r\n    return []\r\n  }\r\n}\r\n```","extension":".md","description":"Created by kentcdodds","resourcePath":"/johnlindquist/kit/discussions/310","createdAt":"2021-06-07T05:28:35Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzk5NDk0"},{"avatar":"https://avatars.githubusercontent.com/u/5678065?u=e2e528a3ee58b5150a1947c7ded93695b35a8779&v=4","user":"Alarid","author":"Yohann Legrand","twitter":null,"title":"My attempt with Notion API","content":"Hey folks 👋 \r\n\r\nSo I have this big \"Tasks\" database in Notion where I put all my tasks (personal/work/projects). Each task has many properties, including a \"Status\" (_ToDo, Doing, Done, ..._) and a \"Day\" (_Monday, Tuesday, ...) which I use in a view called \"Week planner\". It's a board view, one column for each value of the property \"Day\", which allows me to have a nice view of what needs to be done this week. I found myself using mainly this view for inserting new tasks. In fact, if I need to do something for tomorrow or the day after, then I add a new task in this column. \r\n\r\nSince Notion released their APIs, I thought \"How cool it would be to do this with Kit!\". I finally did it, and I'm loving it already. This is gonna save me so much time. If I'm working on something and a new task pop into my mind, I can add it from anywhere in a few seconds.\r\n\r\nHere is the script for those interested _(UPDATED VERSION: thanks John for the tips)_\r\n\r\n```js\r\n// Menu: New task\r\n// Description: Add a new task in Notion\r\n\r\nconst { newTask, getProperties, syncProperties } = await lib(\"notion-tasks\")\r\n\r\nlet taskName = await arg({\r\n  placeholder: \"Task name\",\r\n  hint: `Type \"sync\" to sync`,\r\n})\r\nif (taskName === \"sync\") {\r\n  try {\r\n    await syncProperties()\r\n    notify({\r\n      title: \"✅ Notion sync\",\r\n      message: \"Tasks properties successfully cached locally\",\r\n    })\r\n  } catch (err) {\r\n    notify({\r\n      title: \"⛔️ Notion sync\",\r\n      message: \"Something went wrong\",\r\n    })\r\n    console.error(err)\r\n  }\r\n  taskName = await arg(\"Task name\")\r\n}\r\n\r\nconst { statusOptions, dayOptions, tagOptions } = getProperties()\r\n\r\nconst status = await arg(\r\n  \"Status\",\r\n  statusOptions.map((opt) => opt.name)\r\n)\r\nconst day = await arg(\r\n  \"Day\",\r\n  dayOptions.map((opt) => opt.name)\r\n)\r\nconst tag = await arg(\r\n  \"Tag\",\r\n  tagOptions.map((opt) => opt.name)\r\n)\r\n\r\ntry {\r\n  await newTask(taskName, status, day, tag)\r\n  send(\"HIDE_APP\")\r\n  notify({\r\n    title: \"✅ New task added\",\r\n    message: `${taskName} for ${day} (${status})`,\r\n  })\r\n} catch (err) {\r\n  send(\"HIDE_APP\")\r\n  notify({\r\n    title: \"⛔️ New task\",\r\n    message: `Something went wrong`,\r\n  })\r\n  console.error(err)\r\n}\r\n```\r\n\r\nAnd the lib file (`.kenv/lib/notion-tasks.js`)\r\n\r\n```js\r\nconst notionToken = await env(\"NOTION_USER_TOKEN\")\r\nconst databaseId = \"06d55db47a994f429132d5d8fd9edd2a\"\r\nconst tasksDb = await db(\"tasks\", {\r\n  properties: {\r\n    statusOptions: [],\r\n    dayOptions: [],\r\n    tagOptions: [],\r\n  },\r\n})\r\nexport const getProperties = () => tasksDb.properties\r\n\r\nexport async function syncProperties() {\r\n  const { data } = await get(\r\n    `https://api.notion.com/v1/databases/${databaseId}`,\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${notionToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n        \"Notion-Version\": \"2021-05-13\",\r\n      },\r\n    }\r\n  )\r\n  const {\r\n    Status: {\r\n      select: { options: statusOptions },\r\n    },\r\n    Day: {\r\n      multi_select: { options: dayOptions },\r\n    },\r\n    Tag: {\r\n      multi_select: { options: tagOptions },\r\n    },\r\n  } = data.properties\r\n\r\n  tasksDb.properties = { statusOptions, dayOptions, tagOptions }\r\n  await tasksDb.write()\r\n}\r\n\r\nexport async function newTask(taskName, status, day, tag) {\r\n  return await post(\r\n    \"https://api.notion.com/v1/pages\",\r\n    {\r\n      parent: { database_id: databaseId },\r\n      properties: {\r\n        Name: {\r\n          title: [{ text: { content: taskName } }],\r\n        },\r\n        Status: {\r\n          select: { name: status },\r\n        },\r\n        Day: {\r\n          multi_select: [{ name: day }],\r\n        },\r\n        Tag: {\r\n          multi_select: [{ name: tag }],\r\n        },\r\n      },\r\n    },\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${notionToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n        \"Notion-Version\": \"2021-05-13\",\r\n      },\r\n    }\r\n  )\r\n}\r\n```\r\n\r\n~Maybe I'm missing something about caching though 😅~ Any feedback/improvement ideas appreciated. And once again, thanks @johnlindquist for this amazing app, I use it every single day and it has definitely made my life easier 🙏 ","extension":".md","description":"Created by Alarid","resourcePath":"/johnlindquist/kit/discussions/306","createdAt":"2021-06-04T23:37:23Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzk3MzQy"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"How to Get Your Scripts Featured on ScriptKit.com 😎","content":"TL;DR\r\n\r\n- Help -> Create kenv\r\n- Git init new kenv, push to github\r\n- Reply, dm, contact me somehow with the repo 😇\r\n\r\nHere's a video walking you through it:\r\n\r\nhttps://user-images.githubusercontent.com/36073/120856653-6732ee00-c53d-11eb-9dfb-04907b036361.mp4\r\n\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/305","createdAt":"2021-06-04T20:07:36Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzk3MTc2"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"Beta.18 Changes/Features (`db` has a breaking change)","content":"## ⚠️Breaking: New `db` helper\r\n\r\n[lowdb](https://github.com/typicode/lowdb) updated to 2.0, so I updated the `db` helper to support it.\r\n\r\n* access/mutate the objects in the db directly. Then `.write()` to save your changes to the file.\r\n* `await db()` and `await myDb.write()`\r\n\r\nExample with a simple object:\r\n```js\r\nlet shoppingListDb = await db(\"shopping-list\", {\r\n  list: [\"apples\", \"bananas\"],\r\n})\r\n\r\nlet item = await arg(\"Add to list\")\r\nshoppingListDb.list.push(item)\r\nawait shoppingListDb.write()\r\n\r\nawait arg(\"Shopping list\", shoppingListDb.list)\r\n```\r\n\r\n\r\nYou can also use an `async` function to store the initial data:\r\n```js\r\nlet reposDb = await db(\"repos\", async () => {\r\n  let response = await get(\r\n    \"https://api.github.com/users/johnlindquist/repos\"\r\n  )\r\n\r\n  return {\r\n    repos: response.data,\r\n  }\r\n})\r\n\r\nawait arg(\"Select repo\", reposDb.repos)\r\n```\r\n\r\n## Text Area prompt\r\n\r\n```js\r\nlet text = await textarea()\r\n\r\ninspect(text)\r\n```\r\n![CleanShot 2021-06-04 at 14 25 12](https://user-images.githubusercontent.com/36073/120858988-cf370380-c540-11eb-8b79-5483ec090dd8.gif)\r\n\r\n\r\n## Optional `value`\r\n\r\n`arg` choice objects used to require a `value`. Now if you don't provide a value, it will simply return the entire object:\r\n\r\n```js\r\nlet person = await arg(\"Select\", [\r\n  { name: \"John\", location: \"Chair\" },\r\n  { name: \"Mindy\", location: \"Couch\" },\r\n])\r\n\r\nawait arg(person.location)\r\n```\r\n\r\n## ⚗️ Experimental \"Multiple kenvs\"\r\n\r\nThere was a _ton_ 🏋️‍♀️ of internal work over the past couple weeks to get this working. The \"big idea\" is supporting multiple kit environments. For example:\r\n\r\n* private/personal kenv\r\n* shared kenv\r\n* company kenv\r\n* product kenv\r\n\r\n### Future plans\r\nIn an upcoming release: \r\n* you'll be able to \"click to install kenv from repo\" (just like we do with individual scripts)\r\n* update a git-controlled kenv (like a company kenv)\r\n* the main prompt will be able to search for all scripts across kenvs. \r\n* If multiple kenvs exist, creating a new script will ask you which kenv to create it in.\r\n\r\nFor now, you can try adding/creating/switching the help menu. It should all work fine, but will be _waaaay_ cooler in the future 😎\r\n\r\n![CleanShot 2021-06-04 at 11 50 32](https://user-images.githubusercontent.com/36073/120843227-16b29500-c52b-11eb-974c-a81c260b9ae2.png)\r\n\r\n## Improved Error Prompt\r\n\r\nNow when an error occurs, it takes the error data, shuts down the script, then prompts you on what to do. For example, trying to use the old `db` would result in this:\r\n\r\n![CleanShot 2021-06-04 at 12 03 04](https://user-images.githubusercontent.com/36073/120844575-d6541680-c52c-11eb-8d12-c7c3117e132e.png)\r\n\r\n## Improved Tab Switching\r\nSwitching tabs will now cancel the previous tabs' script. Previously, if you quickly switched tabs on the main menu, the \"Hot\" tab results might show up in a different tab because the loaded _after_ the tab switched. The internals around message passing between the script and the app now have a cancellation mechanism so you only get the latest result that matches the prompt/tab. (This was also a ton of internals refactoring work 😅)\r\n\r\n\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/304","createdAt":"2021-06-04T18:09:55Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzk3MDY0"},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"title":"Another Notion example -- select a random item from a database","content":"Like the [last Notion example I posted](https://github.com/johnlindquist/kit/discussions/286), this one interfaces with my giant, singular Tasks database in Notion. This one selects one task at random (that does not have a status of Done or Archive).\r\n\r\n[Install notion-random-task](https://scriptkit.com/api/new?name=notion-random-task&url=https://gist.githubusercontent.com/dealingwith/43c1079690c14481ec2e76737e5f60fc/raw/f77a17b9cfe93b0a4b8eb0f533f014aeaaadbb9f/notion-random-task.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\n\r\nlet {data} = await post(\r\n  `https://api.notion.com/v1/databases/${databaseID}/query`,\r\n{\r\n  \"filter\": {\r\n    \"and\": [\r\n      {\r\n        \"property\": \"Status\",\r\n        \"select\": {\r\n          \"does_not_equal\": \"Done\"\r\n        }\r\n      },\r\n      {\r\n        \"property\": \"Status\",\r\n        \"select\": {\r\n          \"does_not_equal\": \"Archive\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  page_size: 100\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet tasks = data.results\r\nlet task = tasks[Math.floor(Math.random() * tasks.length)];\r\nlet pageID = task.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\ncopy(pageURL)\r\n\r\nawait focusTab(pageURL, \"Google Chrome Beta\")\r\n```\r\n\r\nI also created one that only queries for tasks with no status (the \"inbox\")...\r\n\r\n[Install notion-random-from-inbox](https://scriptkit.com/api/new?name=notion-random-from-inbox&url=https://gist.githubusercontent.com/dealingwith/24ccf1b94413168939eff0369a25bd9f/raw/019aa8bf68265fce8e9119b4a6409c1b5fc2ef7c/notion-random-from-inbox.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\n\r\nlet {data} = await post(\r\n  `https://api.notion.com/v1/databases/${databaseID}/query`,\r\n{\r\n  \"filter\": \r\n  {\r\n    \"property\": \"Status\",\r\n    \"select\": {\r\n      \"is_empty\": true\r\n    }\r\n  },\r\n  page_size: 50\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet tasks = data.results\r\nlet task = tasks[Math.floor(Math.random() * tasks.length)];\r\nlet pageID = task.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\ncopy(pageURL)\r\n\r\nawait focusTab(pageURL, \"Google Chrome Beta\")\r\n```\r\n\r\n~Is there a better way to open the link in a browser? I stole this method from Ian Jones.~","extension":".md","description":"Created by dealingwith","resourcePath":"/johnlindquist/kit/discussions/297","createdAt":"2021-05-30T04:23:32Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzg4NDc4"},{"avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","author":"Kent C. Dodds","twitter":"kentcdodds","title":"Shorten with netlify-shortener","content":"[netlify-shortener](https://github.com/kentcdodds/netlify-shortener)\r\n\r\n[Install shorten](https://scriptkit.com/api/new?name=shorten&url=https://gist.githubusercontent.com/kentcdodds/539bb0543b8d8056e5a8d0dada61e140/raw/7f4b2cf571afddbcfea6bf1dcd18f3227e5fd4b5/shorten.js)\r\n\r\n```js\r\n// Menu: Shorten\r\n// Description: Shorten a given URL with a given short name via netlify-shortener\r\n// Shortcut: command option control s\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nconst dir = await env(\r\n  'SHORTEN_REPO_DIRECTORY',\r\n  'Where is your netlify-shortener repo directory?',\r\n)\r\n\r\nconst longURL = await arg(`What's the full URL?`)\r\n// TODO: figure out how to make this optional\r\nconst shortName = await arg(`What's the short name?`)\r\nconst netlifyShortenerPath = path.join(\r\n  dir,\r\n  'node_modules/netlify-shortener/dist/index.js',\r\n)\r\nconst {baseUrl} = JSON.parse(await readFile(path.join(dir, 'package.json')))\r\n\r\nsetPlaceholder(`Creating redirect: ${baseUrl}/${shortName} -> ${longURL}`)\r\nconst result = exec(\r\n  `node \"${netlifyShortenerPath}\" \"${longURL}\" \"${shortName}\"`,\r\n)\r\n\r\nconst {stderr, stdout} = result\r\n\r\nif (result.code === 0) {\r\n  const lastLine = stdout.split('\\n').filter(Boolean).slice(-1)[0]\r\n  notify({\r\n    title: '✅ Short URL created',\r\n    message: lastLine,\r\n  })\r\n} else {\r\n  const getErr = str => str.match(/Error: (.+)\\n/)?.[1]\r\n  const error = getErr(stderr) ?? getErr(stdout) ?? 'Unknown error'\r\n  console.error({stderr, stdout})\r\n  notify({\r\n    title: '❌ Short URL not created',\r\n    message: error,\r\n  })\r\n}\r\n\r\n```\r\n\r\nIt's a bit of a hack in some places, but it works!","extension":".md","description":"Created by kentcdodds","resourcePath":"/johnlindquist/kit/discussions/295","createdAt":"2021-05-27T02:50:35Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzgzOTg5"},{"avatar":"https://avatars.githubusercontent.com/u/285740?v=4","user":"gm90","author":"Gary McCann","twitter":null,"title":"Kill Notification","content":"Inspired by Tyler Hall, a quick shortcut key to clear a mac notification with the awkward Big Sur UX  with the tiny cross click area.\r\n\r\n```javascript\r\n// Shortcut: command option k\r\n// Menu: Kill Notification\r\n// Description: Kill pesky mac os notification inspired by 240px-invisible-pixels @ https://tyler.io/240-invisible-pixels/\r\n// Author: Gary McCann\r\n\r\nconst robot = await npm (\"robotjs\");\r\nconst screenSize = robot.getScreenSize();\r\nconst xPosition = screenSize.width - 354;\r\nconst yPosition = 47;\r\n\r\nrobot.moveMouse(xPosition, yPosition);\r\n\r\nsetTimeout(() => {  \r\n  robot.mouseClick();\r\n}, 100)","extension":".md","description":"Created by gm90","resourcePath":"/johnlindquist/kit/discussions/288","createdAt":"2021-05-21T20:26:44Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzc2NzQ3"},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"title":"Post to Notion","content":"<img width=\"418\" alt=\"Screen Shot 2021-05-19 at 11 06 46 PM\" src=\"https://user-images.githubusercontent.com/124208/118917657-f8c41e00-b8f6-11eb-9c5d-de7be826ec4c.png\">\r\n\r\nI thought the Notion API might be a fun thing to play with via Script Kit. I have a singular \"tasks\" database that I use to capture all manner of things, so I always want to insert pages into it in order to process them later. These scripts will require you to update the databaseID value in the code itself. I could see an expansion of this script to allow for the selection of a specific Notion database from a list.\r\n\r\nThe second script below takes a second input in order to insert content into the new page -- I was wondering if there is a way to allow multiline text input via Script Kit, which would make that script more robust.\r\n\r\nYou can get a Notion API token [here](https://developers.notion.com/) and find quick-start instructions [here](https://developers.notion.com/docs), as well as the API reference [here](https://developers.notion.com/reference/intro).\r\n\r\nFor a quick overview of the data model, [check out Chris Biscardi's video here](https://www.youtube.com/watch?v=apKz987OLcE&t=1s). For a more in-depth overview, check out [this Notion blog post](https://www.notion.so/blog/data-model-behind-notion).\r\n\r\n[Install notion-add-task](https://scriptkit.com/api/new?name=notion-add-task&url=https://gist.githubusercontent.com/dealingwith/d8e701f2e0e5e64cb820103af96a08d2/raw/b2c11daf28ed7e4b40f2809bda428b527dd78b24/notion-add-task.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\nlet content = await arg('Enter Task')\r\n\r\nlet {data} = await post(\r\n  'https://api.notion.com/v1/pages', {\r\n  \"parent\": { \"database_id\": databaseID },\r\n  \"properties\": {\r\n    \"Name\": {\r\n      \"title\": [\r\n        {\r\n          \"text\": {\r\n            \"content\": content\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n  }\r\n})\r\n\r\nlet pageID = data.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\n\r\ncopy(pageURL)\r\n```\r\n\r\n\r\n[Install notion-add-task-with-content](https://scriptkit.com/api/new?name=notion-add-task-with-content&url=https://gist.githubusercontent.com/dealingwith/99c4da33565dddb115b5c173e1e29f48/raw/0c5b31b56b0fcc39fa3f589f7e2dcd4312f5c53a/notion-add-task-with-content.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\nlet content = await arg('Enter Task')\r\n\r\nlet {data} = await post(\r\n  'https://api.notion.com/v1/pages', {\r\n  \"parent\": { \"database_id\": databaseID },\r\n  \"properties\": {\r\n    \"Name\": {\r\n      \"title\": [\r\n        {\r\n          \"text\": {\r\n            \"content\": content\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet bodyContent = await arg('Enter Content')\r\n\r\nlet {bodyData} = await patch(\r\n  `https://api.notion.com/v1/blocks/${data.id}/children`, {\r\n  \"children\": [\r\n    {\r\n      \"object\": \"block\",\r\n      \"type\": \"paragraph\",\r\n      \"paragraph\": {\r\n        \"text\": [\r\n          {\r\n            \"type\": \"text\",\r\n            \"text\": {\r\n              \"content\": bodyContent\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet pageID = data.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\n\r\ncopy(pageURL)\r\n```\r\n\r\n(I just noticed that I haven't updated the first script to pass the \"Notion-Version\" header, but it seems unnecessary for now.)","extension":".md","description":"Created by dealingwith","resourcePath":"/johnlindquist/kit/discussions/286","createdAt":"2021-05-20T04:14:00Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzczNzkx"},{"avatar":"https://avatars.githubusercontent.com/u/433725?u=7e3bc90109dae2debbf59a2c822f3daca50f6aa7&v=4","user":"iansu","author":"Ian Sutherland","twitter":"iansu","title":"npm search","content":"[Install npm](https://scriptkit.com/api/new?name=npm&url=https://gist.githubusercontent.com/iansu/7f0227f191865e18b5a2b7ff616d6fd9/raw/6e18ce83af9eedc2a3fde3b39f35f682e3d841e4/npm.js)\r\n\r\nThis is a very simple script that I made to search npm and open the results in your browser. I took a quick look and didn't see anything similar here so I figured I would share it, even though the script itself isn't particularly interesting.\r\n\r\n```js\r\n// Menu: npm\r\n// Description: Search npm\r\n// Author: Ian Sutherland\r\n// Twitter: @iansu\r\n\r\nawait arg(\"Search query:\", async () => {\r\n  let query = await arg(\"Search query:\")\r\n\r\n  exec(`open https://www.npmjs.com/search?q=${query}`)\r\n})\r\n```","extension":".md","description":"Created by iansu","resourcePath":"/johnlindquist/kit/discussions/283","createdAt":"2021-05-18T21:53:16Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzcxNzg3"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"✨NEW FEATURES✨ beta.17","content":"New features are separated into the comments below:\r\n\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/282","createdAt":"2021-05-18T20:24:57Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzcxNjg5"},{"avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","author":"Kent C. Dodds","twitter":"kentcdodds","title":"Twimage Download (tweet image)","content":"I made a little script to download images from tweets and set exif data to info derived from the tweet. Especially helpful is the creation date and the GPS data (if the tweet includes location).\r\n\r\nI'm using this to go back to pictures people have taken of me speaking at conferences and adding them to my personal photo library and make sure they appear at the right time in my photo library timeline.\r\n\r\n[Install twimage-download](https://scriptkit.com/api/new?name=twimage-download&url=https://gist.githubusercontent.com/kentcdodds/acfa864608d00af8a37a074cc857c657/raw/82294cd894a5b04800f642b02faaf3f829f550fc/twimage-download.js)\r\n\r\n```js\r\n// Menu: Twimage Download\r\n// Description: Download twitter images and set their exif info based on the tweet metadata\r\n// Shortcut: fn ctrl opt cmd t\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nimport fs from 'fs'\r\nimport {fileURLToPath, URL} from 'url'\r\n\r\nconst exiftool = await npm('node-exiftool')\r\nconst exiftoolBin = await npm('dist-exiftool')\r\nconst fsExtra = await npm('fs-extra')\r\n\r\nconst baseOut = home('Pictures/twimages')\r\n\r\nconst token = await env('TWITTER_BEARER_TOKEN')\r\nconst twitterUrl = await arg('Twitter URL')\r\nconsole.log(`Starting with ${twitterUrl}`)\r\n\r\nconst tweetId = new URL(twitterUrl).pathname.split('/').slice(-1)[0]\r\nconst params = new URLSearchParams()\r\nparams.set('ids', tweetId)\r\nparams.set('user.fields', 'username')\r\nparams.set('tweet.fields', 'author_id,created_at,geo')\r\nparams.set('media.fields', 'url')\r\nparams.set('expansions', 'author_id,attachments.media_keys,geo.place_id')\r\nconst response = await get(\r\n  `https://api.twitter.com/2/tweets?${params.toString()}`,\r\n  {\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  },\r\n)\r\n\r\nconst json = /** @type import('../types/twimage-download').JsonResponse */ (\r\n  response.data\r\n)\r\n\r\nconst ep = new exiftool.ExiftoolProcess(exiftoolBin)\r\n\r\nawait ep.open()\r\n\r\nfor (const tweet of json.data) {\r\n  const {attachments, geo, id, text, created_at} = tweet\r\n  if (!attachments) throw new Error(`No attachements: ${tweet.id}`)\r\n  const author = json.includes.users.find(u => u.id === tweet.author_id)\r\n  if (!author) throw new Error(`wut? No author? ${tweet.id}`)\r\n\r\n  const link = `https://twitter.com/${author.username}/status/${id}`\r\n  const {latitude, longitude} = geo ? await getGeoCoords(geo.place_id) : {}\r\n\r\n  for (const mediaKey of attachments.media_keys) {\r\n    const media = json.includes.media.find(m => mediaKey === m.media_key)\r\n    if (!media) throw new Error(`Huh... no media found...`)\r\n    const formattedDate = formatDate(created_at)\r\n    const colonDate = formattedDate.replace(/-/g, ':')\r\n    const formattedTimestamp = formatTimestamp(created_at)\r\n    const filename = new URL(media.url).pathname.split('/').slice(-1)[0]\r\n    const filepath = path.join(\r\n      baseOut,\r\n      formattedDate.split('-').slice(0, 2).join('-'),\r\n      filename,\r\n    )\r\n\r\n    await download(media.url, filepath)\r\n\r\n    console.log(`Updating exif metadata for ${filepath}`)\r\n    await ep.writeMetadata(\r\n      filepath,\r\n      {\r\n        ImageDescription: `${text} – ${link}`,\r\n        Keywords: 'photos from tweets',\r\n        DateTimeOriginal: formattedTimestamp,\r\n        FileModifyDate: formattedTimestamp,\r\n        ModifyDate: formattedTimestamp,\r\n        CreateDate: formattedTimestamp,\r\n        ...(geo\r\n          ? {\r\n              GPSLatitudeRef: latitude > 0 ? 'North' : 'South',\r\n              GPSLongitudeRef: longitude > 0 ? 'East' : 'West',\r\n              GPSLatitude: latitude,\r\n              GPSLongitude: longitude,\r\n              GPSDateStamp: colonDate,\r\n              GPSDateTime: formattedTimestamp,\r\n            }\r\n          : null),\r\n      },\r\n      ['overwrite_original'],\r\n    )\r\n  }\r\n}\r\n\r\nawait ep.close()\r\nconsole.log(`All done with ${twitterUrl}`)\r\n\r\nfunction formatDate(t) {\r\n  const d = new Date(t)\r\n  return `${d.getFullYear()}-${padZero(d.getMonth() + 1)}-${padZero(\r\n    d.getDate(),\r\n  )}`\r\n}\r\nfunction formatTimestamp(t) {\r\n  const d = new Date(t)\r\n  const formattedDate = formatDate(t)\r\n  return `${formatDate(t)} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\r\n}\r\nfunction padZero(n) {\r\n  return String(n).padStart(2, '0')\r\n}\r\n\r\nasync function getGeoCoords(placeId) {\r\n  const response = await get(\r\n    `https://api.twitter.com/1.1/geo/id/${placeId}.json`,\r\n    {\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n      },\r\n    },\r\n  )\r\n  const [longitude, latitude] = response.data.centroid\r\n  return {latitude, longitude}\r\n}\r\n\r\nasync function download(url, out) {\r\n  console.log(`downloading ${url} to ${out}`)\r\n  await fsExtra.ensureDir(path.dirname(out))\r\n\r\n  const writer = fs.createWriteStream(out)\r\n  const response = await get(url, {responseType: 'stream'})\r\n  response.data.pipe(writer)\r\n\r\n  return new Promise((resolve, reject) => {\r\n    writer.on('finish', () => resolve(out))\r\n    writer.on('error', reject)\r\n  })\r\n}\r\n```\r\n","extension":".md","description":"Created by kentcdodds","resourcePath":"/johnlindquist/kit/discussions/269","createdAt":"2021-05-17T05:21:38Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzY4NjQ4"},{"avatar":"https://avatars.githubusercontent.com/u/39992?u=1ee38610bb2d8a082b3e84db7ecacf78149d061b&v=4","user":"gr2m","author":"Gregor Martynus","twitter":"gr2m","title":"Create Gist from Clipboard","content":"<kbd><a href=\"https://scriptkit.com/api/new?name=create-gist-from-clipboard&url=https://gist.githubusercontent.com/gr2m/f5d7ee961664ee1e2561ca29311026c6/raw/dbecf63ff2a68dcc4778a2d4d26a42af2b3998bf/create-gist-from-clipboard.js\">Install create-gist-from-clipboard</a></kbd>\r\n\r\n```js\r\n// Menu: Create gist from clipboard\r\n// Description: Creates a new GitHub Gist with the contents of your current clipboard\r\n// Author: Gregor Martynus\r\n// Twitter: @gr2m\r\n\r\n// https://github.com/gr2m/scriptkit-octokit/\r\nconst { Octokit } = await npm(\"scriptkit-octokit\");\r\nconst octokit = new Octokit({\r\n  auth: {\r\n    scopes: [\"gist\"],\r\n  },\r\n});\r\n\r\n// copy the content from the current clipboard\r\nconst content = await paste();\r\n\r\nif (!content) {\r\n  console.log(\"clipboard is empty\");\r\n  exit();\r\n}\r\n\r\nconst { data } = await octokit.rest.gists.create({\r\n  description: \"Created using https://github.com/johnlindquist/kit/discussions/266\",\r\n  public: false,\r\n  files: {\r\n    \"clipboard.txt\": { content },\r\n  },\r\n});\r\n\r\nawait copy(data.html_url);\r\nconsole.log(\"Gist created at %s\", data.html_url);\r\n```\r\n\r\nI highly recommend setting a shortcut, e.g. add to the top:\r\n\r\n```js\r\n// Shortcut: command option g\r\n```","extension":".md","description":"Created by gr2m","resourcePath":"/johnlindquist/kit/discussions/266","createdAt":"2021-05-14T00:19:42Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzY0OTA0"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"Word Game 🎯","content":"\r\n[Install word-game](https://scriptkit.com/api/new?name=word-game&url=https://gist.githubusercontent.com/johnlindquist/0388865384e7a761e92c0bfa5b176a9a/raw/9c7214c1533f43fd09ac418d8cfc4c574f8e655a/word-game.js)\r\n\r\n```js\r\n// Menu: Word Game\r\n// Description: Guess letters to win!\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet playAgain = true\r\n\r\nwhile (playAgain) {\r\n  let {\r\n    data: [word],\r\n  } = await get(\r\n    `https://random-word-api.herokuapp.com/word`\r\n  )\r\n\r\n  let correct = false\r\n  let guesses = []\r\n\r\n  while (!correct) {\r\n    let [...letters] = await arg(\r\n      { placeholder: \"Guess a letter/s:\", hint: word }, //remove hint to make it more challenging 😉\r\n      word\r\n        .split(\"\")\r\n        .map(char => (guesses.includes(char) ? char : \"*\"))\r\n        .join(\"\")\r\n    )\r\n    guesses = guesses.concat(...letters)\r\n\r\n    correct = word\r\n      .split(\"\")\r\n      .every(char => guesses.includes(char))\r\n  }\r\n\r\n  playAgain = await arg(`🏆 \"${word}\"! Play Again?`, [\r\n    { name: \"Yes\", value: true },\r\n    { name: \"No\", value: false },\r\n  ])\r\n}\r\n```\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/253","createdAt":"2021-05-07T22:01:23Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzU2MjY0"},{"avatar":"https://avatars.githubusercontent.com/u/1518780?u=af82f867331be805d51330c3f8e1f7ab8169837b&v=4","user":"mandiwise","author":"Mandi Wise","twitter":null,"title":"Open a GitHub repo (including org and private repos, as well as pagination)","content":"This script allows you to authenticate with a GitHub personal access token and open repos from your user account or any organizations you belong to. It also displays private repos and handles pagination if the repo count exceeds 100 (just scroll to the bottom of the list and you'll see a \"Load more...\" option, when applicable).\r\n\r\n![Opening an org repo](https://user-images.githubusercontent.com/1518780/117495102-70c33900-af32-11eb-9e04-be54ca374032.gif)\r\n\r\n```js\r\n// Menu: Open a GitHub Repo\r\n// Description: Launch a GitHub repo in your browser\r\n// Author: Mandi Wise\r\n// Twitter: @mandiwise\r\n\r\n// Learn how to create a personal access token for GitHub here:\r\n// https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\r\n\r\nlet { Octokit } = await npm(\"octokit\");\r\n\r\nconst GH_PERSONAL_ACCESS_TOKEN = await env(\"GH_PERSONAL_ACCESS_TOKEN\");\r\nconst octokit = new Octokit({ auth: GH_PERSONAL_ACCESS_TOKEN });\r\n\r\nconst ORGS_PER_PAGE = 20;\r\nconst REPOS_PER_PAGE = 100;\r\n\r\n// GraphQL operations\r\n\r\nconst GetAccounts = `query GetAccounts($first: Int) { \r\n  viewer { \r\n    organizations(first: $first) {\r\n      edges {\r\n        node {\r\n          login\r\n          name\r\n          url\r\n        }\r\n      }\r\n    }\r\n    login\r\n    name\r\n    url\r\n  }\r\n}`;\r\n\r\nconst ReposPage = `fragment ReposPage on RepositoryConnection {\r\n  edges {\r\n    node {\r\n      name\r\n      description\r\n      url\r\n    }\r\n  }\r\n  pageInfo {\r\n    endCursor\r\n    hasNextPage\r\n  }\r\n}`;\r\n\r\nconst GetOrgRepos = `query GetOrgRepos($first: Int, $after: String, $login: String!) {\r\n  viewer { \r\n    organization(login: $login) {\r\n      repositories(\r\n        first: $first\r\n        after: $after\r\n        orderBy: { field: UPDATED_AT, direction: DESC }\r\n      ) {\r\n        ...ReposPage\r\n      }\r\n    }\r\n  }\r\n}\r\n${ReposPage}\r\n`;\r\n\r\nconst GetUserRepos = `query GetUserRepos($first: Int, $after: String) {\r\n  viewer { \r\n    repositories(\r\n      first: $first\r\n      after: $after\r\n      orderBy: {field: UPDATED_AT, direction: DESC}\r\n      affiliations: OWNER\r\n    ) {\r\n      ...ReposPage\r\n    }\r\n  }\r\n}\r\n${ReposPage}\r\n`;\r\n\r\n// Get user and their organizations in a list\r\n\r\nlet dots = 0;\r\nconst accountsPlaceholderIntervalId = setInterval(() => {\r\n  setPlaceholder(`Loading GitHub accounts`.padEnd(++dots, \".\"));\r\n}, 100);\r\n\r\nconst { viewer } = await octokit.graphql(GetAccounts, { first: ORGS_PER_PAGE });\r\n\r\nif (!viewer) {\r\n  exit(1);\r\n}\r\n\r\nconst { login, name, url, organizations } = viewer;\r\nconst accounts = [\r\n  { name, value: login, description: url, type: \"user\" },\r\n  ...organizations.edges.map(({ node: { login, name, url } }) => ({\r\n    name,\r\n    value: login,\r\n    description: url,\r\n    type: \"org\"\r\n  }))\r\n].sort((a, b) => (a.name > b.name ? 1 : -1));\r\n\r\nclearInterval(accountsPlaceholderIntervalId);\r\ndots = 0;\r\n\r\nconst accountChoice = await arg(\"Which account?\", accounts);\r\nconst { type: accountType } = accounts.find(\r\n  account => accountChoice === account.value\r\n);\r\n\r\n// Get repo list for the user or organization\r\n\r\nlet repositoriesAndLoadMore = [];\r\n\r\nasync function fetchRepositories(variables) {\r\n  const reposPlaceholderIntervalId = setInterval(() => {\r\n    setPlaceholder(`Loading repositories`.padEnd(++dots, \".\"));\r\n  }, 100);\r\n\r\n  let edges, endCursor, hasNextPage;\r\n  const oldLoadMore = repositoriesAndLoadMore.find(({ value }) =>\r\n    value.startsWith(\"load-more-after-\")\r\n  );\r\n\r\n  if (oldLoadMore) {\r\n    repositoriesAndLoadMore.pop();\r\n  }\r\n\r\n  if (accountType === \"org\") {\r\n    ({\r\n      viewer: {\r\n        organization: {\r\n          repositories: {\r\n            edges,\r\n            pageInfo: { endCursor, hasNextPage }\r\n          }\r\n        }\r\n      }\r\n    } = await octokit.graphql(GetOrgRepos, {\r\n      login: accountChoice,\r\n      ...variables\r\n    }));\r\n  } else {\r\n    ({\r\n      viewer: {\r\n        repositories: {\r\n          edges,\r\n          pageInfo: { endCursor, hasNextPage }\r\n        }\r\n      }\r\n    } = await octokit.graphql(GetUserRepos, variables));\r\n  }\r\n\r\n  repositoriesAndLoadMore = [\r\n    ...repositoriesAndLoadMore,\r\n    ...edges.map(({ node: { description, name, url } }) => ({\r\n      name,\r\n      description,\r\n      value: url\r\n    }))\r\n  ];\r\n\r\n  if (hasNextPage) {\r\n    repositoriesAndLoadMore.push({\r\n      name: \"Load more...\",\r\n      value: `load-more-after-${endCursor}`\r\n    });\r\n  }\r\n\r\n  clearInterval(reposPlaceholderIntervalId);\r\n  dots = 0;\r\n\r\n  if (!repositoriesAndLoadMore.length) {\r\n    exit(1);\r\n  }\r\n\r\n  let repoChoice = await arg(\"Which project?\", repositoriesAndLoadMore);\r\n\r\n  if (repoChoice.startsWith(\"load-more-after-\")) {\r\n    await fetchRepositories({\r\n      first: REPOS_PER_PAGE,\r\n      after: repoChoice.split(\"-\").pop()\r\n    });\r\n  } else {\r\n    exec(`open ${repoChoice}`);\r\n  }\r\n}\r\n\r\nawait fetchRepositories({ first: REPOS_PER_PAGE });\r\n```","extension":".md","description":"Created by mandiwise","resourcePath":"/johnlindquist/kit/discussions/252","createdAt":"2021-05-07T18:51:28Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzU2MTAw"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"title":"Snippets","content":"Small snippets manager with builtin support for variables.\r\nVariables are defined as an array of function so they can be anything, arg, getSelectedText etc.\r\nSnippet can also be a simple string if it has no variables\r\n\r\n[Install Snippets](https://scriptkit.com/api/new?name=snippets&url=https://gist.githubusercontent.com/hakubo/3ce0072320188e189025548bdb460b5e/raw/d3aff955e0442c8ed20d1ca7a3c03ac9f945eae2/snippets.js)\r\n\r\n```js\r\n// Menu: Snippets\r\n// Description: Snippets collection\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n// Shortcut: opt -\r\n\r\nconst { setSelectedText } = await kit(\"text\");\r\n\r\nfunction capitalizeFirstLetter(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nconst snippetMap = {\r\n  useState: {\r\n    args: [() => arg(\"variable name\"), () => arg(\"variable value\")],\r\n    template: (name, value) =>\r\n      `const [${name}, set${capitalizeFirstLetter(name)}] = useState(${value})`,\r\n  },\r\n  name: \"Jakub Olek\",\r\n  date: new Date().toLocaleDateString(\"en-GB\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  }),\r\n  test: {\r\n    args: [() => arg(\"should\")],\r\n    template: (testName) => `test(\"should ${testName}\", function() {\r\n\r\n  })`,\r\n  },\r\n  component: {\r\n    args: [() => arg(\"component name\")],\r\n    template: (componentName) => `function ${capitalizeFirstLetter(\r\n      componentName\r\n    )}() {\r\n      return\r\n    }`,\r\n  },\r\n};\r\n\r\nconst snippetName = await arg(\"Snippet\", Object.keys(snippetMap));\r\n\r\nlet result = snippetMap[snippetName];\r\nconst { args, template } = result;\r\n\r\nif (template) {\r\n  const variables = [];\r\n\r\n  if (args) {\r\n    for (let i = 0; i < args.length; i++) {\r\n      const variable = args[i];\r\n\r\n      if (typeof variable !== \"string\") {\r\n        variables.push(await variable());\r\n      }\r\n    }\r\n  }\r\n\r\n  setSelectedText(template(...variables));\r\n} else {\r\n  setSelectedText(result);\r\n}\r\n\r\n```","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/249","createdAt":"2021-05-07T08:35:22Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzU1MTQz"},{"avatar":"https://avatars.githubusercontent.com/u/39992?u=1ee38610bb2d8a082b3e84db7ecacf78149d061b&v=4","user":"gr2m","author":"Gregor Martynus","twitter":"gr2m","title":"Set GitHub profile status","content":"[Install set-github-status](https://scriptkit.com/api/new?name=set-github-status&url=https://gist.githubusercontent.com/gr2m/b336c3c76de58a7b65299b9e224564c5/raw/187c618b70b943b117e452bd63799a2be7785b95/set-github-status.js)\r\n\r\n```js\r\n//Shortcut: command shift -\r\n// Menu: Set GitHub Status\r\n// Description: Sets the status text on your GitHub Profile\r\n\r\nconst message = await arg(\"What would you like to say?\");\r\nconst token = await env(\"GITHUB_STATUS_TOKEN\", {\r\n  secret: true,\r\n  ignoreBlur: true,\r\n  hint: md(\r\n    `Create a token [on GitHub](https://github.com/settings/tokens/new?scopes=user&description=kit%20script)`\r\n  ),\r\n});\r\n\r\nconst response = await post(\r\n  \"https://api.github.com/graphql\",\r\n  {\r\n    query: `mutation ($text:String) {\r\n      changeUserStatus(input:{message:$text}) {\r\n        status {\r\n          message\r\n        }\r\n      }\r\n    }`,\r\n    variables: {\r\n      text: message,\r\n    },\r\n  },\r\n  {\r\n    headers: {\r\n      authorization: `token ${token}`,\r\n    },\r\n  }\r\n);\r\n\r\n```\r\n","extension":".md","description":"Created by gr2m","resourcePath":"/johnlindquist/kit/discussions/246","createdAt":"2021-05-06T20:31:36Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzU0NTA1"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"✨ NEW ✨ // Background: true","content":"`beta.12` brings in the ability to start/stop background tasks.\r\n\r\n\r\nUsing `// Background :true` at the top of your script will change the behavior in the main menu:\r\n```js\r\n// Background: true\r\n\r\nsetInterval(() => {}, 1000) //Some long-running process\r\n```\r\n\r\n<img width=\"702\" alt=\"Screen Shot 2021-05-06 at 1 30 53 PM\" src=\"https://user-images.githubusercontent.com/36073/117355039-4b212b80-ae6f-11eb-952e-4ee28c65ded4.png\">\r\n\r\n<img width=\"681\" alt=\"Screen Shot 2021-05-06 at 1 31 13 PM\" src=\"https://user-images.githubusercontent.com/36073/117355094-5b390b00-ae6f-11eb-817a-86be66cabe18.png\">\r\n\r\n\r\n<img width=\"679\" alt=\"Screen Shot 2021-05-06 at 1 33 02 PM\" src=\"https://user-images.githubusercontent.com/36073/117355276-9a675c00-ae6f-11eb-82b4-fa069e53b143.png\">\r\n\r\n\r\n## Auto (like nodemon)\r\n```js\r\n// Background: auto\r\n\r\nsetInterval(() => {}, 1000) //Some long-running process\r\n```\r\n\r\nUsing `auto`, after you start the script, editing will stop/restart the script.\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/245","createdAt":"2021-05-06T19:36:22Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzU0NDQ0"},{"avatar":"https://avatars.githubusercontent.com/u/5779832?u=42c63031fea8d5774f5011caf5b92ac5e61c346b&v=4","user":"zzeleznick","author":"Z Zeleznick","twitter":null,"title":"Low-Fi Finder Image Grid View 🖼️","content":"## Low-Fi Finder Image Grid View 🖼️\r\n\r\nWhile list views are nice, sometimes you just want a grid 😄. Here, I played around with displaying images in a grid layout.\r\n\r\nI'd even say that grids feel like a natural extension to the layouts in #231 🤓 \r\n\r\nI started this project a little while back, and am currently using the html panel as opposed to `choice.html`. To support custom actions on selection (e.g. copy image filepath to clipboard on choice selection) within a grid context, I think that there is at least one missing piece.\r\n\r\n> Enable setting `className` / styles of choice button parent container\r\n\r\nIn my example, I'm doing a self-described css injection to add new styles (e.g. `.grid-cols-3 {grid-template-columns: repeat(3, minmax(0, 1fr))}`), but the styles probably could be done in-line.\r\n\r\n## Demo\r\n\r\n![image_grid](https://user-images.githubusercontent.com/5779832/116947457-acf45200-ac31-11eb-8982-f1445d1aaf52.gif)\r\n\r\n## Code\r\n\r\n<details>\r\n<summary>\r\n<code>lib/image-grid.js</code>\r\n</summary>\r\n\r\n```js\r\n// lib/image-grid.js\r\n\r\nconst DEFAULT_LIMIT = 10000; // 1000; // 100;\r\nconst DEBUG = { ENABLED: false };\r\n\r\nconst debug = (...args) => DEBUG.ENABLED && console.log(...args)\r\nconst info = (...args) => console.log(...args)\r\n\r\nexport const enableDebugMode = () => { DEBUG.ENABLED = true }\r\n\r\nconst getImages = (filepath, maxdepth) => {\r\n  // NOTE: options to use \"-ctime -90d\" / \"-atime -90d\" to filter more results\r\n  const findCommand = `find -E ${filepath} -iregex '.*\\.(jpg|jpeg|png|gif)' -maxdepth ${maxdepth}`\r\n  const findSortedCommand = `${findCommand} -print0 | xargs -0 ls -at`\r\n  debug(\"findSortedCommand\", findSortedCommand)\r\n  return exec(findSortedCommand, { silent: true }).toString().split(\"\\n\").filter(v => v)\r\n}\r\n\r\nconst buildImageModal = (payload) => {\r\n  let {file} = payload;\r\n  const img = `<img src=\"${file}\">`\r\n  return `<div class=\"imgContainer\">${img}</div>`\r\n}\r\n\r\nconst injectCss = (html) => {\r\n  // our tailwind build doesn't include grid css\r\n  // we add some custom styles as well\r\n  const css = `\r\n    /* Mimic tailwind grid css */\r\n    .grid {display:grid}\r\n    .grid-cols-3 {grid-template-columns: repeat(3, minmax(0, 1fr))}\r\n    .grid-cols-4 {grid-template-columns: repeat(4, minmax(0, 1fr))}\r\n    .grid-cols-5 {grid-template-columns: repeat(5, minmax(0, 1fr))}\r\n    /* custom css to center images in grid */\r\n    .grid div {place-items: center; padding: clamp(1px, 4%, 25px);}\r\n    .imgContainer {display: flex;}\r\n  `\r\n  const style = `<style type=\"text/css\">${css}</style>`\r\n  return `${style}${html}`\r\n}\r\n\r\n\r\nconst buildPage = (imageObjects, limit = DEFAULT_LIMIT) => {\r\n  const subset = imageObjects\r\n      .slice(0, limit)\r\n      .map(file => { return { file } })\r\n\r\n  const columns = subset.length > 32 ? (subset.length > 64 ? 5 : 4) : 3\r\n  const modals = subset.map(buildImageModal).join('\\n')\r\n\r\n  const html = `<div class=\"grid grid-cols-${columns} pt-1 m-1\">${modals}</div>`\r\n  const page = injectCss(html)\r\n  debug(page);\r\n  info('buildPage: Done')\r\n  return page\r\n}\r\n\r\nexport const buildImagesPanel = async (filepath, maxdepth, limit) => {\r\n  const images = getImages(filepath, maxdepth);\r\n  info(`Found ${images.length} images`);\r\n  await arg({\r\n    input: \" \",\r\n  }, buildPage(images, limit));\r\n}\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\n<code>view-desktop.js</code>\r\n</summary>\r\n\r\n```js\r\n// Menu: View Desktop\r\n// Description: View Desktop Attachments\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n// Shortcut: cmd shift d\r\n\r\nconst {buildImagesPanel} = await lib(\"image-grid\")\r\n\r\nconst filepath = \"~/Desktop\"\r\nconst depth = \"3\"\r\n\r\nawait buildImagesPanel(filepath, depth)\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\n<code>view-attachments.js</code>\r\n</summary>\r\n\r\n```js\r\n// Menu: View Attachment\r\n// Description: View iMessage Attachments\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n// Shortcut: cmd shift l\r\n\r\nconst {buildImagesPanel} = await lib(\"image-grid\")\r\n\r\n// NOTE: Need to grant Kit app full disk access in Security and Privacy or find will return 0 results \r\nconst filepath = \"~/Library/Messages/Attachments\"\r\nconst depth = \"4\"\r\n\r\nawait buildImagesPanel(filepath, depth)\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\n<code>view-downloads.js</code>\r\n</summary>\r\n\r\n```js\r\n// Menu: View Download\r\n// Description: View Download Attachments\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n// Shortcut: cmd shift 0\r\n\r\nconst {buildImagesPanel, enableDebugMode} = await lib(\"image-grid\")\r\n\r\nconst filepath = \"~/Downloads\"\r\nconst depth = \"2\"\r\nconst limit = 42\r\n\r\nenableDebugMode()\r\n\r\nawait buildImagesPanel(filepath, depth, limit)\r\n```\r\n</details>\r\n\r\n\r\n### Reference\r\n\r\nHere are a few screenshots of the native Finder window on macOS 10.14 that I intended to recreate in low-fidelity.\r\n<table>\r\n<tr>\r\n<td><img width=\"863\" alt=\"Native View\" src=\"https://user-images.githubusercontent.com/5779832/116947788-7a972480-ac32-11eb-9e22-10dfb1fa3dff.png\"></td>\r\n<td><img width=\"490\" alt=\"Sorting Options\" src=\"https://user-images.githubusercontent.com/5779832/116947778-779c3400-ac32-11eb-9378-4bb8c97012d6.png\"></td>\r\n</tr>\r\n<tr>\r\n<td>Example search for `png` files on my Desktop</td>\r\n<td>Sorting options</td>\r\n</tr>\r\n</table>\r\n\r\n\r\n\r\n\r\n","extension":".md","description":"Created by zzeleznick","resourcePath":"/johnlindquist/kit/discussions/237","createdAt":"2021-05-04T00:50:22Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQ5NDIy"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"// Watch: metadata 👀","content":"Script Kit now supports `// Watch:` metadata\r\n\r\n```js\r\n// Watch: ~/projects/thoughts/**/*.md\r\n\r\nlet { say } = await kit(\"speech\")\r\n\r\nsay(\"journal updated\")\r\n```\r\n\r\n* `// Watch: ` supports any file name, glob, or array (Kit will `JSON.parse` the array).\r\n* Scripts will run on the \"change\" event\r\n* Read more about supported [globbing](https://github.com/micromatch/picomatch#globbing-features)\r\n\r\n> Read about the [other metadata](https://github.com/johnlindquist/kit/discussions/185)\r\n\r\nI would _LOVE_ to hear about scenarios you would use this for or if you run into any issues 🙏","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/213","createdAt":"2021-04-29T14:31:31Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzQzODM2"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"beta.96 - Design, Drop, and Hotkeys! Oh my!","content":"\r\nhttps://user-images.githubusercontent.com/36073/115079813-fc5f2200-9ebe-11eb-8e7c-74c8a1d2aee3.mp4\r\n\r\nCan't wait to see what you build! Happy Scripting this weekend! 😇","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/150","createdAt":"2021-04-16T20:32:44Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzI1MDcy"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"*New* Choice Preview","content":"\r\nhttps://user-images.githubusercontent.com/36073/114220248-fc907800-9928-11eb-8096-61a5debbdc0d.mp4\r\n\r\n\r\n[Install google-image-search](https://scriptkit.app/api/new?name=google-image-search&url=https://gist.githubusercontent.com/johnlindquist/99756d4e1a54c737dc534c4edb5f6c9d/raw/55c440503a8a653c3ef3dafb9ba1bd567fc0b14a/google-image-search.js)\r\n\r\n```js\r\n// Menu: Google Image Search\r\n// Description: Searches Google Images\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet gis = await npm(\"g-i-s\")\r\n\r\nlet selectedImageUrl = await arg(\r\n  \"Image search:\",\r\n  async input => {\r\n    if (input.length < 3) return []\r\n\r\n    let searchResults = await new Promise(res => {\r\n      gis(input, (_, results) => {\r\n        res(results)\r\n      })\r\n    })\r\n\r\n    return searchResults.map(({ url }) => {\r\n      return {\r\n        name: url.split(\"/\").pop().replace(/\\?.*/g, \"\"),\r\n        value: url,\r\n        preview: `<img src=\"${url}\" />`,\r\n      }\r\n    })\r\n  }\r\n)\r\n\r\ncopy(selectedImageUrl)\r\n\r\n```\r\n\r\n\r\n\r\n[Install giphy-search](https://scriptkit.app/api/new?name=giphy-search&url=https://gist.githubusercontent.com/johnlindquist/dc17a3f07fb41b855e742a0f995cb0ed/raw/109831f9d40a8293b7d8741b44081fddcb024cda/giphy-search.js)\r\n\r\n```js\r\n// Menu: Giphy\r\n// Description: Search giphy. Paste markdown link.\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\nlet download = await npm(\"image-downloader\")\r\nlet queryString = await npm(\"query-string\")\r\nlet { setSelectedText } = await kit(\"text\")\r\n\r\nif (!env.GIPHY_API_KEY) {\r\n  show(\r\n    `<div class=\"p-4\">\r\n      <div>\r\n        Grab an API Key from the Giphy dev dashboard:\r\n      </div>\r\n      <a href=\"https://developers.giphy.com/dashboard/\">Here</a>\r\n    </div>`\r\n  )\r\n}\r\nlet GIPHY_API_KEY = await env(\"GIPHY_API_KEY\")\r\n\r\nlet search = q =>\r\n  `https://api.giphy.com/v1/gifs/search?api_key=${GIPHY_API_KEY}&q=${q}&limit=10&offset=0&rating=g&lang=en`\r\n\r\nlet { input, url } = await arg(\r\n  \"Search giphy:\",\r\n  async input => {\r\n    if (!input) return []\r\n    let query = search(input)\r\n    let { data } = await get(query)\r\n\r\n    return data.data.map(gif => {\r\n      return {\r\n        name: gif.title.trim() || gif.slug,\r\n        value: {\r\n          input,\r\n          url: gif.images.downsized_medium.url,\r\n        },\r\n        preview: `<img src=\"${gif.images.downsized_medium.url}\" alt=\"\">`,\r\n      }\r\n    })\r\n  }\r\n)\r\n\r\nlet formattedLink = await arg(\"Format to paste\", [\r\n  {\r\n    name: \"URL Only\",\r\n    value: url,\r\n  },\r\n  {\r\n    name: \"Markdown Image Link\",\r\n    value: `![${input}](${url})`,\r\n  },\r\n  {\r\n    name: \"HTML <img>\",\r\n    value: `<img src=\"${url}\" alt=\"${input}\">`,\r\n  },\r\n])\r\n\r\nsetSelectedText(formattedLink)\r\n\r\n```\r\n","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/119","createdAt":"2021-04-09T21:43:36Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzE0MTM5"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"title":"Types are here!","content":"Update (1.1.0-beta.86) adds a [`~/.kit/kit.d.ts`](https://github.com/johnlindquist/kit/blob/main/kit.d.ts) to allow better code hinting and completion.\r\n\r\n❗️After updating, you will need to manually \"link\" your `~/.kenv` to your `~/.kit` for the benefits (This will happen automatically for new users during install)\r\n\r\nMethod 1 - Install and run this script\r\n\r\n[Click to install link-kit](https://scriptkit.app/api/new?name=link-kit&url=https://gist.githubusercontent.com/johnlindquist/f238cb1b3a3ed97890657ccf154d12b1/raw/a488a8b6c331d527bb0433a6b8df9428263b85a0/link-kit.js)\r\n\r\n```js\r\nawait cli(\"install\", \"~/.kit\")\r\n```\r\n\r\nMethod  2 - In your terminal\r\n```bash\r\nPATH=~/.kit/node/bin ~/.kit/node/bin/npm --prefix ~/.kenv i ~/.kit\r\n```\r\n\r\nNow your scripts in your `~/.kenv/scripts` should have completion/hinting for globals included in the \"preloaded\" scripts.\r\n\r\n> I still need to add types for the helpers that load scripts from dirs `kit()`, `cli()`, etc.\r\n\r\nPlease let me know how it goes and if you have any questions. Thanks!","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/112","createdAt":"2021-04-03T18:08:24Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzA1MzEx"}]
