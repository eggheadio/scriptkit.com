[{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/787","url":"https://github.com/johnlindquist/kit/discussions/787","title":"June 2022 Release (version 1.19.3) - Menu, Native Keyboard, ignoreBlur","name":"June 2022 Release (version 1.19.3) - Menu, Native Keyboard, ignoreBlur","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/787","createdAt":"2022-06-21T16:44:14Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4AP4Se","body":"# Script Kit 1.19.3 Released 🎉\r\n\r\nDownload here: https://www.scriptkit.com/\r\nDirect downloads:\r\n* Intel: https://github.com/johnlindquist/kitapp/releases/download/v1.19.3/Kit-1.19.3.dmg\r\n* m1: https://github.com/johnlindquist/kitapp/releases/download/v1.19.3/Kit-1.19.3-arm64.dmg\r\n\r\n## Features\r\n\r\n* Moved all notifications to menu colored “dots” (red, orange, green)\r\n    * In the future, the user will be able to set these notifications as well\r\n* Completely re-vamped menu for common options\r\n* Implemented an “auth helpers” when user does actions that require “accessibility permissions” (Snippets, clipboard history, setSelectedText, etc)\r\n* `ignoreBlur` allows window to go behind other windows and stay open\r\n* `node` is now stored in `~/.knode` (instead of ~/.kit/node) to allow npx to work in the terminal\r\n* `node` version set to v16.14.2. Version is now synced with Kit.app which resolves conflicts with native packages in scripts\r\n* Keyboard actions (copy/paste/type) have moved from applescript to native code. Snippets, setSelectedText, etc should now feel as “instant” as possible.\r\n* You can now `await hide()` for when you need to make sure the prompt is hidden before continuing the script. This was necessary since the new keyboard actions were so fast.\r\n* Moved the script sharing auth flow to a widget\r\n* Internal: Can now set the state of Kit.app from a script to help with debugging\r\n\r\n\r\n## Fixes\r\n\r\n* App launcher failed to parse malformed App plist icons\r\n* Editor whitespace collapsing on HiDPI screens\r\n* Touchbar key while prompt open would cause crash\r\n* Bin files sometimes didn’t regenerate properly when re-launching the app\r\n* Updater issues\r\n* Background UI not updating when user manually terminates process\r\n* Performance: Moved the file watcher to a spawned process that sends events to the App\r\n\r\n## More to come...\r\n\r\nFinally moved into the new house and settled in. Personal life was too hectic to stream much or do release notes on past couple releases. Expect more streaming, sharing scripts, promotion, and news from me. Cheers! 🥂\r\n\r\n_Here's a preview of the new menu and an example of a dot notification_\r\n\r\n\r\n![The new dot notifications and re-vamped menu](https://cdn.discordapp.com/attachments/963905444823318578/988844882665803926/unknown.png)\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/787","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/6997529?u=3d91e8ea523b78a844f1f3974975b34684e4bc05&v=4","user":"avj2352","author":"PRAMOD A JINGADE","twitter":"avj2352","discussion":"https://github.com/johnlindquist/kit/discussions/780","url":"https://github.com/johnlindquist/kit/discussions/780","title":"Generate PWA assets and splash screens from Logo image","name":"Generate PWA assets and splash screens from Logo image","extension":".md","description":"Created by avj2352","resourcePath":"/johnlindquist/kit/discussions/780","createdAt":"2022-06-13T08:52:50Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4APywE","body":"Handy script to generate all mobile assets and favicon related to Progressive Web Applications based on a logo image\r\n\r\n> NOTE: works best if the logo is square shaped. \r\n\r\n```typescript\r\n// Shortcut: command option p\r\n// Menu: P.I.G \r\n// version: 1.0.0\r\n// Description: 🌆 Generate favicons, assets and splash screens for Progressive Web Apps\r\n// Author: Pramod Jingade\r\n// Twitter: @avj2352\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst Jimp = await npm(\"jimp\");\r\n\r\n// allowed file extensions\r\nconst allowImageExtensions: string[] = [\".png\", \".jpg\"];\r\n\r\n// Read source icon\r\nlet imagePath: string = await getSelectedFile();\r\nif (!imagePath || imagePath === \"\")\r\n  imagePath = await selectFile(`Choose icon to generate PWA assets:`);\r\n\r\n// Check if extension is .PNG or .JPG\r\nlet extension: string = path.extname(imagePath);\r\n\r\n// guard check - extension\r\nwhile (!allowImageExtensions.includes(extension)) {\r\n  let fileName: string = path.basename(imagePath);\r\n  imagePath = await selectFile(`${fileName} wasn't an image:`);\r\n  if (!imagePath) {\r\n    exit();\r\n  }\r\n  // get file extension\r\n  extension = path.extname(imagePath);\r\n}\r\n\r\n// Create image list - android\r\nconst createAndroidImageList: Promise<string>[] = [\r\n  createImage(imagePath, 16, \"android\"),\r\n  createImage(imagePath, 32, \"android\"),\r\n  createImage(imagePath, 72, \"android\"),\r\n  createImage(imagePath, 96, \"android\"),\r\n  createImage(imagePath, 128, \"android\"),\r\n  createImage(imagePath, 144, \"android\"),\r\n  createImage(imagePath, 152, \"android\"),\r\n  createImage(imagePath, 192, \"android\"),\r\n  createImage(imagePath, 384, \"android\"),\r\n  createImage(imagePath, 512, \"android\"),\r\n];\r\n\r\n// Create image list - windows\r\nconst creaeMicrosoftImageList: Promise<string>[] = [\r\n  createImage(imagePath, 70, \"ms-icon\"),\r\n  createImage(imagePath, 150, \"ms-icon\"),\r\n  createImage(imagePath, 310, \"ms-icon\"),\r\n];\r\n\r\n// Create image list - iOS\r\nconst createiOSImageList: Promise<string>[] = [\r\n  createImage(imagePath, 120, \"ios\"),\r\n  createImage(imagePath, 152, \"ios\"),\r\n  createImage(imagePath, 167, \"ios\"),\r\n  createImage(imagePath, 180, \"ios\"),\r\n  createImage(imagePath, 192, \"ios\"),\r\n  createImage(imagePath, 512, \"ios\"),\r\n];\r\n\r\n// Create splash screens\r\nconst createSplashScreenList: Promise<string>[] = [\r\n  createSplashScreenWithLogo(imagePath, 1536, 2048),\r\n  createSplashScreenWithLogo(imagePath, 2436, 1125),\r\n  createSplashScreenWithLogo(imagePath, 1620, 2160),\r\n  createSplashScreenWithLogo(imagePath, 2532, 1170),\r\n  createSplashScreenWithLogo(imagePath, 1668, 2224),\r\n  createSplashScreenWithLogo(imagePath, 1668, 2388),\r\n  createSplashScreenWithLogo(imagePath, 2688, 1242),\r\n  createSplashScreenWithLogo(imagePath, 2732, 2048),\r\n  createSplashScreenWithLogo(imagePath, 1125, 2436),\r\n  createSplashScreenWithLogo(imagePath, 1792, 828),\r\n  createSplashScreenWithLogo(imagePath, 2778, 1284),\r\n  createSplashScreenWithLogo(imagePath, 1136, 640),\r\n  createSplashScreenWithLogo(imagePath, 2046, 1536),\r\n  createSplashScreenWithLogo(imagePath, 1170, 2532),\r\n  createSplashScreenWithLogo(imagePath, 2048, 2732),\r\n  createSplashScreenWithLogo(imagePath, 750, 1334),\r\n  createSplashScreenWithLogo(imagePath, 1242, 2208),\r\n  createSplashScreenWithLogo(imagePath, 2160, 1620),\r\n  createSplashScreenWithLogo(imagePath, 828, 1792),\r\n  createSplashScreenWithLogo(imagePath, 1242, 2688),\r\n  createSplashScreenWithLogo(imagePath, 2208, 1242),\r\n  createSplashScreenWithLogo(imagePath, 1284, 2778),\r\n  createSplashScreenWithLogo(imagePath, 2224, 1668),\r\n  createSplashScreenWithLogo(imagePath, 1334, 750),\r\n  createSplashScreenWithLogo(imagePath, 2388, 1668),\r\n];\r\n\r\n// Create favicon\r\ncreateFavicon(imagePath);\r\n// Create assets\r\nPromise.all(createAndroidImageList);\r\nPromise.all(creaeMicrosoftImageList);\r\nPromise.all(createiOSImageList);\r\nPromise.all(createSplashScreenList);\r\n\r\n/**\r\n * Reusable function to create image\r\n * @param {string} imagePath - complete file path\r\n * @param {number} width - width of image\r\n */\r\nasync function createImage(\r\n  imagePath: string,\r\n  width: number,\r\n  folder: string = \"android\"\r\n): Promise<string> {\r\n  let image = await Jimp.read(imagePath);\r\n  const dirName: string = path.parse(imagePath).dir;\r\n\r\n  const newHeight = Math.floor(\r\n    image.bitmap.height * (width / image.bitmap.width)\r\n  );\r\n\r\n  const resizedImageName = `${folder}-icon-${width}x${width}${extension}`;\r\n\r\n  await image\r\n    .resize(width, newHeight)\r\n    .write(`${dirName}/${folder}/${resizedImageName}`);\r\n  return `Created image: ${imagePath}-${width}${extension}`;\r\n}\r\n\r\n/**\r\n * Create splash screen with logo in center\r\n * @param {string} imagePath - complete file path\r\n * @param {number} canvasWidth - width of splash screen\r\n * @param {number} canvasHeight - height of splash screen\r\n */\r\nasync function createSplashScreenWithLogo(\r\n  imagePath: string,\r\n  canvasWidth: number,\r\n  canvasHeight: number,\r\n  color = \"#FFFFFF\",\r\n  folder = \"ios\"\r\n): Promise<string> {\r\n  const dirName: string = path.parse(imagePath).dir;\r\n  const resizedImageName = `${folder}-splash-${canvasWidth}x${canvasHeight}${extension}`;\r\n\r\n  let image = await Jimp.read(imagePath);\r\n  const imageCanvas = new Jimp(canvasWidth, canvasHeight, color);\r\n  // composite\r\n  imageCanvas\r\n    .composite(\r\n      image,\r\n      alignImageCenter(canvasWidth, image.bitmap.width),\r\n      alignImageCenter(canvasHeight, image.bitmap.height)\r\n    )\r\n    .write(`${dirName}/${folder}/${resizedImageName}`);\r\n  return `Created splash screen!`;\r\n}\r\n\r\n/**\r\n * util function to offset image to the center of canvas\r\n * @param {number} canvasSize\r\n * @param {number} imageSize\r\n * @returns {number} offset size\r\n */\r\nfunction alignImageCenter(canvasSize: number, imageSize: number): number {\r\n  return (canvasSize - imageSize) / 2;\r\n}\r\n\r\n/**\r\n * Create favicon.ico file at the root of the folder\r\n * @param {string} imagePath \r\n */\r\nasync function createFavicon(imagePath: string) {\r\n  const dirName: string = path.parse(imagePath).dir;  \r\n  let image = await Jimp.read(imagePath);\r\n  const resizedImageName = `favicon.ico`;\r\n  await image.resize(16, 16).write(`${dirName}/${resizedImageName}`);\r\n  return `Created Favicon!`;\r\n}\r\n```","value":"https://github.com/johnlindquist/kit/discussions/780","img":"https://avatars.githubusercontent.com/u/6997529?u=3d91e8ea523b78a844f1f3974975b34684e4bc05&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/778","url":"https://github.com/johnlindquist/kit/discussions/778","title":"XState Widget","name":"XState Widget","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/778","createdAt":"2022-06-06T23:33:23Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4APu1l","body":"\r\n[Open xstate-widget in Script Kit](https://scriptkit.com/api/new?name=xstate-widget&url=https://gist.githubusercontent.com/johnlindquist/3168217af9fd93002f3b050783bb88e8/raw/af39e3534e659ceb9297413e75b5110a63c37287/xstate-widget.ts\")\r\n\r\n```js\r\n// Name: xstate widget\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet { createMachine, interpret } = await npm(\"xstate\")\r\n\r\nlet initial = 'inactive'\r\nlet toggleMachine = createMachine({\r\n    id: 'toggle',\r\n    initial,\r\n    states: {\r\n        inactive: { on: { TOGGLE: 'active' } },\r\n        active: { on: {TOGGLE: 'inactive'}}\r\n    }\r\n})\r\n\r\n// Widgets use \"petite-vue\" templating with state on the root\r\n// This allows to send a state object\r\nlet w = await widget(`\r\n<div class=\"p-4 text-4xl\">\r\n    <button>Click</button>\r\n    <div>{{ value === \"active\" ? \"💚\" : \"💔\"}}<div>\r\n</div>`, {\r\n    state: {\r\n        value: initial\r\n    }\r\n})\r\n\r\nlet toggleService = interpret(toggleMachine)\r\n    .onTransition(state => {\r\n        log(state) // ~/.kenv/logs/xstate-widget.log\r\n        w.setState(state)\r\n    })\r\n    .start()\r\n\r\nw.onClick(() => {\r\n    toggleService.send('TOGGLE')\r\n})\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/778","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/3693735?v=4","user":"ohana54","author":"Tomer Ohana","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/772","url":"https://github.com/johnlindquist/kit/discussions/772","title":"Eject External Drive","name":"Eject External Drive","extension":".md","description":"Created by ohana54","resourcePath":"/johnlindquist/kit/discussions/772","createdAt":"2022-05-20T22:12:26Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4APmM5","body":"\r\n[Open eject-external-drive in Script Kit](https://scriptkit.com/api/new?name=eject-external-drive&url=https://gist.githubusercontent.com/ohana54/ad6c3269ccc036daaec2d7036260404a/raw/32c800da6ea9871bd99f06e5867d3648118d9db6/eject-external-drive.js\")\r\n\r\n```js\r\n// Name: Eject External Drive\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport os from 'os'\r\n\r\nconst {stdout} = await $`diskutil list | grep \"(external\"`\r\n\r\nconst firstDisk = stdout.split(os.EOL)[0]\r\nconst firstDiskPath = firstDisk.split(' ')[0]\r\n\r\nawait $`diskutil eject ${firstDiskPath}`\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/772","img":"https://avatars.githubusercontent.com/u/3693735?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/12088143?u=8dfbb9a55ec09ac267e17424d3fdffc46aa3408d&v=4","user":"manan30","author":"Manan Joshi","twitter":"manan__joshi","discussion":"https://github.com/johnlindquist/kit/discussions/763","url":"https://github.com/johnlindquist/kit/discussions/763","title":"List all open PR's across all repos. Includes ones created by you as well as ones requesting your review","name":"List all open PR's across all repos. Includes ones created by you as well as ones requesting your review","extension":".md","description":"Created by manan30","resourcePath":"/johnlindquist/kit/discussions/763","createdAt":"2022-05-01T09:06:31Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4APbrQ","body":"Shows a list of all open PR's across all of your Github repos. Includes ones created by you as well as ones requesting your review. Selecting a pull request will open it directly in the browser\r\n\r\n```js\r\n// Name: Open Pull Requests\r\n// Author: Manan Joshi\r\n// Twitter: @manan__joshi\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport { Choice } from \"@johnlindquist/kit\";\r\n\r\nconst GITHUB_ACCESS_TOKEN = \"<YOUR_GITHUB_ACCESS_TOKEN>\";\r\nconst GITHUB_GRAPHQL_ENDPOINT = \"https://api.github.com/graphql\";\r\n\r\nconst myRequests = async () =>\r\n  await fetch(GITHUB_GRAPHQL_ENDPOINT, {\r\n    headers: { Authorization: `token ${GITHUB_ACCESS_TOKEN}` },\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      query: `\r\n        query {\r\n          viewer {\r\n            pullRequests(\r\n              first: 100\r\n              orderBy: { field: CREATED_AT, direction: DESC }\r\n              states: OPEN\r\n            ) {\r\n              nodes {\r\n                author {\r\n                  login\r\n                  avatarUrl\r\n                }\r\n                url\r\n                title\r\n                body\r\n                repository {\r\n                  nameWithOwner\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `,\r\n    }),\r\n  });\r\n\r\nconst reviewRequests = async () =>\r\n  await fetch(GITHUB_GRAPHQL_ENDPOINT, {\r\n    headers: { Authorization: `token ${GITHUB_ACCESS_TOKEN}` },\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      query: `\r\n        query {\r\n          search(\r\n            query: \"is:pr is:open review-requested:<your_github_username>\"\r\n            type: ISSUE\r\n            first: 100\r\n          ) {\r\n            nodes {\r\n              ... on PullRequest {\r\n                title\r\n                url\r\n                body\r\n                author {\r\n                  login\r\n                  avatarUrl\r\n                }\r\n                repository {\r\n                  nameWithOwner\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `,\r\n    }),\r\n  });\r\n\r\n[\"Mine\", \"Requested\"].forEach((type) => {\r\n  onTab(type, async () => {\r\n    const pullRequestUrl = await arg(\"Select a Pull Request\", async () => {\r\n      let requests = [];\r\n\r\n      if (type === \"Mine\") {\r\n        const data = await myRequests();\r\n        requests = (await data.json()).data.viewer.pullRequests.nodes;\r\n      } else {\r\n        const data = await reviewRequests();\r\n        requests = (await data.json()).data.search.nodes;\r\n      }\r\n\r\n      return requests.map(\r\n        (request) =>\r\n          ({\r\n            name: request.title,\r\n            description: `${request.repository.nameWithOwner} | ${request.author.login}`,\r\n            value: request.url,\r\n            icon: request.author.avatarUrl,\r\n            preview: md(`# ${request.title}`).concat(md(request.body)),\r\n          } as Choice<string>)\r\n      );\r\n    });\r\n\r\n    exec(`open ${pullRequestUrl}`);\r\n  });\r\n});\r\n```\r\n\r\n![pika-2022-05-01T09_04_11 591Z](https://user-images.githubusercontent.com/12088143/166139324-a03b6bfe-43d3-4deb-9592-5a1e60c052a2.png)","value":"https://github.com/johnlindquist/kit/discussions/763","img":"https://avatars.githubusercontent.com/u/12088143?u=8dfbb9a55ec09ac267e17424d3fdffc46aa3408d&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/4407263?u=fa7f37727ea98fd7f24e8409d0fda4c451c48eae&v=4","user":"theianjones","author":"Ian Jones","twitter":"_jonesian","discussion":"https://github.com/johnlindquist/kit/discussions/757","url":"https://github.com/johnlindquist/kit/discussions/757","title":"Copy Logseq/Roam Research content to clipboard without `[[]]` brackets","name":"Copy Logseq/Roam Research content to clipboard without `[[]]` brackets","extension":".md","description":"Created by theianjones","resourcePath":"/johnlindquist/kit/discussions/757","createdAt":"2022-04-15T17:47:29Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4APTwn","body":"Remove wiki links (from logseq or roam) when you want to copy paste notes our of your editor:\r\n\r\n[Install kit link](https://scriptkit.com/api/new?name=remove-brackets&url=https://gist.githubusercontent.com/theianjones/ba3457aba8dd7efeafa804f83bbcbf39/raw/9ac61e8191d56de9a4d87fb4455b2872ed0ab3a9/remove-brackets.ts)\r\n\r\n```ts\r\n// Name: Copy text sans brackets\r\n// Description: Remove wiki links from selected text\r\n// Shortcut: cmd + [\r\n// Author: Ian Jones\r\n// Twitter: @_jonesian\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst text = await getSelectedText()\r\nconst newText = text.split(\"\\n\").map(text => {\r\n    return text.split(' ').map((word, i, arr) => {\r\n        if(!word) {\r\n            return\r\n        }\r\n        const FULL_BRACES_MATCH = /\\[\\[(.*?)\\]\\]/\r\n        const LEFT_MATCH = /\\[\\[/\r\n        const RIGHT_MATCH = /\\]\\]/\r\n        const [_, fullMatch] = word.match(FULL_BRACES_MATCH) ?? []\r\n        const [leftMatch] = word.match(LEFT_MATCH) ?? []\r\n        const [rightMatch] = word.match(RIGHT_MATCH) ?? []\r\n        \r\n        if(!!fullMatch){\r\n            return fullMatch\r\n        } else if (!!leftMatch) {\r\n            const restOfArr = arr.slice(i + 1)\r\n            const restOfLink = restOfArr.reduce((acc, curr) => {\r\n                if(acc.endFound){\r\n                    return acc\r\n                }\r\n                const [rightMatch] = curr.match(RIGHT_MATCH) ?? []\r\n\r\n                return {endFound: !!rightMatch, str: acc.str + \" \" + curr}\r\n            }, {endFound: false, str: ''}).str\r\n            const [_, match] =  (word + restOfLink).match(FULL_BRACES_MATCH) ?? []\r\n            return match\r\n        } else if (rightMatch){\r\n            return\r\n        }else {\r\n            return word\r\n        }\r\n    }).join(' ')\r\n}).join(\"\\n\")\r\n\r\nif(newText){\r\n    await copy(newText)\r\n}\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/757","img":"https://avatars.githubusercontent.com/u/4407263?u=fa7f37727ea98fd7f24e8409d0fda4c451c48eae&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36767987?u=e03b3d34a5882f34dfb8d6e11609dd94836e3696&v=4","user":"dschapman","author":"Daniel Chapman","twitter":"ds_chapman","discussion":"https://github.com/johnlindquist/kit/discussions/752","url":"https://github.com/johnlindquist/kit/discussions/752","title":"Find Current Weather","name":"Find Current Weather","extension":".md","description":"Created by dschapman","resourcePath":"/johnlindquist/kit/discussions/752","createdAt":"2022-03-25T14:25:18Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4APHj6","body":"Inspired by [this script](https://github.com/johnlindquist/kit/discussions/489) I created a script that uses https://weather.gov and the [locateme](https://formulae.brew.sh/formula/locateme) script to find the weather in your current location. You can also find the weather by City, State or Zip code.\r\n\r\nThis script requires you to install locateme (`brew install locateme`) and grant it permission to use your location in Security & Privacy.\r\n\r\n<img width=\"987\" alt=\"Screen Shot 2022-03-25 at 10 22 11 AM\" src=\"https://user-images.githubusercontent.com/36767987/160138999-fdc14c88-f90a-45c4-8e27-65e0f9e959f9.png\">\r\n\r\n```javascript\r\n// Menu: Get Current Weather\r\n// Description: Forecast provided by weather.gov\r\n// Author: Daniel Chapman\r\n// Twitter: @ds_chapman\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet input = await arg(\"Get the Weather\", [\"For My Current Location\", \"For a Different Location\"])\r\nvar location;\r\nif (input == \"For My Current Location\") {\r\n  // Requires LocateMe installed on the path \r\n  // '$ brew install locateme'\r\n  // Also make sure to allow locateme in privacy/security\r\n  location = await $`locateme -f \"lat={LAT}&lon={LON}\"`;\r\n  div(\r\n  `<iframe src=\"https://forecast.weather.gov/MapClick.php?${location}\" height=1280px width=100% />`, \r\n);\r\n} else if (input == \"For a Different Location\") {\r\n  location = await arg(\"City, State or Zip\")\r\n\r\n  div(`<iframe src=\"https://forecast.weather.gov/zipcity.php?inputstring=${location}\" height=1280px width=100% />`)\r\n\r\n\r\n}\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/752","img":"https://avatars.githubusercontent.com/u/36767987?u=e03b3d34a5882f34dfb8d6e11609dd94836e3696&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36767987?u=e03b3d34a5882f34dfb8d6e11609dd94836e3696&v=4","user":"dschapman","author":"Daniel Chapman","twitter":"ds_chapman","discussion":"https://github.com/johnlindquist/kit/discussions/751","url":"https://github.com/johnlindquist/kit/discussions/751","title":"Tools for Managing a Markdown Based Website with Git Submodules","name":"Tools for Managing a Markdown Based Website with Git Submodules","extension":".md","description":"Created by dschapman","resourcePath":"/johnlindquist/kit/discussions/751","createdAt":"2022-03-25T13:55:56Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4APHi1","body":"[Install Script](https://scriptkit.com/api/new?name=publish-website&url=https://gist.githubusercontent.com/dschapman/23e3121f227b827409389a4822ed91f4/raw/f6f2a8e5b979ee19353adbab691ec86b1308ee15/publish-website.js)\r\n\r\nI put together a toolbox of scripts to help me manage my website -- a Gatsby based website that includes two different submodules of markdown content (One for my public notes, and one for my website's content). Some scripts are pretty straightforward (open VSCode, open the website in the browser) but the publish scripts take care of all of the git commands necessary to publish changes for me, including updating the git submodules.\r\n\r\n<img width=\"880\" alt=\"Screen Shot 2022-03-25 at 9 54 41 AM\" src=\"https://user-images.githubusercontent.com/36767987/160134094-4bf70455-6727-407a-a0d3-ab528283fa45.png\">\r\n<img width=\"880\" alt=\"Screen Shot 2022-03-25 at 9 55 21 AM\" src=\"https://user-images.githubusercontent.com/36767987/160134204-177e87e1-0b5c-4e16-a05a-dc1fb2a7017d.png\">\r\n\r\n\r\n\r\n```javascript\r\n// Name: Website Tools\r\n// Description: Tools for maintaining my website (dschapman.com)\r\n// Author: Daniel Chapman\r\n// Twitter: @ds_chapman\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet website_content = \"/Users/danielchapman/Library/Mobile Documents/iCloud~md~obsidian/Documents/dschapman-com-content\"\r\nlet website_notes = \"/Users/danielchapman/Library/Mobile Documents/iCloud~md~obsidian/Documents/My notes\"\r\nlet website_dir = \"/Users/danielchapman/github/dschapman/dschapman-com\"\r\n\r\nlet today = Date()\r\nlet output = []\r\nlet input = await arg(\"Select an Option\", [{ name: \"Publish\", description: \"Update the git repositories necessary to publish an update to my website\", value: \"Publish\" }, { name: \"Open Website in VSCode\", description: \"Open a vscode environment for dschapman-com\", value: \"VSCode\" }, { name: \"Edit Website Content\", description: \"Open the website's content in Obsidian\", value: \"Edit Website Content\" }, { name: \"Open Website\", description: \"Open https://dschapman.com in the browser\", value: \"Open Website\" }, { name: \"View on Github\", description: \"View website code on Github\", value: \"Github\" }].sort((a, b) => { return (a.name > b.name ? 1 : -1) }))\r\n\r\nswitch (input) {\r\n    case \"Publish\":\r\n        input = await arg(\"Publish\", [{ name: \"Website Content\", description: \"Publish any changes to poems, articles or blog posts\", \"value\": \"Website Content\" }, { name: \"Website Notes\", description: \"Publish any changes to public notes\", value: \"Website Notes\" }, { name: \"All Content\", description: \"Publish it all\", value: \"All Content\" }])\r\n        // -C allows git to be run from any directory\r\n        switch (input) {\r\n            case \"Website Content\":\r\n                output.push(await exec(`git -C \"${website_content}\" add -A`))\r\n                output.push(await exec(`git -C \"${website_content}\" commit -m \"Publish content: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_content}\" push`))\r\n                output.push(await exec(`git -C \"${website_dir}\" submodule update --remote`))\r\n                output.push(await exec(`git -C \"${website_dir}\" add dschapman-com-content`))\r\n                output.push(await exec(`git -C \"${website_dir}\" commit -m \"Publish content: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_dir}\" push`))\r\n                break;\r\n            case \"Website Notes\":\r\n                output.push(await exec(`git -C \"${website_notes}\" add -A`))\r\n                output.push(await exec(`git -C \"${website_notes}\" commit -m \"Publish content: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_notes}\" push`))\r\n                output.push(await exec(`git -C \"${website_dir}\" submodule update --remote`))\r\n                output.push(await exec(`git -C \"${website_dir}\" add My-notes`))\r\n                output.push(await exec(`git -C \"${website_dir}\" commit -m \"Publish notes: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_dir}\" push`))\r\n                break;\r\n            case \"All\":\r\n                output.push(await exec(`git -C \"${website_content}\" add -A`))\r\n                output.push(await exec(`git -C \"${website_content}\" commit -m \"Publish content: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_content}\" push`))\r\n                output.push(await exec(`git -C \"${website_notes}\" add -A`))\r\n                output.push(await exec(`git -C \"${website_notes}\" commit -m \"Publish content: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_notes}\" push`))\r\n                output.push(await exec(`git -C \"${website_dir}\" submodule update --remote`))\r\n                output.push(await exec(`git -C \"${website_dir}\" add My-notes dschapman-com-content`))\r\n                output.push(await exec(`git -C \"${website_dir}\" commit -m \"Publish all content: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_dir}\" push`))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        break;\r\n    case \"VSCode\":\r\n        exec(`code \"${website_dir}\"`);\r\n        break;\r\n    case \"Edit Website Content\":\r\n        input = await arg(\"Open\", [{ name: \"Articles, Poems, and Blog Posts\", value: \"content\" }, { name: \"Digital Notes\", value: \"notes\" }])\r\n        switch (input) {\r\n            case \"content\":\r\n                console.log(\"Content\")\r\n                browse(`\"obsidian://open?vault=dschapman-com-content\"`)\r\n                break;\r\n            case \"notes\":\r\n                console.log(\"Notes\")\r\n                browse(`\"obsidian://open?vault=My%20notes\"`)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n       break;\r\n    case \"Open Website\":\r\n        browse(\"https://dschapman.com\")\r\n        break;\r\n    case \"Github\":\r\n        browse(\"https://github.com/dschapman/dschapman-com\")\r\n        break;\r\n    default:\r\n        break;\r\n}\r\noutput.forEach(item => {\r\n    if (item.stdout)\r\n        console.log(item.stdout)\r\n})\r\n\r\n\r\n```","value":"https://github.com/johnlindquist/kit/discussions/751","img":"https://avatars.githubusercontent.com/u/36767987?u=e03b3d34a5882f34dfb8d6e11609dd94836e3696&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/12891645?u=eb9ed13c1bc9eeccf0b87ddbeea8778c7c32c05a&v=4","user":"JoepKockelkorn","author":"Joep Kockelkorn","twitter":"JoepKockelkorn","discussion":"https://github.com/johnlindquist/kit/discussions/748","url":"https://github.com/johnlindquist/kit/discussions/748","title":"Slack status in a refreshing widget","name":"Slack status in a refreshing widget","extension":".md","description":"Created by JoepKockelkorn","resourcePath":"/johnlindquist/kit/discussions/748","createdAt":"2022-03-09T16:05:00Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AO-eo","body":"\r\n[Open slack-status in Script Kit](https://scriptkit.com/api/new?name=slack-status&url=https://gist.githubusercontent.com/JoepKockelkorn/cc1dccf0cdc03bbca494d6afe1012124/raw/a122668ebc1471c329a1987329e1a98504dfde0c/slack-status.js\")\r\n\r\n```js\r\n// Menu: Watch slack status\r\n// Description: Open a refreshing widget which shows any slack incidents\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nconst intervalInMinutes = 2;\r\nconst intervalInMs = 2 * 60 * 1000;\r\nconst { incidentTitle, updatedFormatted, nextUpdateFormatted } = await getData(\r\n  intervalInMs\r\n);\r\n\r\nconst w = await widget(\r\n  `\r\n    <div class=\"p-4\">\r\n        <h1>Slack status</h1>\r\n        <h2>{{ incidentTitle }}</h2>\r\n        <p>Updated at: {{ updatedFormatted }}</p>\r\n        <p>Next update: {{ nextUpdateFormatted }}</p>\r\n    </div>\r\n`,\r\n  {\r\n    alwaysOnTop: true,\r\n    state: { incidentTitle, updatedFormatted, nextUpdateFormatted },\r\n  }\r\n);\r\n\r\nconst interval = setInterval(async () => {\r\n  const state = await getData(intervalInMs);\r\n  w.setState(state);\r\n}, intervalInMs);\r\n\r\nw.onClose(() => clearInterval(interval));\r\n\r\nasync function getData(intervalInMs) {\r\n  const { active_incidents: incidents } = (\r\n    await get(\"https://status.slack.com/api/v2.0.0/current\")\r\n  ).data;\r\n  const updated = new Date();\r\n  const updatedFormatted = updated.toLocaleTimeString(\"nl-NL\");\r\n  const nextUpdate = new Date(updated);\r\n  nextUpdate.setMilliseconds(updated.getMilliseconds() + intervalInMs);\r\n  const nextUpdateFormatted = nextUpdate.toLocaleTimeString(\"nl-NL\");\r\n  const incidentTitle = incidents[0]?.title\r\n    ? `⚠️ ${incidents[0].title}`\r\n    : \"All good in the hood 🤘\";\r\n  return { incidentTitle, updatedFormatted, nextUpdateFormatted };\r\n}\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/748","img":"https://avatars.githubusercontent.com/u/12891645?u=eb9ed13c1bc9eeccf0b87ddbeea8778c7c32c05a&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/745","url":"https://github.com/johnlindquist/kit/discussions/745","title":"March 2022 Release (version 1.7.3) - Widgets! Built-in Terminal, Menu, and Built-in Editor Types","name":"March 2022 Release (version 1.7.3) - Widgets! Built-in Terminal, Menu, and Built-in Editor Types","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/745","createdAt":"2022-03-01T19:45:06Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4AO6W1","body":"# March 2022 Release (version 1.7.3)\r\n\r\nScript Kit should auto-update or you can grab the downloads here: https://www.scriptkit.com/\r\n\r\n## Widgets - `await widget()`\r\n\r\nA widget is a detached UI window that can control and listen to a script.\r\n\r\n<img width=\"374\" alt=\"CleanShot 2022-03-01 at 12 43 13@2x\" src=\"https://user-images.githubusercontent.com/36073/156237436-f42e8f33-2fbb-48bb-9408-94f1a45283a5.png\">\r\n\r\n[Open widget-hello-world in Script Kit](https://scriptkit.com/api/new?name=widget-hello-world&url=https://gist.githubusercontent.com/johnlindquist/ca174899643e86f416d301d9599bb4e8/raw/55d334c6dc412c0346a750348d8c0ffa2b8650ba/widget-hello-world.ts\")\r\n\r\n```js\r\n// Name: Widget Hello World\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet message = await arg(\"Hello what?\")\r\nawait widget(`<h1 class=\"p-4 text-4xl\">Hello ${message}</h1>`)\r\n\r\n```\r\n\r\n### Widget Events\r\n\r\n\r\n[Open widget-events in Script Kit](https://scriptkit.com/api/new?name=widget-events&url=https://gist.githubusercontent.com/johnlindquist/1ce2972fdeed0773450f4dba3f3f2c00/raw/6834ccde194ea471f403df9366a7ac283cb853bb/widget-events.ts\")\r\n\r\n```js\r\n// Name: Widget Events\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet text = \"\"\r\nlet count = 0\r\n\r\nlet w = await widget(`\r\n<div class=\"p-5\">\r\n    <h1>Widget Events</h1>\r\n    <input autofocus type=\"text\" class=\"border dark:bg-black\"/>\r\n    <button id=\"myButton\" class=\"border px-2 py-1\">+</button>\r\n    <span>{{count}}</span>    \r\n</div>\r\n`)\r\n\r\nw.onClick((event) => {\r\n    if (event.targetId === \"myButton\") {\r\n        w.setState({count: count++})\r\n    }\r\n})\r\n\r\nw.onClose(async () => {\r\n    await widget(`\r\n<div class=\"p-5\">\r\n    <h1>You closed the other widget</h1>\r\n    <p>${text}</p>\r\n</div>\r\n`)\r\n})\r\n\r\nw.onInput((event) => {\r\n    text = event.value\r\n})\r\n\r\nw.onMoved(({ x, y}) => {\r\n    // e.g., save position\r\n})\r\n\r\nw.onResized(({ width, height }) => {\r\n    // e.g., save size\r\n})\r\n```\r\n\r\n## Closing a Widget\r\nThere are 3 ways to close a widget:\r\n1. Hit \"escape\" with the widget focused\r\n2. End the process of the widget. Hit <kbd>cmd+p</kbd> with the main menu focused to see the running processes or `exit()` anywhere in the script.\r\n3. Use a `ttl` (time to live) in the options when creating a widget\r\n\r\n## \"Always on Top\" and Locking the Widget\r\n\r\n[Open widget-always-on-top in Script Kit](https://scriptkit.com/api/new?name=widget-always-on-top&url=https://gist.githubusercontent.com/johnlindquist/bfd8ec67d9632867b0faf4e808381948/raw/90f766f21af8c88760409215e569baef9d8f0238/widget-always-on-top.ts\")\r\n\r\n```js\r\n// Name: Widget Always on Top\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nawait widget(`<h1 class=\"text-9xl\">🇺🇦</h1>`, {\r\n    alwaysOnTop: true,\r\n    transparent: true\r\n})\r\n\r\n```\r\n\r\nWith a widget focused, press <kbd>cmd+l</kbd> to \"Lock\" the widget. This will disable any possible mouse interactions (including moving, resizing, etc) and allow you to click through the widget to any windows underneath.\r\n\r\nTo \"Unlock\":\r\n1. three-fingered swipe up on OSX\r\n2. focus the widget\r\n3. hit <kbd>cmd+l</kbd>\r\n\r\nYou can now hit move, escape, etc the widget.\r\n\r\n## Built-in Terminal - `await term()`\r\n\r\n`term` is Script Kit's built-in terminal.\r\n\r\n### From the Main Menu\r\n\r\nType <kbd>></kbd> into the main menu to open `term`\r\n\r\n### From a Script\r\n\r\nUse the `await term()` API to switch to the terminal.\r\n\r\n[Open term-hello-world in Script Kit](https://scriptkit.com/api/new?name=term-hello-world&url=https://gist.githubusercontent.com/johnlindquist/10420bab68da357b572c1e703c2c5a43/raw/a287e443f1e57d4541f50feba28b86e1702ff515/term-hello-world.ts\")\r\n\r\n```js\r\n// Name: Term Hello World\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nawait term(`echo 'Hello World!'`)\r\n```\r\n\r\n> Note: If you want spawn a new Mac terminal, use `await terminal()`\r\n\r\n### Pass Terminal Output to Script\r\n\r\nIf you end the terminal with <kbd>cmd+enter</kbd>, the script will continue and you can grab the latest text output from the terminal.\r\n\r\n> 🐞: <kbd>ctrl+any key</kbd> will also end the terminal. This is a bug (it was only meant to be ctrl+c) which I'll fix soon. I'm also open to ideas for other shortcuts to \"end\" a terminal that aren't taken by vim/emacs/etc, because I know I'll be missing some.\r\n> 🐞: `term` doesn't grab keyboard focus when opening. I'll get that fixed ASAP!\r\n\r\n[Open term-returns in Script Kit](https://scriptkit.com/api/new?name=term-returns&url=https://gist.githubusercontent.com/johnlindquist/935445caef26d1c13f195533569cd0cc/raw/ca921b09480a3d7b5bf63e7a777011199e642fb9/term-returns.ts\")\r\n\r\n```js\r\n// Name: Term Returns\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet text = await term(`ls ~/.kit`)\r\nawait editor(text)\r\n```\r\n\r\n## Menubar - `menu()`\r\n\r\n`menu` allows you to customize the menubar for Script Kit.\r\n\r\n<img width=\"290\" alt=\"CleanShot 2022-03-01 at 12 40 58@2x\" src=\"https://user-images.githubusercontent.com/36073/156237149-c40843db-4dd2-4e35-9854-4a922e9cd1dd.png\">\r\n\r\n[Open menu-hello-world in Script Kit](https://scriptkit.com/api/new?name=menu-hello-world&url=https://gist.githubusercontent.com/johnlindquist/6aeb6a3f916bfc40e9acd6b9d4388b34/raw/21d8c70da05f08e454d81cb0ccebbbbc82b42f7d/menu-hello-world.ts\")\r\n\r\n```js\r\n// Name: Menu Hello World\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nmenu(`Hello 🌎`)\r\n```\r\n\r\n### Menu with Scripts\r\n\r\nThe second arg of menu can be an array of scripts you wish to present in a drop-down menu. This way, on left-click, you'll get a list of scripts to pick from from the menubar rather than opening the main Script Kit UI.\r\n\r\n[Open menu-with-scripts in Script Kit](https://scriptkit.com/api/new?name=menu-with-scripts&url=https://gist.githubusercontent.com/johnlindquist/0e07e0a8bd4926be6d843ce49fbb4474/raw/4a111ceeae7725525fdcf8bf546105698a4ac4c9/menu-with-scripts.ts\")\r\n\r\n```js\r\n// Name: Menu with Scripts\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\n// An empty string means \"Use default Script Kit icon\"\r\nmenu(``, [\r\n    \"app-launcher\"\r\n])\r\n```\r\n\r\n## Built-in Editor Types\r\n\r\nScript Kit's built-in editor now loads all of Script Kit's types! This was a huge undertaking that everyone just expects to work. You all know how that feels 😇\r\n\r\n> 🐞: Please let me know if you see any missing. I noticed that I missed the types for `terminal` and `iterm` when putting this post together 🤦‍♂️.\r\n\r\n## March Plans\r\n\r\nI'm dedicating March to DOCUMENTATION!!! (and bug-fixes)... I have _a lot_ of script requests to follow-up on and work around the newsletter and other non-app stuff. I'm also moving this month, so y'all know how stressful that can be. So expect the April build to be extremely light feature-wise, but I will be set up in the new house ready to much more live-streaming and communication. Can't wait to share more! 🙂\r\n\r\n## Questions?\r\n\r\nI'm happy to help with any questions you may have!","value":"https://github.com/johnlindquist/kit/discussions/745","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/25487857?u=1c81cf15334c751c49f61fe7e0e84b0618eb0e0e&v=4","user":"vojtaholik","author":"Vojta Holik","twitter":"vjthlk","discussion":"https://github.com/johnlindquist/kit/discussions/733","url":"https://github.com/johnlindquist/kit/discussions/733","title":"Emoji picker","name":"Emoji picker","extension":".md","description":"Created by vojtaholik","resourcePath":"/johnlindquist/kit/discussions/733","createdAt":"2022-02-16T15:31:40Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOzjw","body":"\r\n[Open emoji picker in Script Kit](https://scriptkit.com/api/new?name=emoji&url=https://gist.githubusercontent.com/vojtaholik/f097a40be15c6b21d5f8435120fda371/raw/daa43bc4320a8f1846f4f2a18d0e99507f9f45b5/emoji.js\")\r\n\r\n```js\r\n// Menu: Emoji picker\r\n// Shortcut: option cmd e\r\n// Twitter: @vjthlk\r\n// Author: Vojta Holik\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst { emojis, write } = await db(\"emojis-db\", {\r\n  emojis: [],\r\n});\r\n\r\nlet emojiPath = tmpPath(`emoji.json`);\r\n\r\nif (!(await isFile(emojiPath))) {\r\n  await download(\r\n    `https://raw.githubusercontent.com/github/gemoji/master/db/emoji.json`,\r\n    tmpPath()\r\n  );\r\n}\r\n\r\nlet emojiJson = await readJson(emojiPath);\r\n\r\nlet emojiJsonHistory = emojis.map((e) => {\r\n  return _.find(emojiJson, { emoji: e });\r\n});\r\n\r\nconst mode = (arr) =>\r\n  arr.reduce(\r\n    (a, b, i, arr) =>\r\n      arr.filter((v) => v === a).length >= arr.filter((v) => v === b).length\r\n        ? a\r\n        : b,\r\n    null\r\n  );\r\n\r\nlet mostUsed = mode(emojiJsonHistory);\r\n\r\nlet history = _.uniq(\r\n  [...emojiJsonHistory]\r\n    .filter((e) => e.description !== mostUsed.description)\r\n    .reverse()\r\n);\r\n\r\nlet emojiList = [\r\n  ...history.slice(0, 1),\r\n  mostUsed,\r\n  ...history.slice(1, 5),\r\n  ...emojiJson.filter((e) => {\r\n    return !history.includes(e);\r\n  }),\r\n];\r\n\r\nlet selectedEmoji = await arg(\r\n  \"Search\",\r\n  emojiList.map((e) => {\r\n    return {\r\n      name: `${e.emoji} ${e.description}`,\r\n      description: `${e.category} ${!_.isEmpty(e.tags) ? \"-\" : \"\"} ${e.tags.map(\r\n        (tag) => ` ${tag}`\r\n      )}`,\r\n      value: e.emoji,\r\n      shortcode: e.tags.map((tag) => ` ${tag}`),\r\n    };\r\n  })\r\n);\r\n\r\nemojis.push(!selectedEmoji.name && selectedEmoji);\r\nawait write();\r\n\r\nawait setSelectedText(selectedEmoji);\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/733","img":"https://avatars.githubusercontent.com/u/25487857?u=1c81cf15334c751c49f61fe7e0e84b0618eb0e0e&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1810481?u=f54707fef953fe4447b6860d598793836675c027&v=4","user":"dickiedyce","author":"Richard Dyce","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/731","url":"https://github.com/johnlindquist/kit/discussions/731","title":"Check if AC should be disconnected? (Poorman's AlDente)","name":"Check if AC should be disconnected? (Poorman's AlDente)","extension":".md","description":"Created by dickiedyce","resourcePath":"/johnlindquist/kit/discussions/731","createdAt":"2022-02-13T19:57:14Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOx6o","body":"I have a MacBook Retina, 12-inch, 2017, which makes using a tool like AlDente (for keeping the battery in good condition) impossible.\r\n\r\nThis is a scheduled script that notifies me to manually unplug when I reach 80% charge, and again manually plug it back in when the charge drops to 40%.\r\n\r\n[Open monitor-battery in Script Kit](https://scriptkit.com/api/new?name=monitor-battery&url=https://gist.githubusercontent.com/johnlindquist/3c21deb6d0d9dd9d06d8268fdd4baa30/raw/5837f8365aab810906323fbd0430e32f544ee7db/monitor-battery.js\")\r\n\r\n```js\r\n// Menu: Battery Monitor\r\n// Description: Check if AC should be disconnected? Poorman's AlDente\r\n// Author: Richard Dyce\r\n// Twitter: @dickiedyce\r\n// schedule: 0,15,20,45 5-22 * * *\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst result = await exec(`pmset -g batt`)\r\n\r\nconst charge = 1 * result.stdout.match(/(\\d+)\\%/)[1]\r\nconst state = result.stdout.match(/(discharging|charging)/)[0]\r\nconst source = result.stdout.match(/(Battery Power|AC Power)/)[0]\r\n\r\nif(charge > 80 && source == 'AC Power' ) {\r\n    notify(`UNPLUG! The laptop is ${state} from ${source}, at ${charge}%`)\r\n} else if (charge < 40 && source == 'Battery Power') {\r\n    notify(`PLUG-IN! The laptop is ${state} from ${source}, at ${charge}%`)\r\n} else {\r\n   // notify(`The laptop is ${state} from ${source}, at ${charge}%`)\r\n}\r\n```\r\n\r\n\r\n_Future plans: I have a Wemo WiFI Smart Plug on order, so if I can't stop the battery charging, I should be able to turn the charger off at the wall. ;-)_","value":"https://github.com/johnlindquist/kit/discussions/731","img":"https://avatars.githubusercontent.com/u/1810481?u=f54707fef953fe4447b6860d598793836675c027&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/2836281?v=4","user":"denieler","author":"Daniel O.","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/720","url":"https://github.com/johnlindquist/kit/discussions/720","title":"New episode of Simpsons everyday","name":"New episode of Simpsons everyday","extension":".md","description":"Created by denieler","resourcePath":"/johnlindquist/kit/discussions/720","createdAt":"2022-02-05T21:46:08Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOts3","body":"If you are fun of Simpsons you can get everyday a new episode 😃 \r\n\r\n```js\r\n// Name: simpsons\r\n// Description: Show next episode of Simpsons\r\n// Author: Daniel Ostapenko\r\n// Twitter: @denieler\r\n\r\nimport '@johnlindquist/kit'\r\n\r\nconst simpsonsDB = await db('simpsons', {\r\n    season: 7,\r\n    episode: 0,\r\n    episodesData: []\r\n})\r\n\r\nif (!simpsonsDB.episodesData.length) {\r\n    const wtf = await npm('wtf_wikipedia')\r\n    const doc = await wtf.fetch('List of The Simpsons episodes')\r\n    let episodes = doc.section('Episodes')\r\n    let episodesText = episodes.text()\r\n\r\n    const episodesRegexp = /episodes(\\d*) = (\\d*)/g\r\n    let episodesData = episodesText.match(episodesRegexp)\r\n\r\n    episodesData = episodesData.map(x => {\r\n        const [_season, _numberOfEpisodes] = x // episodes1 = 13\r\n            .replace('episodes', '') // '1 = 13'\r\n            .split(' = ') // ['1', '13']\r\n        \r\n        return {\r\n            season: parseInt(_season),\r\n            numberOfEpisodes: parseInt(_numberOfEpisodes)\r\n        }\r\n    })    \r\n\r\n    simpsonsDB.episodesData = episodesData\r\n    await simpsonsDB.write()\r\n}\r\n\r\nlet season = simpsonsDB.season\r\nlet episode = simpsonsDB.episode\r\n\r\nconst seasonEpisodes = simpsonsDB.episodesData.find(x => x.season === season)\r\n\r\nif (episode + 1 > seasonEpisodes.numberOfEpisodes) {\r\n    const seasonNumbers = simpsonsDB.episodesData\r\n        .map(x => x.season)\r\n    const maxSeason = seasonNumbers[seasonNumbers.length - 1]\r\n    if (season + 1 > maxSeason) {\r\n        season = 7\r\n        episode = 1\r\n    } else {\r\n        season = season + 1\r\n        episode = 1\r\n    }\r\n} else {\r\n    episode = episode + 1\r\n}\r\n\r\nsimpsonsDB.season = season\r\nsimpsonsDB.episode = episode\r\n\r\nawait simpsonsDB.write()\r\n\r\nconst episodeUrl = `https://www.wcofun.com/the-simpsons-season-${season}-episode-${episode}`\r\nbrowse(episodeUrl)\r\n```","value":"https://github.com/johnlindquist/kit/discussions/720","img":"https://avatars.githubusercontent.com/u/2836281?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/718","url":"https://github.com/johnlindquist/kit/discussions/718","title":"Download Chrome Video","name":"Download Chrome Video","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/718","createdAt":"2022-02-03T23:57:43Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOsxd","body":"\r\n\r\nhttps://user-images.githubusercontent.com/36073/152449075-40781148-9ad5-4b0e-a650-01d8d9b41d69.mp4\r\n\r\n\r\n\r\n\r\n[Open download-chrome-video in Script Kit](https://scriptkit.com/api/new?name=download-chrome-video&url=https://gist.githubusercontent.com/johnlindquist/b5db801d9a318a834261914067c42790/raw/a14e0f241f39ab8c20613b08b1547c92a60400e6/download-chrome-video.ts\")\r\n\r\n```js\r\n// Name: Download Chrome Video\r\n// Description: Downloads the video of the current Chrome page\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n// REQUIRES https://formulae.brew.sh/formula/youtube-dl\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport Stream from \"stream\"\r\n\r\nlet writeableStream = new Stream.Writable()\r\nwriteableStream._write = (chunk, encoding, next) => {\r\n    console.log(chunk.toString().trim())\r\n    next()\r\n}\r\n\r\ncd(await path())\r\n\r\nlet url = await getActiveTab()\r\n\r\nsetChoices(null)\r\nsetDescription(`Downloading ${url}...`)\r\nsetInput(``)\r\nsetPlaceholder(`Please wait...`)\r\n\r\nexec(`/opt/homebrew/bin/youtube-dl ${url}`, {all: true}).all.pipe(writeableStream)\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/718","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/716","url":"https://github.com/johnlindquist/kit/discussions/716","title":"Homebrew Search and Install","name":"Homebrew Search and Install","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/716","createdAt":"2022-02-02T20:06:28Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOsJE","body":"\r\n[Open homebrew in Script Kit](https://scriptkit.com/api/new?name=homebrew&url=https://gist.githubusercontent.com/johnlindquist/a83dd7c4463ac6869666108ec2c3137b/raw/0072c2e370e91ad6968f879516985f72fea92d81/homebrew.ts\")\r\n\r\n```js\r\n// Name: Homebrew Search\r\n// Description: Search and Install Homebrew Formulae\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet response = await get(`https://formulae.brew.sh/api/formula.json`)\r\n\r\nlet homebrewChoices = response.data.map(({name, tap}) => {\r\n    return {\r\n        name,\r\n        value: name,\r\n        description: tap,\r\n        preview: async ()=> {\r\n            let response = await get(`https://formulae.brew.sh/api/formula/${name}.json`)\r\n            let {full_name, tap, desc, homepage, versions, urls} = response.data\r\n            return md(`## ${full_name}\r\n### ${tap}\r\n\r\n${desc}\r\n[${homepage}](${homepage})\r\n\r\n* Version - ${versions?.stable}\r\n* URLs - ${urls?.stable?.url}\r\n\r\n\r\n `)\r\n        }\r\n\r\n    }\r\n})\r\n\r\nlet formula = await arg(\"Search homebrew\", homebrewChoices)\r\n\r\nlet bins = await readdir(`/opt/homebrew/bin`)\r\n\r\nlet installed = bins.includes(formula)\r\n\r\nif(installed){\r\n    setDescription(`${formula} already installed`)\r\n}\r\n\r\nlet message = `${installed ? `Uninstall` : `Install`} ${formula}?`\r\n\r\nlet confirm = await arg(message, [\r\n    {name: `[y]es`, value: true},\r\n    {name: `[n]o`, value: false}\r\n])\r\n\r\nsetChoices(null)\r\nsetPlaceholder(`Please wait...`)\r\n\r\n\r\nif(confirm){\r\n    setDescription(`${installed ? `Uninstalling` : `Installing`} ${formula}`)\r\n    await exec(`/opt/homebrew/bin/brew ${installed ? `uninstall` : `install`} ${formula}`)\r\n}\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/716","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1879320?u=072338233a3b35207379493f17593a09a77548c8&v=4","user":"jacobswain","author":"Jacob Swain","twitter":"jacobswain","discussion":"https://github.com/johnlindquist/kit/discussions/712","url":"https://github.com/johnlindquist/kit/discussions/712","title":"Heroku Status","name":"Heroku Status","extension":".md","description":"Created by jacobswain","resourcePath":"/johnlindquist/kit/discussions/712","createdAt":"2022-01-30T21:04:15Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOqaB","body":"## Display the details and status of Heroku Apps. \r\n\r\nInstall [heroku-status](\r\nhttps://scriptkit.com/api/new?name=heroku-status&url=https://gist.githubusercontent.com/jacobswain/967b469fa164ad4ba5e97669a8e1f007/raw/978ac0f82b367fd5619628b253bd3822d3bb507f/heroku-status.js\r\n)\r\n\r\n\r\n### Generate a Heroku API Key: \r\n\r\n- Install the [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli#download-and-install) \r\n- Run `heroku login`\r\n- Run `heroku authorizations:create`\r\n- Enter the token into [ScriptKit](https://www.scriptkit.com/) when prompted\r\n\r\n### Script\r\n\r\n```javascript \r\n// Name: Heroku Status\r\n// Description: Displays the status of Heroku apps\r\n// Author: Jacob  Swain\r\n// Twitter: @jacobswain\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst Heroku = await npm(\"heroku-client\");\r\nlet token = await env(\"HEROKU_API_TOKEN\");\r\n\r\nconst heroku = new Heroku({ token });\r\n\r\nconst preview = ({ name, stack, web_url, git_url, updated_at, status }) =>\r\n  md(`\r\n## ${name}\r\n- Updated: ${updated_at}\r\n- Status: ${status}  \r\n- Stack: ${stack}\r\n\r\n### Links\r\n${git_url ? `- [git](${git_url})` : \"\"}\r\n${web_url ? `- [web](${web_url})` : \"\"}\r\n    `);\r\n\r\nconst byDateDesc = (a, b) => {\r\n  if (a.created_at < b.created_at) {\r\n    return 1;\r\n  }\r\n  if (a.created_at > b.created_at) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst apps = await heroku.get(\"/apps\").then((apps) =>\r\n  apps.map(({ id, name, web_url, git_url, updated_at }) => ({\r\n    name,\r\n    description: web_url,\r\n    value: `https://dashboard.heroku.com/apps/${name}`,\r\n    preview: async () => {\r\n      const setups = await heroku\r\n        .get(`/apps/${id}/builds`)\r\n        .then((builds) => builds.sort(byDateDesc));\r\n\r\n      if (!setups || !setups.length) return md(`No builds found`);\r\n\r\n      return preview({ ...setups[0], name, web_url, git_url });\r\n    },\r\n  }))\r\n);\r\n\r\nlet url = await arg(\"Select Heroku App:\", apps);\r\n\r\nawait $`open ${url}`;\r\n```","value":"https://github.com/johnlindquist/kit/discussions/712","img":"https://avatars.githubusercontent.com/u/1879320?u=072338233a3b35207379493f17593a09a77548c8&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1639?v=4","user":"capitalist","author":"Joe Martinez","twitter":"capitalist","discussion":"https://github.com/johnlindquist/kit/discussions/709","url":"https://github.com/johnlindquist/kit/discussions/709","title":"Hex Elixir Package Search","name":"Hex Elixir Package Search","extension":".md","description":"Created by capitalist","resourcePath":"/johnlindquist/kit/discussions/709","createdAt":"2022-01-30T14:13:47Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOqTC","body":"I modified Jacob Swain's NPM Search to search for elixir packages on Hex. I'm not sure the proper way to do that attributution so I added `OriginalAuthor`\r\n\r\n```js\r\n// Menu: Hex Elixir Package Search\r\n// Description: Search Hex for Elixir packages\r\n// Author: Joe Martinez\r\n// Twitter: @capitalist\r\n// I based this script on the NPM search done by Jacob Swain\r\n// OriginalAuthor: Jacob A. Swain\r\n// OriginalTwitter: @jacobswain\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst baseUrl = \"https://hex.pm/api/packages?sort=downloads&search=\";\r\nconst toData = (res) => res.data;\r\n\r\nconst term = await arg(\"Package name:\");\r\n\r\nlet preview = async ({ name, description, version, links }) =>\r\n  await md(`\r\n  ## ${name}\r\n  - Description: ${description}  \r\n  - Version: ${version}  \r\n\r\n  #### Links\r\n  ${links.docs ? `- [Docs](${links.docs})` : \"\"}\r\n  ${links.Changelog ? `- [Changelog](${links.Changelog})` : \"\"}\r\n  ${links.GitHub ? `- [GitHub](${links.GitHub})` : \"\"}\r\n`);\r\n\r\nconst results = await get(`${baseUrl}${term}`)\r\n  .then(toData)\r\n  .then((results) =>\r\n    results.map(({ name, meta, latest_version, html_url, docs_html_url }) => ({\r\n      name,\r\n      description: meta.description,\r\n      value: html_url,\r\n      preview: async () =>\r\n        preview({\r\n          name,\r\n          description: meta.description,\r\n          version: latest_version,\r\n          links: { docs: docs_html_url, ...meta.links },\r\n        }),\r\n    }))\r\n  );\r\n\r\nlet url = await arg(\"Select package:\", results);\r\n\r\nawait $`open ${url}`;\r\n```","value":"https://github.com/johnlindquist/kit/discussions/709","img":"https://avatars.githubusercontent.com/u/1639?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1879320?u=072338233a3b35207379493f17593a09a77548c8&v=4","user":"jacobswain","author":"Jacob Swain","twitter":"jacobswain","discussion":"https://github.com/johnlindquist/kit/discussions/707","url":"https://github.com/johnlindquist/kit/discussions/707","title":"NPM Search Script with Preview","name":"NPM Search Script with Preview","extension":".md","description":"Created by jacobswain","resourcePath":"/johnlindquist/kit/discussions/707","createdAt":"2022-01-30T04:46:39Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOqKo","body":"Here's a script to display search results from [npm](https://www.npmjs.com/) along with a preview of the package details and associated links. \r\n\r\n[Install search-npm](https://scriptkit.com/api/new?name=search-npm&url=https://gist.githubusercontent.com/jacobswain/5f111af4d0d2684d4873702340b4f42a/raw/9abb698673b9ed68399014fcda0f5436f2f26fa6/search-npm.js)\r\n\r\n\r\n\r\n```javascript\r\n// Menu: NPM Search\r\n// Description: Search NPM for packages\r\n// Author: Jacob A. Swain\r\n// Twitter: @jacobswain\r\n// Email: jacobswain@gmail.com\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst baseUrl = \"https://www.npmjs.com/search/suggestions?q=\";\r\nconst toData = (res) => res.data;\r\n\r\nconst term = await arg(\"Package name:\");\r\n\r\nlet preview = async ({ name, description, version, links }) =>\r\n  await md(`\r\n  ## ${name}\r\n  - Description: ${description}  \r\n  - Version: ${version}  \r\n\r\n  #### Links\r\n  ${links.npm ? `- [npm](${links.npm})` : \"\"}\r\n  ${links.repository ? `- [repository](${links.repository})` : \"\"}\r\n  ${links.repository ? `- [homepage](${links.homepage})` : \"\"}\r\n`);\r\n\r\nconst results = await get(`${baseUrl}${term}`)\r\n  .then(toData)\r\n  .then((results) =>\r\n    results.map(({ name, description, version, links }) => ({\r\n      name,\r\n      description,\r\n      value: links.npm,\r\n      preview: async () => preview({ name, description, version, links }),\r\n    }))\r\n  );\r\n\r\nlet url = await arg(\"Select package:\", results);\r\n\r\nawait $`open ${url}`;\r\n```\r\n\r\n\r\nHere's a screenshot:\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/1879320/151686953-66bf90b5-850d-45c9-96cf-68c688c7cd80.png)\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/707","img":"https://avatars.githubusercontent.com/u/1879320?u=072338233a3b35207379493f17593a09a77548c8&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/705","url":"https://github.com/johnlindquist/kit/discussions/705","title":"February 2021 (version 1.6.9) - Built-in Editor, New Main Menu Features, `await path()`, Event handlers, Beta pro features, Terminate Process","name":"February 2021 (version 1.6.9) - Built-in Editor, New Main Menu Features, `await path()`, Event handlers, Beta pro features, Terminate Process","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/705","createdAt":"2022-01-30T00:36:03Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4AOqIL","body":"Been a _busy_ month of major Script Kit features!\r\n\r\n## Built-in Editor\r\n\r\nScript Kit's number one goal is to make writing time-saving scripts easier. So now Script KIt comes with a pre-configured editor, complete with autocompletion and error checking:\r\n\r\nhttps://user-images.githubusercontent.com/36073/152349718-9f9af13f-4cbb-4444-810a-2f1281938106.mp4\r\n\r\nIf you're already using vs code, you can switch to the \"Kit\" editor in the `Kit` tab -> `Change Editor`.\r\n\r\n## Main Menu Shortcuts and `/`, `~`, and `>`\r\n\r\nThe Script Kit main menu will continue to grow in features. \r\n\r\n### Shortcuts\r\n\r\n* `cmd+f` - Does a `grep` search through all of your scripts\r\n* `cmd+p` - Launches a `Processes` menu for currently running scripts\r\n\r\n### Path Mode\r\nType the following characters to change the mode of the main menu:\r\n* <kbd>~</kbd> Switches to a path selector mode in your home directory\r\n* <kbd>/</kbd> Switches to a path selector mode in your root directory\r\n\r\nNavigate with <kbd>right</kbd>/<kbd>left</kbd> or <kbd>tab</kbd>/<kbd>shift+tab</kbd> then select with <kbd>return</kbd>. Here's an example of typing `~`\r\n\r\nhttps://user-images.githubusercontent.com/36073/152386816-8be054d6-047c-416f-ae2b-dce1723d222c.mp4\r\n\r\n### Command Mode\r\n\r\n* <kbd>></kbd> Switches to a command mode to execute a command\r\n\r\n\r\nhttps://user-images.githubusercontent.com/36073/152387376-b2e8b71a-4980-4d23-8c98-4f56f3ce1fdd.mp4\r\n\r\n\r\n### Future Work\r\nIn the March release, planning on these:\r\n\r\n* <kbd>,</kbd> List system preferences\r\n* <kbd>.</kbd> App launcher\r\n* <kbd>;</kbd> MEGA MENU WITH EVERYTHING 🤭\r\n\r\n## `await path()`\r\n\r\nYou can now prompt to select a path. This UI  works exactly like \"path mode\" above.\r\n\r\n```js\r\nlet selectedPath = await path()\r\ncd(selectedPath)\r\n\r\nawait exec(`git pull`) // this will now operate based on the selectedPath\r\n```\r\n\r\n## Event Handlers\r\n\r\nWhen building the `path` prompt, I realized it just wasn't possible to do in a script. So I put in the effort to expose the event handlers from the app into the prompt. So even though `path` behaves very differently, it's still an `arg` with customized handlers. You can override many of the handlers yourself for customized prompts:\r\n\r\nFor example, you can override the default behavior of `Escape` terminating your current script:\r\n\r\n```js\r\n// Submit the current input when you hit escape\r\nawait arg({\r\n  onEscape: (input)=> {\r\n    submit(input)\r\n  }\r\n})\r\n```\r\n\r\nOverriding handlers is definitely considered \"advanced\", so I'm happy to answer any questions!\r\n\r\nHere's a list of all the new `arg` config properties:\r\n```js\r\nexport interface ChannelHandler {\r\n  (input: string, state: AppState): void | Promise<void>\r\n}\r\n\r\nexport interface PromptConfig\r\n  onNoChoices?: ChannelHandler\r\n  onChoices?: ChannelHandler\r\n  onEscape?: ChannelHandler\r\n  onAbandon?: ChannelHandler\r\n  onBack?: ChannelHandler\r\n  onForward?: ChannelHandler\r\n  onUp?: ChannelHandler\r\n  onDown?: ChannelHandler\r\n  onLeft?: ChannelHandler\r\n  onRight?: ChannelHandler\r\n  onTab?: ChannelHandler\r\n  onInput?: ChannelHandler\r\n  onBlur?: ChannelHandler\r\n  onChoiceFocus?: ChannelHandler\r\n\r\n  debounceInput?: number\r\n  debounceChoiceFocus?: number\r\n\r\n  onInputSubmit?: {\r\n    [key: string]: any\r\n  }\r\n  onShortcutSubmit?: {\r\n    [key: string]: any\r\n  }\r\n}\r\n```\r\n\r\n## onInputSubmit, onShortcutSubmit\r\n\r\nIf you want to create \"shortcuts\" to submit specific values, can use the new `onInputSubmit` and `onShortcutSubmit`. These allow you to bind text or shortcuts to submit values. This is exactly how the main menu works:\r\n\r\n![CleanShot 2022-02-03 at 09 47 42](https://user-images.githubusercontent.com/36073/152388672-db242f4e-20e2-4645-a326-a8bbc960f63d.png)\r\n\r\n\r\n## Beta Pro Features: Menubar\r\n\r\nYou can now customize the text of the Script Kit menubar icon to say anything with the `pro.beta.menubar` method. In the future, you'll be able to build out an entire menu, but I thought I'd sneak this feature in for fun in this build:\r\n\r\n[Open menubar-demo in Script Kit](https://scriptkit.com/api/new?name=menubar-demo&url=https://gist.githubusercontent.com/johnlindquist/ef01308eb63715970f26ee1378473194/raw/9ad4219968d9ec1a9747811a71c678ad8e241ec0/menubar-demo.ts\")\r\n\r\n```js\r\n// Name: Menubar Demo\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet value = await arg(\"Set the menubar to:\")\r\npro.beta.menubar(value)\r\n\r\n\r\n```\r\n\r\nhttps://user-images.githubusercontent.com/36073/152394319-d9e071fe-edcd-4cf2-be3e-60d5ba7b01cd.mp4\r\n\r\n\r\n## Terminate Processes\r\n\r\nIf you need to end a script that's running in the background, stuck on an exec command, or whatever reason, open the main menu with the <kbd>cmd+;</kbd> shortcut, then press this button (or hit <kbd>cmd+p</kbd>. This will open a \"terminate processes\" window where you can end your scripts:\r\n\r\n![CleanShot 2022-02-03 at 10 20 45@2x](https://user-images.githubusercontent.com/36073/152394881-cf612921-1f00-4458-861a-3538053377dd.png)","value":"https://github.com/johnlindquist/kit/discussions/705","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/699","url":"https://github.com/johnlindquist/kit/discussions/699","title":"Toggle Desktop Icons","name":"Toggle Desktop Icons","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/699","createdAt":"2022-01-26T15:25:27Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOoYi","body":"\r\n[Open toggle-desktop-icons in Script Kit](https://scriptkit.com/api/new?name=toggle-desktop-icons&url=https://gist.githubusercontent.com/johnlindquist/d6887def27a998c1facd9430b725f32b/raw/af1f6a97e347270f4ae49661738aaa58052bce22/toggle-desktop-icons.ts\")\r\n\r\n```js\r\n// Name: Toggle Desktop Icons\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet visible = true\r\n\r\ntry{\r\n    // This command fails if icons are hidden\r\n    let {stdout} = await exec(`defaults read com.apple.finder CreateDesktop`)\r\n    visible = stdout === 1\r\n}catch{}\r\n\r\nlet command = `defaults ${visible ? \"write\" : \"delete\"} com.apple.finder CreateDesktop ${visible ? \"-bool FALSE\" : \"\"};killall Finder`\r\n\r\nawait exec(command)\r\n\r\n```","value":"https://github.com/johnlindquist/kit/discussions/699","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/6997529?u=3d91e8ea523b78a844f1f3974975b34684e4bc05&v=4","user":"avj2352","author":"PRAMOD A JINGADE","twitter":"avj2352","discussion":"https://github.com/johnlindquist/kit/discussions/698","url":"https://github.com/johnlindquist/kit/discussions/698","title":"Search Scriptures from the Bible","name":"Search Scriptures from the Bible","extension":".md","description":"Created by avj2352","resourcePath":"/johnlindquist/kit/discussions/698","createdAt":"2022-01-26T06:07:41Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOoHV","body":"Use Bible API to search for a scripture and copy it to clipboard\r\n\r\n```javascript\r\n// Shortcut: command option b\r\n// Menu: Bible Search 🔍\r\n// Description: 📖 Launch scripture based on input book, chapter, verse\r\n// Author: Pramod Jingade\r\n// Twitter: @avj2352\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\n/**\r\n * Bible API key credentials.\r\n */\r\nconst bibleAPIHeaders = {\r\n    'x-rapidapi-host': 'ajith-holy-bible.p.rapidapi.com',\r\n    'x-rapidapi-key': '08fb250872msh61199006cfd5075p1455c9jsn3e783f6773e5'\r\n};\r\n\r\n/**\r\n * Async API call to fetch bible Verse\r\n * @param {*} verses \r\n * @returns \r\n */\r\nasync function getBibleVerse(book, chapter, verse) {\r\n    const query = `https://ajith-holy-bible.p.rapidapi.com/GetVerseOfaChapter?Book=${book}&Chapter=${chapter}&Verse=${verse}`;\r\n    return await get(query, {\r\n        headers: {\r\n            ...bibleAPIHeaders\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Function to validate verses\r\n * @param {string} verses \r\n * @returns [] numbers\r\n */\r\nfunction parseVerses(verses) {\r\n    if (Boolean(verses) && verses.includes('-')) {\r\n        const list = [];\r\n        const lowEnd = Number(verses.split('-')[0]);\r\n        const highEnd = Number(verses.split('-')[1]);\r\n        for (let i = lowEnd; i <= highEnd; i++) {\r\n            list.push(i);\r\n        }\r\n        return list;\r\n    } else if (Boolean(verses) && verses.includes(',')) {\r\n        const list = verses.split(',').map(item => Number(item));\r\n        return list;\r\n    } else if (Boolean(verses)) {\r\n        return [Number(verses)];\r\n    } else {\r\n        throw new Error;\r\n    }\r\n}\r\n\r\n/**\r\n * Function to validate input string\r\n * @param {string} input\r\n * @returns [{chapter: string, verse: string}]\r\n */\r\nfunction parseScripture(input) {\r\n    // Validate edge cases\r\n    const text = input.trim();\r\n    if (text === '') throw new Error;\r\n    else if (!text.includes(':')) throw new Error;\r\n    let chapter = text.split(':')[0];\r\n    const verses = text.split(':')[1];\r\n    if (!chapter || !verses || chapter === ' ' || verses === '') throw new Error;\r\n    // Parse Verses\r\n    chapter = Number(chapter);\r\n    const verseList = parseVerses(verses);\r\n    // return object\r\n    if (Boolean(verseList.length > 0)) {\r\n        return verseList.map(item => ({\r\n            chapter,\r\n            verse: item\r\n        }));\r\n    } else return [];\r\n}\r\n\r\n/**\r\n * Return a list of scripture response with End Search or Copy to clipboard option\r\n * @param {string} book \r\n * @param {Object} versObj \r\n * @param {string} chapterVerseString \r\n * @returns [{name, description, preview, value}]\r\n */\r\nasync function getScriptureResponseList(book, versObj, chapterVerseString) {\r\n    // Promise.all(apiCallList).then(response => inspect(response));\r\n    // doesn't work\r\n    // inspect(versObj);\r\n    let textList = [];\r\n    for (let i = 0; i < versObj.length; i++) {\r\n        const api = await getBibleVerse(book, versObj[i].chapter, versObj[i].verse);\r\n        textList.push(`${versObj[i].verse}.${api.data.Output}`);\r\n    }\r\n    const textString = textList.join('\\n');\r\n    return [{\r\n            name: `${book} ${chapterVerseString}`,\r\n            description: `${textString.substring(0,100)}...`,\r\n            preview: textString,\r\n            value: `# ${book} ${chapterVerseString}\\n\\n${textString}`\r\n        },        \r\n        {\r\n            name: `End Search ?`,\r\n            description: ``,\r\n            value: 'n'\r\n        }\r\n    ];\r\n}\r\n\r\n/**\r\n * Main Function\r\n * Repeatedly execute\r\n */\r\nwhile (true) {\r\n    try {\r\n        const book = await arg(\"Which Book?\", prepBookList());\r\n        const chapterVerseString = await arg(\"Enter chapter verse [ch:verse]\");\r\n        if (chapterVerseString === '') throw new Error;\r\n        // get scripture verseinput list\r\n        const versObj = parseScripture(chapterVerseString);\r\n        // call api and get bible text\r\n        const textResponse = await arg(\r\n                        `Scripture (NIV)...`, await getScriptureResponseList(book, versObj, chapterVerseString));\r\n        if (textResponse === \"n\") break;        \r\n        else copy(textResponse);\r\n    } catch (err) {\r\n        const yesOrNo = await arg(`📖 Unable to find scripture, try again [y/n]?`);\r\n        if (yesOrNo !== \"y\") break;\r\n    }\r\n}\r\n\r\n/**\r\n * Prepopulate Books in the Bible: 66 books\r\n * @returns [{name: Book, value: Book description, with API book param value}]\r\n */\r\nfunction prepBookList() {\r\n    return [{\r\n            name: \"📜 Genesis\",\r\n            description: `Old Testament - Frist book of the Pentateuch. \r\n                          Describes the creation; history of the old world`,\r\n            value: \"Genesis\"\r\n        },\r\n        {\r\n            name: \"📜 Exodus\",\r\n            description: `Old Testament - Second book of the Pentateuch. \r\n                          Israel's departure from Egypt; the giving of the law; the tabernacle.`,\r\n            value: \"Exodus\"\r\n        },\r\n        {\r\n            name: \"📜 Leviticus\",\r\n            description: `Old Testament - Third book of the Pentateuch.\r\n                          The ceremonial law.`,\r\n            value: \"Leviticus\"\r\n        },\r\n        {\r\n            name: \"📜 Numbers\",\r\n            description: `Old Testament - Fourth book of the Pentateuch.\r\n                          The census of the people; the story of the wanderings in the wilderness.`,\r\n            value: \"Numbers\"\r\n        },\r\n        {\r\n            name: \"📜 Deuteronomy\",\r\n            description: `Old Testament - Fifth book of the Pentateuch.\r\n                          The law rehearsed; the death of Moses.`,\r\n            value: \"Deuteronomy\"\r\n        },\r\n        {\r\n            name: \"📜 Joshua\",\r\n            description: `Old Testament - The story of the conquest and partition of Canaan.`,\r\n            value: \"Joshua\"\r\n        },\r\n        {\r\n            name: \"📜 Judges\",\r\n            description: `Old Testament - The history of the nation from Joshua to Samson.`,\r\n            value: \"Judges\"\r\n        },\r\n        {\r\n            name: \"📜 Ruth\",\r\n            description: `Old Testament - The story of the ancestors of the royal family of Judah.`,\r\n            value: \"Ruth\"\r\n        },\r\n        {\r\n            name: \"📜 1 Samuel\",\r\n            description: `Old Testament - The story of the nation during the \r\n                            judgeship of Samuel and the reign of Saul.`,\r\n            value: \"1 Samuel\"\r\n        },\r\n        {\r\n            name: \"📜 2 Samuel\",\r\n            description: `Old Testament - Story of the reign of David.`,\r\n            value: \"2 Samuel\"\r\n        },\r\n        {\r\n            name: \"📜 1 Kings\",\r\n            description: `Old Testament - exclusive of the reigns of Saul and David.`,\r\n            value: \"1 Kings\"\r\n        },\r\n        {\r\n            name: \"📜 2 Kings\",\r\n            description: `Old Testament - they comprehend the whole time of the Israelitish monarchy.`,\r\n            value: \"2 Kings\"\r\n        },\r\n        {\r\n            name: \"📜 1 Chronicles\",\r\n            description: `Old Testament - they are the official histories of the kingdoms of Judah & Israel.`,\r\n            value: \"1 Chronicles\"\r\n        },\r\n        {\r\n            name: \"📜 2 Chronicles\",\r\n            description: `Old Testament - they are the official histories of the kingdoms of Judah & Israel.`,\r\n            value: \"2 Chronicles\"\r\n        },\r\n        {\r\n            name: \"📜 Ezra\",\r\n            description: `Old Testament - The story of the return of the Jews from the Babylonish captivity, \r\n                            and of the rebuilding of the temple.`,\r\n            value: \"Ezra\"\r\n        },\r\n        {\r\n            name: \"📜 Nehemiah\",\r\n            description: `Old Testament - A further account of the rebuilding of the temple and city, \r\n                            and of the obstacles encountered and overcome.`,\r\n            value: \"Nehemiah\"\r\n        },\r\n        {\r\n            name: \"📜 Esther\",\r\n            description: `Old Testament - The story of a Jewess who becomes queen of Persia.`,\r\n            value: \"Esther\"\r\n        },\r\n        {\r\n            name: \"📜 Job\",\r\n            description: `Old Testament - The story of the trials and patience of a holy man of Edom.`,\r\n            value: \"Job\"\r\n        },\r\n        {\r\n            name: \"📜 Psalms\",\r\n            description: `Old Testament - A collection of sacred poems intended \r\n                            for use in the worship of Jehovah. \r\n                            Chiefly the productions of David.`,\r\n            value: \"Psalms\"\r\n        },\r\n        {\r\n            name: \"📜 Proverbs\",\r\n            description: `Old Testament - The wise sayings of Solomon.`,\r\n            value: \"Proverbs\"\r\n        },\r\n        {\r\n            name: \"📜 Ecclesiastes\",\r\n            description: `Old Testament - A poem respecting the vanity of earthly things.`,\r\n            value: \"Ecclesiastes\"\r\n        },\r\n        {\r\n            name: \"📜 Song of Solomon\",\r\n            description: `Old Testament - An allegory relating to the church.`,\r\n            value: \"Song of Solomon\"\r\n        },\r\n        {\r\n            name: \"📜 Isaiah\",\r\n            description: `Old Testament - Prophecies respecting Christ and his kingdom.`,\r\n            value: \"Isaiah\"\r\n        },\r\n        {\r\n            name: \"📜 Jeremiah\",\r\n            description: `Old Testament - Prophecies announcing the captivity of Judah, its sufferings, \r\n                            and the final overthrow of its enemies.`,\r\n            value: \"Jeremiah\"\r\n        },\r\n        {\r\n            name: \"📜 Lamentations\",\r\n            description: `Old Testament - The utterance of Jeremiah's sorrow upon the capture of \r\n                            Jerusalem and the destruction of the temple.`,\r\n            value: \"Lamentations\"\r\n        },\r\n        {\r\n            name: \"📜 Ezekiel\",\r\n            description: `Old Testament - Messages of warning and comfort to the Jews in their captivity.`,\r\n            value: \"Ezekiel\"\r\n        },\r\n        {\r\n            name: \"📜 Daniel\",\r\n            description: `Old Testament - A narrative of some of the occurrences of \r\n                            the captivity, and a series of prophecies concerning Christ.`,\r\n            value: \"Daniel\"\r\n        },\r\n        {\r\n            name: \"📜 Hosea\",\r\n            description: `Old Testament - Prophecies relating to Christ and the latter days.`,\r\n            value: \"Hosea\"\r\n        },\r\n        {\r\n            name: \"📜 Joel\",\r\n            description: `Old Testament - Prediction of woes upon Judah,`,\r\n            value: \"Joel\"\r\n        },\r\n        {\r\n            name: \"📜 Amos\",\r\n            description: `Old Testament - Prediction that Israel and other neighboring \r\n                        nations will be punished by conquerors from the north`,\r\n            value: \"Amos\"\r\n        },\r\n        {\r\n            name: \"📜 Obadiah\",\r\n            description: `Old Testament - Prediction of the desolation of Edom.`,\r\n            value: \"Obadiah\"\r\n        },\r\n        {\r\n            name: \"📜 Jonah\",\r\n            description: `Old Testament - Prophecies relating to Nineveh.`,\r\n            value: \"Jonah\"\r\n        },\r\n        {\r\n            name: \"📜 Micah\",\r\n            description: `Old Testament - Predictions relating to the invasions of \r\n                            Shalmaneser and Sennacherib, the Babylonish captivity.`,\r\n            value: \"Micah\"\r\n        },\r\n        {\r\n            name: \"📜 Nahum\",\r\n            description: `Old Testament - Prediction of the downfall of Assyria.`,\r\n            value: \"Nahum\"\r\n        },\r\n        {\r\n            name: \"📜 Habakkuk\",\r\n            description: `Old Testament - A prediction of the doom of the Chaldeans.`,\r\n            value: \"Habakkuk\"\r\n        },\r\n        {\r\n            name: \"📜 Zephaniah\",\r\n            description: `Old Testament - A prediction of the overthrow of Judah for \r\n                            its idolatry and wickedness.`,\r\n            value: \"Zephaniah\"\r\n        },\r\n        {\r\n            name: \"📜 Haggai\",\r\n            description: `Old Testament - Prophecies concerning the rebuilding of the temple.`,\r\n            value: \"Haggai\"\r\n        },\r\n        {\r\n            name: \"📜 Zechariah\",\r\n            description: `Old Testament - Prophecies relating to the rebuilding of the temple and the Messiah.`,\r\n            value: \"Zechariah\"\r\n        },\r\n        {\r\n            name: \"📜 Malachi\",\r\n            description: `Old Testament - Prophecies relating to the calling of the Gentiles \r\n                                and the coming of Christ.`,\r\n            value: \"Malachi\"\r\n        },\r\n        {\r\n            name: \"📜 Matthew\",\r\n            description: `New Testament - First of the four gospels, A brief history of the life of Christ.`,\r\n            value: \"Matthew\"\r\n        },\r\n        {\r\n            name: \"📜 Mark\",\r\n            description: `New Testament - Second of the four gospels, incluses incidents omitted by St. Matthew.`,\r\n            value: \"Mark\"\r\n        },\r\n        {\r\n            name: \"📜 Luke\",\r\n            description: `New Testament - Third of the four gospels, especial reference \r\n                        to His most important acts and discourses.`,\r\n            value: \"Luke\"\r\n        },\r\n        {\r\n            name: \"📜 John\",\r\n            description: `New Testament - Fourth of the four gospels, The life of Christ, \r\n                            giving important discourses not related by the other evangelists.`,\r\n            value: \"John\"\r\n        },\r\n        {\r\n            name: \"📜 Acts (of the Apostles)\",\r\n            description: `New Testament - The history of the labors of the apostles and \r\n                                of the foundation of the Christian Church.`,\r\n            value: \"Acts\"\r\n        },\r\n        {\r\n            name: \"📜 Romans\",\r\n            description: `New Testament - A treatise by St. Paul on the doctrine of justification by Christ.`,\r\n            value: \"Romans\"\r\n        },\r\n        {\r\n            name: \"📜 1 Corinthians\",\r\n            description: `New Testament - A letter from St. Paul to the Corinthians, correcting \r\n                                errors into which they had fallen.`,\r\n            value: \"1 Corinthians\"\r\n        },\r\n        {\r\n            name: \"📜 2 Corinthians\",\r\n            description: `New Testament - St. Paul confirms his disciples in their faith, \r\n                                and vindicates his own character.`,\r\n            value: \"2 Corinthians\"\r\n        },\r\n        {\r\n            name: \"📜 Galatians\",\r\n            description: `New Testament - St. Paul maintains that we are justified by faith, and not by rites.`,\r\n            value: \"Galatians\"\r\n        },\r\n        {\r\n            name: \"📜 Ephesians\",\r\n            description: `New Testament - A treatise by St. Paul on the power of divine grace.`,\r\n            value: \"Ephesians\"\r\n        },\r\n        {\r\n            name: \"📜 Philippians\",\r\n            description: `New Testament - St. Paul sets forth the beauty of Christian kindness.`,\r\n            value: \"Philippians\"\r\n        },\r\n        {\r\n            name: \"📜 Colossians\",\r\n            description: `New Testament - St. Paul warns his disciples against errors, and exhorts to certain duties.`,\r\n            value: \"Colossians\"\r\n        },\r\n        {\r\n            name: \"📜 1 Thessalonians\",\r\n            description: `New Testament - St. Paul exhorts his disciples to continue in \r\n                            the faith and in holy conversation.`,\r\n            value: \"1 Thessalonians\"\r\n        },\r\n        {\r\n            name: \"📜 2 Thessalonians\",\r\n            description: `New Testament - St. Paul corrects an error concerning the speedy \r\n                            coming of Christ the second time.`,\r\n            value: \"2 Thessalonians\"\r\n        },\r\n        {\r\n            name: \"📜 1 Timothy\",\r\n            description: `New Testament - St. Paul instructs Timothy in the duty of a pastor, \r\n                            and encourages him in the work of the ministry.`,\r\n            value: \"1 Timothy\"\r\n        },\r\n        {\r\n            name: \"📜 2 Timothy\",\r\n            description: `New Testament - St. Paul instructs Timothy in the duty of a pastor, \r\n                            and encourages him in the work of the ministry.`,\r\n            value: \"2 Timothy\"\r\n        },\r\n        {\r\n            name: \"📜 Titus\",\r\n            description: `New Testament - Epistle to Titus. St. Paul encourages Titus in the \r\n                            performance of his ministerial duties.`,\r\n            value: \"Titus\"\r\n        },\r\n        {\r\n            name: \"📜 Philemon\",\r\n            description: `New Testament - An appeal to a converted master to receive a converted \r\n                            escaped slave with kindness.`,\r\n            value: \"Philemon\"\r\n        },\r\n        {\r\n            name: \"📜 Hebrews\",\r\n            description: `New Testament - St. Paul maintains that Christ is the substance of the ceremonial law.`,\r\n            value: \"Hebrews\"\r\n        },\r\n        {\r\n            name: \"📜 James\",\r\n            description: `New Testament - A treatise on the efficacy of faith united with good works.`,\r\n            value: \"James\"\r\n        },\r\n        {\r\n            name: \"📜 1 Peter\",\r\n            description: `New Testament - Exhortations to a Christian life, with various warnings and predictions.`,\r\n            value: \"1 Peter\"\r\n        },\r\n        {\r\n            name: \"📜 2 Peter\",\r\n            description: `New Testament - Exhortations to a Christian life, with various warnings and predictions.`,\r\n            value: \"2 Peter\"\r\n        },\r\n        {\r\n            name: \"📜 1 John\",\r\n            description: `New Testament - Respecting the person of our Lord, and an \r\n                            exhortation to Christian love and conduct.`,\r\n            value: \"1 John\"\r\n        },\r\n        {\r\n            name: \"📜 2 John\",\r\n            description: `New Testament - St. John warns a converted lady against false teachers.`,\r\n            value: \"2 John\"\r\n        },\r\n        {\r\n            name: \"📜 3 John\",\r\n            description: `New Testament - A letter to Gaius, praising him for his hospitality.`,\r\n            value: \"3 John\"\r\n        },\r\n        {\r\n            name: \"📜 Jude\",\r\n            description: `New Testament - Epistle of St. Jude.\r\n                          Warnings against deceivers.`,\r\n            value: \"Jude\"\r\n        },\r\n        {\r\n            name: \"📜 Revelation\",\r\n            description: `New Testament - Final book in the Bible.\r\n                          The future of the Church foretold.`,\r\n            value: \"Revelation\"\r\n        }\r\n    ];\r\n}\r\n```","value":"https://github.com/johnlindquist/kit/discussions/698","img":"https://avatars.githubusercontent.com/u/6997529?u=3d91e8ea523b78a844f1f3974975b34684e4bc05&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/695","url":"https://github.com/johnlindquist/kit/discussions/695","title":"Grab Captions from Disney+","name":"Grab Captions from Disney+","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/695","createdAt":"2022-01-25T05:02:03Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOndy","body":"> 📝 Requires \"Allow JavaScript From Apple Events\" (see image at bottom)\r\n\r\nhttps://user-images.githubusercontent.com/36073/150913892-7fb80f2d-8ea9-4835-ad60-2bfe39f9916b.mp4\r\n\r\n\r\n[Open grab-caption in Script Kit](https://scriptkit.com/api/new?name=grab-caption&url=https://gist.githubusercontent.com/johnlindquist/b1d146e0308089002e2a48377af0e59d/raw/0697ca4ea5f67a5302279214b3dda002f9889a5c/grab-caption.ts\")\r\n\r\n```js\r\n// Name: Grab Caption\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\n// This query selector is specific to Disney plus\r\nlet js = `\r\n\r\nArray.from(document.querySelectorAll('.dss-subtitle-renderer-line')).map(el => el.innerText)\r\n\r\n`\r\n\r\nlet value = await applescript(`\r\ntell application \"Google Chrome\" to tell window 1\r\n\tset str to execute active tab javascript \"${js}\"\r\n\treturn str\r\nend tell\r\n`)\r\n\r\nawait div(md(`## ${value}`))\r\n\r\n// To copy to clipboard, use:\r\n// copy(value)\r\n```\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/36073/150914006-5f64c3e1-194a-48aa-807e-1c8370044c1f.png)\r\n","value":"https://github.com/johnlindquist/kit/discussions/695","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/3785596?u=da2515e92addbd3bd0ba679952401b4a49c61d09&v=4","user":"fbuys","author":"Francois","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/694","url":"https://github.com/johnlindquist/kit/discussions/694","title":"What time is it","name":"What time is it","extension":".md","description":"Created by fbuys","resourcePath":"/johnlindquist/kit/discussions/694","createdAt":"2022-01-21T21:11:23Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOk8p","body":"Here is my very first kit script.\r\n\r\nI made it in less than an hour.\r\n\r\nAny improvement ideas will be greatly appreciated.\r\n\r\n```\r\n// Name: What time is it\r\n// Description: View current time in a few timezones that I care about\r\n// Author: Francois Buys\r\n// Github: fbuys\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet estTime = await get(\"https://timeapi.io/api/Time/current/zone?timeZone=America/New_York\")\r\nlet baTime = await get(\"https://timeapi.io/api/Time/current/zone?timeZone=America/Argentina/Buenos_Aires\")\r\nlet brTime = await get(\"https://timeapi.io/api/Time/current/zone?timeZone=America/Sao_Paulo\")\r\n\r\nlet { format } = await npm(\"date-fns\")\r\n\r\nconst formatString = \"eeee, h:mm aaa\"\r\nconst local = format(new Date(), formatString)\r\nconst est = format(new Date(estTime.data[\"dateTime\"]), formatString)\r\nconst ba = format(new Date(baTime.data[\"dateTime\"]), formatString)\r\nconst br = format(new Date(brTime.data[\"dateTime\"]), formatString)\r\n\r\nawait div(`\r\n  <p>🇿🇦    &nbsp; My Time is <strong>${local}</strong></p>\r\n  <p>🇺🇸    &nbsp; Time in EST zone is <strong>${est}</strong></p>\r\n  <p>🇦🇷    &nbsp; Time in Argentina is <strong>${ba}</strong></p>\r\n  <p>🇧🇷    &nbsp; Time in Brazil is <strong>${br}</strong></p>\r\n`, 'p-10')\r\n\r\n```","value":"https://github.com/johnlindquist/kit/discussions/694","img":"https://avatars.githubusercontent.com/u/3785596?u=da2515e92addbd3bd0ba679952401b4a49c61d09&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/2995294?u=b757330296df6c0482bedf7d8000adaab4a24894&v=4","user":"joelgrimberg","author":"Joël Grimberg","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/692","url":"https://github.com/johnlindquist/kit/discussions/692","title":"Create Gitlab Boilerplate Repository","name":"Create Gitlab Boilerplate Repository","extension":".md","description":"Created by joelgrimberg","resourcePath":"/johnlindquist/kit/discussions/692","createdAt":"2022-01-20T19:02:33Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOjkq","body":"[Open boilerplate-gitlab in Script Kit](https://scriptkit.com/api/new?name=boilerplate-gitlab&url=https://gist.githubusercontent.com/joelgrimberg/4839ac89860519d965eebeaf1b798e94/raw/66c618730a8c238d66058d574eaae1e157c0d206/boilerplate-gitlab.js\")\r\n\r\n```js\r\n// Name: Gitlab\r\n// Menu: Gitlab Boilerplate Repository\r\n// Description: Create a new Gitlab repository\r\n// Shortcut: command option g\r\n// Author: Joël Grimberg\r\n// Twitter: @joelgrimberg\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport fs from \"fs\";\r\n\r\nconst filenamify = await npm(\"filenamify\");\r\n/** @type {typeof import(\"filenamify\")} */\r\n\r\nconst GITLAB_USER = await env(\r\n  \"GITLAB_USER\",\r\n  \"please enter your Gitlab username\"\r\n);\r\n\r\nconst GITLAB_AUTH_TOKEN = await env(\r\n  \"GITLAB_AUTH_TOKEN\",\r\n  \"please enter your Gitlab Auth token\"\r\n);\r\n\r\nconst GITLAB_BOILERPLATE_FOLDER = await env(\r\n  \"gitlabBoilerplateFolder\",\r\n  \"please enter the location you want to save your boilerplate folder\"\r\n);\r\n\r\nconst NPM_AUTHOR_NAME = await env(\r\n  \"NPM_AUTHOR_NAME\",\r\n  \"please enter your NPM author name\"\r\n);\r\n\r\nconst boilerplateProject = await arg({\r\n  pleaceholder: \"please enter the name of your project\",\r\n  hint: \"name of repository\",\r\n});\r\n\r\nconst project = filenamify(boilerplateProject);\r\n\r\nconst boilerplateDescription = await arg({\r\n  placeholder: `project description`,\r\n  hint: \"a description oneliner\",\r\n});\r\n\r\nconst pwd = `${GITLAB_BOILERPLATE_FOLDER}/${project}`;\r\n//TODO\r\nfs.mkdirSync(pwd);\r\ncd(pwd);\r\n\r\nawait $`npm init -y -init-author-name='${NPM_AUTHOR_NAME}'`;\r\n\r\nawait $`git init`;\r\n\r\nawait $`echo \"/node_modules\" > .gitignore`;\r\n\r\nawait $`npm install cypress --save-dev`;\r\n\r\nawait $`echo '\r\n  <h1 align=\"center\"><a href=\"https://blog.joelgrimberg.dev\">🚀 ${project}</a></h1>' > README.md`;\r\n\r\nawait $`git add .`;\r\n\r\nawait $`git commit -m 'initial commit'`;\r\n\r\nawait $`git remote add origin git@gitlab.com:${GITLAB_USER}/${project}.git`;\r\n\r\nawait $`curl --silent --header \"PRIVATE-TOKEN: ${GITLAB_AUTH_TOKEN}\" \\\r\n-XPOST \"https://gitlab.com/api/v4/projects?name=${project}&visibility=private&initialize_with_readme=false\" | jq '.id'`;\r\n\r\nawait $`git push --set-upstream origin main`;\r\n\r\nedit(`README.md`, pwd);\r\nbrowse(`https://gitlab.com/${GITLAB_USER}/${project}`);\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/692","img":"https://avatars.githubusercontent.com/u/2995294?u=b757330296df6c0482bedf7d8000adaab4a24894&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/2995294?u=b757330296df6c0482bedf7d8000adaab4a24894&v=4","user":"joelgrimberg","author":"Joël Grimberg","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/690","url":"https://github.com/johnlindquist/kit/discussions/690","title":"Create a Boilerplate Github Repository","name":"Create a Boilerplate Github Repository","extension":".md","description":"Created by joelgrimberg","resourcePath":"/johnlindquist/kit/discussions/690","createdAt":"2022-01-18T10:07:26Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOhgd","body":"I just created my first script with ScriptKit.\r\nThis script boilerplates a repo and pushes it to my GitHub account.\r\n\r\n[Open Boilerplate Repo in Script Kit](https://scriptkit.com/api/new?name=fade-video-clip&url=https://gist.github.com/joelgrimberg/c70d8c1272b0384d8c7501642e098cc7/boilerplate.js)\r\n\r\n\r\n\r\nthis is my 0.1 version, so still iterating.\r\n\r\n``` javascript\r\nimport \"@johnlindquist/kit\";\r\n\r\n// Menu: Boilerplate repository\r\n// Description: Create a new github repository\r\n// Shortcut: command option control b\r\n// Author: Joël Grimberg\r\n// Twitter: @joelgrimberg\r\n\r\nimport fs from \"fs\";\r\nconst open = await npm(\"open\");\r\n\r\nconst { Octokit } = await npm(\"@octokit/rest\");\r\nconst simpleGit = await npm(\"simple-git\");\r\n\r\nconst boilerplateFolder = await env(\r\n  \"BOILERPLATE_DIR\",\r\n  `What's the path to the boilerplate directory on this machine?`\r\n);\r\n\r\nconst githubAuthToken = await env(\r\n  \"githubAuthToken\",\r\n  `Please enter the GitHub token`\r\n);\r\n\r\nconst octokit = new Octokit({\r\n  auth: githubAuthToken,\r\n});\r\n\r\nconst project = await arg({\r\n  placeholder: `What is the name of the project?`,\r\n  hint: \"repo-name\",\r\n  ignoreBlur: true,\r\n});\r\n\r\nconst description = await arg({\r\n  placeholder: `What is the description of the project?`,\r\n  hint: \"description\",\r\n  ignoreBlur: true,\r\n});\r\n\r\noctokit.rest.repos.createForAuthenticatedUser({\r\n  name: project,\r\n});\r\n\r\nif (!fs.existsSync(boilerplateFolder)) {\r\n  fs.mkdirSync(boilerplateFolder);\r\n}\r\n\r\nconst pwd = `${boilerplateFolder}/${project}`;\r\nfs.mkdirSync(pwd);\r\n\r\nconst options = {\r\n  baseDir: pwd,\r\n  binary: \"git\",\r\n  maxConcurrentProcesses: 6,\r\n};\r\n\r\nconst git = simpleGit(options);\r\n\r\nawait git\r\n  .init()\r\n  .addRemote(\"origin\", `git@github.com:joelgrimberg/${project}.git`);\r\n\r\nawait $`cd ${pwd} && npm init -y -init-author-name='Joël Grimberg <joel@joelgrimberg.nl> (https://blog.joelgrimberg.dev)'`;\r\n\r\nawait $`cd ${pwd} && npm install cypress --save-dev`;\r\n\r\nawait $`cd ${pwd} && echo '\r\n  <h1 align=\"center\"><a href=\"https://blog.joelgrimberg.dev\">🚀 ${project}</a></h1>' > README.md`;\r\n\r\nawait $`cd ${pwd} && echo -n \"## ${description}\" >> README.md`;\r\n\r\nawait $`echo \"node_modules/\" > ${pwd}/.gitignore`;\r\n\r\nawait git.add(\".\").commit(\"initial commit\");\r\nawait $`cd ${pwd} && git push --set-upstream origin main`;\r\n\r\nedit(`${pwd}/README.md`, pwd);\r\nbrowse(`https://github.com/joelgrimberg/${project}`);\r\n```","value":"https://github.com/johnlindquist/kit/discussions/690","img":"https://avatars.githubusercontent.com/u/2995294?u=b757330296df6c0482bedf7d8000adaab4a24894&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/2262858?u=d02ad0d859aa1c3f879b70061bf7e4a4338ba150&v=4","user":"tayiorbeii","author":"Taylor Bell","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/689","url":"https://github.com/johnlindquist/kit/discussions/689","title":"Add a fade in and fade out transitions to video file","name":"Add a fade in and fade out transitions to video file","extension":".md","description":"Created by tayiorbeii","resourcePath":"/johnlindquist/kit/discussions/689","createdAt":"2022-01-13T20:07:37Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOfb1","body":"Select a video file in Finder, hit the shortcut, and this script will create a copy of the file with fade in and fade out transitions.\r\n\r\nRequires ffmpeg to be installed locally.\r\nSet `fadeLength` to a time in seconds of your choice.\r\n\r\n[Open fade-video-clip in Script Kit](https://scriptkit.com/api/new?name=fade-video-clip&url=https://gist.githubusercontent.com/tayiorbeii/4cfa685f68a306a3ea0c036a06999bff/raw/9804598bae8f844077e237d2c9d3e54afbe442c4/fade-video-clip.js\")\r\n\r\n```js\r\n// shortcut: opt+9\r\nimport \"@johnlindquist/kit\"\r\n    \r\n// Name: fade-video-clip\r\n\r\nlet fadeLength = 1.25\r\n\r\nlet videoFile = await getSelectedFile()\r\n\r\nlet basePath = await path.basename(videoFile)\r\n\r\nlet { stdout } = await exec(`ffprobe -loglevel error -show_entries format=duration -of default=nk=1:nw=1 \"${videoFile}\"`)\r\n\r\nlet totalDuration = stdout\r\n\r\nlet offset = totalDuration - fadeLength\r\n\r\nlet editedVideo = await exec(`ffmpeg -i \"${videoFile}\" -codec:v libx264 -crf 18 -filter_complex \"[0:v]fade=type=in:duration=${fadeLength},fade=type=out:duration=${fadeLength}:start_time='${offset}'[v];[0:a]afade=type=in:duration=${fadeLength},afade=type=out:duration=${fadeLength}:start_time='${offset}'[a]\" -map \"[v]\" -map \"[a]\" \"${videoFile}_fade.mp4\"`)\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/689","img":"https://avatars.githubusercontent.com/u/2262858?u=d02ad0d859aa1c3f879b70061bf7e4a4338ba150&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/6998954?u=78ef436473b15f90ae2a50e64883ebf39c0c1b1d&v=4","user":"M0nica","author":"Monica Powell","twitter":"indigitalcolor","discussion":"https://github.com/johnlindquist/kit/discussions/684","url":"https://github.com/johnlindquist/kit/discussions/684","title":"Open a Random Video from a Specific YouTube Channel","name":"Open a Random Video from a Specific YouTube Channel","extension":".md","description":"Created by M0nica","resourcePath":"/johnlindquist/kit/discussions/684","createdAt":"2022-01-09T18:38:37Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOdJ2","body":"\r\nI created a Script to open a random video from a specific YouTube Channel. The script prompts user for the name of the channel, uses the `scrapeSelector` to get videos from the channel and then selects a random one to open. \r\n\r\nhttps://user-images.githubusercontent.com/6998954/148695801-f5607143-265b-4fd5-aa48-de0182d36791.mov\r\n\r\n\r\n\r\nFuture enhancements: I'd like to add some error logging to help users if they enter an invalid channel name that returns a 404 or if a given channel exists but doesn't return any videos. I tried adding some console.logs but wasn't sure how to output helpful logs to ScriptKit users. \r\n\r\n```js\r\n// Name: Random Video From YouTube Channel\r\n// Description: Open a random video from a specific YouTube Channel\r\n// Author: Monica Powell\r\n// Twitter: @indigitalcolor\r\n// GitHub: @m0nica\r\n\r\n``\r\nimport \"@johnlindquist/kit\"\r\n\r\n\r\nlet channelName = await arg(\"YouTube Channel Name (e.g, yogawithadriene):\")\r\n\r\nlet videos = await scrapeSelector(\r\n    `https://www.youtube.com/c/${channelName}/videos`,\r\n    \"a#video-title\",\r\n    el => ({\r\n        name: el.innerText,\r\n        value: el.href,\r\n    })\r\n)\r\n\r\n\r\nlet randomVideo = videos[Math.floor(Math.random() * videos.length)]\r\n\r\nexec(`open \"${randomVideo.value}\"`)\r\n ```\r\n\r\nView gist: https://gist.github.com/M0nica/939bd4c3dfb2bf6fed08afb17ab16d19\r\n","value":"https://github.com/johnlindquist/kit/discussions/684","img":"https://avatars.githubusercontent.com/u/6998954?u=78ef436473b15f90ae2a50e64883ebf39c0c1b1d&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/12707591?u=f068eaa4c9452be71b91f518fe630be1de423c1c&v=4","user":"Pashtunzoy","author":"Asep Norzai","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/677","url":"https://github.com/johnlindquist/kit/discussions/677","title":"NASA's Astronomy Image Of The Day","name":"NASA's Astronomy Image Of The Day","extension":".md","description":"Created by Pashtunzoy","resourcePath":"/johnlindquist/kit/discussions/677","createdAt":"2022-01-03T09:42:30Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOaEO","body":"A simple script that shows you info about NASA's astronomy image of the day.\r\n\r\n[Open in ScriptKit](https://scriptkit.com/api/new?name=nasa-astronomy-pic-of-the-day&url=https://gist.githubusercontent.com/Pashtunzoy/e6cc24632eb237d3001df96c8253032d/raw/adc04ee8ccdaf4f726c1b300480da5a5bd03486e/nasa-astronomy-pic-of-the-day.js)\r\n\r\nExample:\r\n![nasa-astronomy-pic-of-the-day-500](https://user-images.githubusercontent.com/12707591/147915697-5744c6bf-e9a2-4d75-84de-ac88855754bc.png)\r\n\r\n\r\n## The Code:\r\n```js\r\n// Menu: NASA's Astronomy Picture of the Day\r\n// Description: Get NASA's APOTD\r\n// Suggested Schedule cron, run it everyday at 10AM local time: 0 10 * * *\r\n// Author: Asep Norzai\r\n// Twitter: @asepnorzai\r\n\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet {data: {copyright, date, explanation, title, hdurl}} = await get(`https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY`)\r\n\r\nshow(`\r\n\t<div style=\"padding: 1em\">\r\n\t\t<h1 style=\"text-align: center\">Astronomy Picture of the Day</h1>\r\n\t\t<p><strong>Title:</strong> <a href=\"https://apod.nasa.gov/apod/astropix.html\">${title}</a></p>\r\n\t\t<p><strong>Explanation:</strong> ${explanation}</p>\r\n\t\t<p><strong>Date:</strong> ${date}</p>\r\n\t\t<p><strong>Copyright:</strong> ${copyright}</p>\r\n\t\t<image src=\"${hdurl}\" style=\"margin-top: 0.5em\" title=\"${title}\"/>\r\n\t</div>`,\r\n{\r\n\ttitle,\r\n\twidth: 800,\r\n\theight: 1000\r\n})\r\n```\r\n\r\n## Extra Findings:\r\n\r\nI initially wanted to use `// Schedule: 0 10 * * *` to automatically show the image everyday, 10am local time, but somehow when opening the script through `https://scriptkit.com/api/new?name=`, the `schedule` value gets stripped off, leaving only `// Schedule:`?\r\nNot sure if it's a bug or by design?\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/677","img":"https://avatars.githubusercontent.com/u/12707591?u=f068eaa4c9452be71b91f518fe630be1de423c1c&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/802896?u=707947982c865b61061ff071b3d46b6b8725e260&v=4","user":"suniltaneja","author":"Sunil Taneja","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/676","url":"https://github.com/johnlindquist/kit/discussions/676","title":"Shortcut Runner for Mac OSX Monterey","name":"Shortcut Runner for Mac OSX Monterey","extension":".md","description":"Created by suniltaneja","resourcePath":"/johnlindquist/kit/discussions/676","createdAt":"2022-01-02T19:23:58Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOZ4o","body":"Shortcut Runner for Mac OSX Monterey\r\n\r\n[Install Shortcut runner for Mac OSX Monterey](https://scriptkit.com/api/new?name=shortcutrun&url=https://gist.githubusercontent.com/suniltaneja/b5755681d3da2fd2b7eacb44b70777ef/raw/01af76f2c96c54ec31457bd729211c6fc84a53a2/shortcutrun.js)\r\n\r\n```\r\n// Menu: Shortcut Run\r\n// Description: Shortcut runner for Mac OSX Monterey\r\n// Author: Sunil Taneja\r\n// Twitter: @suniltaneja\r\n\r\nimport \"@johnlindquist/kit\"\r\nconst list = await exec(`shortcuts list`)\r\nconst list_arr = list.stdout.split(\"\\n\")\r\nconst shortcut = await arg(\"Enter Shortcut\", list_arr)\r\nawait $`/usr/bin/shortcuts run ${shortcut}`\r\n```","value":"https://github.com/johnlindquist/kit/discussions/676","img":"https://avatars.githubusercontent.com/u/802896?u=707947982c865b61061ff071b3d46b6b8725e260&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/802896?u=707947982c865b61061ff071b3d46b6b8725e260&v=4","user":"suniltaneja","author":"Sunil Taneja","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/674","url":"https://github.com/johnlindquist/kit/discussions/674","title":"Stocks and ETF lookup","name":"Stocks and ETF lookup","extension":".md","description":"Created by suniltaneja","resourcePath":"/johnlindquist/kit/discussions/674","createdAt":"2021-12-30T19:03:17Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOZE_","body":"Stocks and ETF lookup -\r\n\r\nThis is a simple stock lookup script.\r\n\r\n[Open in Script Kit](https://scriptkit.com/api/new?name=stocks&url=https://gist.githubusercontent.com/suniltaneja/cdc153e687143a43b610f5fe97334450/raw/395040b18034df23fcba0fe56888defc317d967d/stocks.js)\r\n```js\r\nimport \"@johnlindquist/kit\";\r\n\r\n// Menu: Stock Quotes\r\n// Description: Get realtime stock or etf quotes\r\n// Author: Sunil Taneja\r\n// Twitter: @suniltaneja\r\n\r\nlet stocks_array = ['AAPL', 'GOOG', 'MSFT', 'TSM', 'NVDA']\r\nlet stocks_data = []\r\n\r\nconst transformSymbol = (response) => {\r\n  let stock = {}\r\n  stock.latestPrice = response.data.latestPrice\r\n  stock.change = response.data.change\r\n  stock.symbol = response.data.symbol\r\n  stock.high = response.data.high ? response.data.high : `NA`\r\n  stock.peRatio = response.data.peRatio ? response.data.peRatio : `NA`\r\n  return stock\r\n}\r\n\r\nfor await (let stock of stocks_array){\r\n  // free api provided by finaza.io\r\n  let query_url = `https://www.finaza.io/api/v1/quote?symbol=${stock.toUpperCase()}&key=scriptkit`\r\n  let response = await get(\r\n    query_url\r\n  );\r\n  stocks_data.push(transformSymbol(response))\r\n}\r\n\r\n\r\nlet url = await arg(\r\n  `Select Stock:`,\r\n  stocks_data.map((e) => {\r\n    return {\r\n      name: `${e.symbol} ($${e.latestPrice})`,\r\n      description: `Change: ${e.change} High: ${e.high} PE Ratio: ${e.peRatio}`,\r\n      value: `${e.symbol}`\r\n    }\r\n  }\r\n  )\r\n)\r\n\r\nawait $`open https://www.finaza.io/stocks/${url}`;\r\n```\r\n\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/674","img":"https://avatars.githubusercontent.com/u/802896?u=707947982c865b61061ff071b3d46b6b8725e260&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/2118956?u=dd12813efdeb91151f98fcecd5c078f29bed6ff9&v=4","user":"JCofman","author":"Jacob Cofman","twitter":"JCofman","discussion":"https://github.com/johnlindquist/kit/discussions/673","url":"https://github.com/johnlindquist/kit/discussions/673","title":"Translate Text using DeepL","name":"Translate Text using DeepL","extension":".md","description":"Created by JCofman","resourcePath":"/johnlindquist/kit/discussions/673","createdAt":"2021-12-28T13:02:12Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOYN5","body":"\r\n[Open deepl in Script Kit](https://scriptkit.com/api/new?name=deepl&url=https://gist.githubusercontent.com/JCofman/5e728d809d54f1f67249668c07fb205f/raw/e34a8588040fa496e85c8a0d962ecee3d35453d9/deepl.js\")\r\n\r\n```js\r\n// Name: DeepL\r\n// Author: Jacob Cofman\r\n// Twitter: @jcofman\r\n// Description: Translates text using https://www.deepl.com/translator\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet DEEPL_AUTH_KEY = await env(\"DEEPL_AUTH_KEY\", {\r\n    hint: md(\r\n      `Get a [DeepL API Key](https://www.deepl.com/docs-api/accessing-the-api/)`\r\n    ),\r\n    ignoreBlur: true,\r\n    secret: true,\r\n  })\r\n\r\nlet text = await getSelectedText();\r\n\r\nlet targetLanguage = await arg(\"Select a traget Language e.g: DE or EN\")\r\n\r\nlet response = await post(\r\n  `https://api-free.deepl.com/v2/translate?auth_key=${DEEPL_AUTH_KEY}&text=${text}&target_lang=${targetLanguage}`\r\n)\r\n\r\nsetSelectedText(response.data.translations[0].text)\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/673","img":"https://avatars.githubusercontent.com/u/2118956?u=dd12813efdeb91151f98fcecd5c078f29bed6ff9&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/13627431?u=92a4e656c7fc2a7ad2a019df5051a65f082d470e&v=4","user":"atej","author":"Aseem Taneja","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/672","url":"https://github.com/johnlindquist/kit/discussions/672","title":"Turn any page into an API","name":"Turn any page into an API","extension":".md","description":"Created by atej","resourcePath":"/johnlindquist/kit/discussions/672","createdAt":"2021-12-26T07:44:50Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOXeI","body":"Find yourself visiting a page often just to see what's new?\r\n\r\nThe `list` helper gets you the latest posts right within the Kit app.\r\n\r\n## Get Started\r\n\r\n### Install\r\nIn your `~/.kenv`: `npm install @aseemtaneja/kit-list`\r\n\r\n### API-fy a page\r\nStep 1: Go to the page  \r\nStep 2: Open up the Elements tab in Dev Tools and gather the required CSS selectors  \r\nStep 3: Make a script and you're done  \r\n\r\nFor example, the following script allows you to browse Frontend Masters courses:\r\n```javascript\r\n// Name: Frontend Masters\r\n// Description: Browse courses from frontendmasters.com\r\n// Author: Aseem Taneja\r\n// Twitter: @aseemtaneja\r\n\r\nimport '@johnlindquist/kit';\r\nconst list = await npm('@aseemtaneja/kit-list');\r\n\r\nconst { choices } = await list('https://frontendmasters.com/courses/', {\r\n        containerSelector: '.MediaItem',\r\n        hrefSelector: 'h2 a',\r\n        descriptionSelector: '.description',\r\n        metaSelector: '.Instructor .name',\r\n      });\r\n\r\nconst itemUrl = await arg('Go to', choices);\r\n\r\nawait $`open ${itemUrl}`;\r\n```\r\n\r\nTo see everything you can do  👉🏽 [View the docs on GitHub](https://github.com/atej/kit-list/)","value":"https://github.com/johnlindquist/kit/discussions/672","img":"https://avatars.githubusercontent.com/u/13627431?u=92a4e656c7fc2a7ad2a019df5051a65f082d470e&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/602300?u=829729de725990e263a945fc10044b989c8558a1&v=4","user":"altrim","author":"Altrim Beqiri","twitter":"altrimbeqiri","discussion":"https://github.com/johnlindquist/kit/discussions/671","url":"https://github.com/johnlindquist/kit/discussions/671","title":"Code Snippets","name":"Code Snippets","extension":".md","description":"Created by altrim","resourcePath":"/johnlindquist/kit/discussions/671","createdAt":"2021-12-24T19:09:09Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOXK1","body":"\r\nA script to easily organize and use your code snippets. Creates a snippet from the contents of the clipboard.\r\n\r\n[Open code-snippets in Script Kit](https://scriptkit.com/api/new?name=code-snippets&url=https://gist.githubusercontent.com/altrim/547fa58073351c0392c0cac76d183b6c/raw/673c7ec92bf7cf692a7aed45f346ece3c9cfe0c1/code-snippets.ts\")\r\n\r\nhttps://user-images.githubusercontent.com/602300/147369687-4b396dee-b3c8-414d-97ae-0766c6ce7896.mp4\r\n\r\n\r\n```js\r\nimport \"@johnlindquist/kit\";\r\n\r\n// Menu: Code Snippets\r\n// Description: Easily organize your code snippets\r\n// Author: Altrim Beqiri\r\n// Twitter: @altrimbeqiri\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst wrapCode = (html: string) => `<pre class=\"px-4\">\r\n<style type=\"text/css\">\r\n  code {\r\n    font-size: 0.75rem !important;\r\n    width: 100%;\r\n    white-space: pre-wrap;\r\n  }\r\n  pre {\r\n    display: flex;\r\n  }\r\n  p {\r\n    margin-bottom: 1rem;\r\n  }\r\n</style>\r\n  <code>\r\n${html.trim()}\r\n  </code>\r\n</pre>`;\r\n\r\nconst highlightCode = async ({ contents, language }): Promise<string> => {\r\n  const { default: highlight } = await npm(\"highlight.js\");\r\n  let highlightedContents = language\r\n    ? highlight.highlight(contents, { language }).value\r\n    : highlight.highlightAuto(contents).value;\r\n\r\n  return wrapCode(highlightedContents);\r\n};\r\n\r\ninterface Snippet {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  language?: string;\r\n  html?: any;\r\n  code?: any;\r\n  preview?: any;\r\n}\r\n\r\nconst { snippets, write }: { snippets: Snippet[]; write: any } = await db(\"code-snippets-db\", {\r\n  snippets: [],\r\n});\r\n\r\nconst onNoChoices = async (input) => {\r\n  if (input) {\r\n    setPanel(\r\n      md(`## Creating snippet <code>${input}</code>\r\n    \r\nCreates a new code snippet with the contents of the clipboard.`)\r\n    );\r\n  } else {\r\n    setPlaceholder(`Enter a snippet name`);\r\n  }\r\n};\r\n\r\nconst onChoices = async () => {\r\n  setPanel(``);\r\n};\r\n\r\nconst loadSnippets = async () => {\r\n  try {\r\n    return snippets.map((snippet) => {\r\n      snippet.preview = async () => {\r\n        if (snippet?.code) {\r\n          return await highlightCode({ contents: snippet?.code, language: snippet?.language });\r\n        }\r\n\r\n        return \"\";\r\n      };\r\n\r\n      return snippet;\r\n    });\r\n  } catch (error) {\r\n    return [error.message];\r\n  }\r\n};\r\n\r\nconst config = {\r\n  placeholder: \"Set snippet name\",\r\n  strict: false,\r\n  onChoices,\r\n  onNoChoices,\r\n  flags: {\r\n    rename: {\r\n      name: \"Description\",\r\n      description: \"Set a description for the selected script\",\r\n    },\r\n    language: {\r\n      name: \"Language\",\r\n      description: \"Set code language for the selected script\",\r\n    },\r\n  },\r\n};\r\n\r\nconst addSnippet = async () => {\r\n  const snippet: Snippet | string = await arg(config, await loadSnippets());\r\n\r\n  if (typeof snippet === \"string\") {\r\n    const clipboard = await paste();\r\n\r\n    snippets.push({\r\n      id: uuid(),\r\n      name: snippet,\r\n      code: clipboard.trim(),\r\n    });\r\n\r\n    await write();\r\n    await addSnippet();\r\n  } else if (snippet?.id) {\r\n    const foundSnippet = snippets.find((s) => s?.id === snippet.id);\r\n\r\n    if (flag?.rename) {\r\n      const description = await arg(\"Enter Description\");\r\n      foundSnippet.description = description;\r\n      await write();\r\n      await addSnippet();\r\n    }\r\n\r\n    if (flag?.language) {\r\n      const language = await arg(\"Enter Code Language\");\r\n      foundSnippet.language = language;\r\n      await write();\r\n      await addSnippet();\r\n    }\r\n\r\n    await setSelectedText(foundSnippet.code);\r\n  }\r\n};\r\n\r\nconst removeSnippet = async () => {\r\n  const snippet: Snippet = await arg(\"Remove snippet\", snippets);\r\n  const index = snippets.findIndex((s) => s?.id === snippet.id);\r\n  if (index > -1) {\r\n    snippets.splice(index, 1);\r\n  }\r\n  await write();\r\n  await removeSnippet();\r\n};\r\n\r\nonTab(\"Snippets\", addSnippet);\r\nonTab(\"Remove\", removeSnippet);\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/671","img":"https://avatars.githubusercontent.com/u/602300?u=829729de725990e263a945fc10044b989c8558a1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/25487857?u=1c81cf15334c751c49f61fe7e0e84b0618eb0e0e&v=4","user":"vojtaholik","author":"Vojta Holik","twitter":"vjthlk","discussion":"https://github.com/johnlindquist/kit/discussions/670","url":"https://github.com/johnlindquist/kit/discussions/670","title":"Compress images using imagemin","name":"Compress images using imagemin","extension":".md","description":"Created by vojtaholik","resourcePath":"/johnlindquist/kit/discussions/670","createdAt":"2021-12-24T12:50:49Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOXFH","body":"[Open compress-images in Script Kit](https://scriptkit.com/api/new?name=compress-images&url=https://gist.githubusercontent.com/vojtaholik/1d37868f34c7686e4062a49c21a18dbb/raw/d9874dc3b6a0ecab7df9c1f8c7e8c9df838d2893/compress-images.js\") \r\n\r\n```js \r\n// Menu: Compress Images\r\n// Description: Compress images using imagemin\r\n// Author: Vojta Holik\r\n// Twitter: @vjthlk\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nlet imagemin = await npm(\"imagemin\");\r\nlet imageminJpegtran = await npm(\"imagemin-jpegtran\");\r\nlet imageminJpegRecompress = await npm(\"imagemin-jpeg-recompress\");\r\nlet imageminPngquant = await npm(\"imagemin-pngquant\");\r\nlet imageminSvgo = await npm(\"imagemin-svgo\");\r\nlet imageminGifsicle = await npm(\"imagemin-gifsicle\");\r\n\r\nlet selectedFiles = await getSelectedFile();\r\nlet filePaths;\r\n\r\nif (selectedFiles) {\r\n  filePaths = selectedFiles.split(\"\\n\");\r\n} else {\r\n  let droppedFiles = await drop({ placeholder: \"Drop images to compress\" });\r\n  filePaths = droppedFiles.map((file) => file.path);\r\n}\r\n\r\nfor (let filePath of filePaths) {\r\n  let directory = path.dirname(filePath);\r\n  await imagemin([filePath], {\r\n    destination: directory,\r\n    plugins: [\r\n      imageminJpegtran({\r\n        arithmetic: true,\r\n        progressive: true,\r\n      }),\r\n      imageminJpegRecompress({ max: 85 }),\r\n      imageminSvgo(),\r\n      imageminGifsicle({\r\n        optimizationLevel: 2,\r\n      }),\r\n      imageminPngquant({\r\n        quality: [0.3, 0.5],\r\n      }),\r\n    ],\r\n  });\r\n}\r\n\r\n```","value":"https://github.com/johnlindquist/kit/discussions/670","img":"https://avatars.githubusercontent.com/u/25487857?u=1c81cf15334c751c49f61fe7e0e84b0618eb0e0e&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/669","url":"https://github.com/johnlindquist/kit/discussions/669","title":"Script Kit for Linux - Developer Preview","name":"Script Kit for Linux - Developer Preview","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/669","createdAt":"2021-12-24T08:15:12Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4AOXBA","body":"# Script Kit for Linux - Developer Preview\r\n\r\n## Why \"Developer Preview\"\r\n\r\n1. Building from the \"Mac\" source\r\n\r\nCurrently, the Linux build builds from the exact same branch as the Mac build. While this works fine, for now, we'll want two separate release cadences and feature sets. This could be done through a branch, but then I'd have to set up a new release server. I'll figure it out details next year.\r\n\r\n2. The Linux build is missing all the OS-specific tools\r\n\r\nLinux currently doesn't support `getSelectedText`, `getTabs`, and other utils that are written in AppleScript. I'm planning to tackle many of those utils in Rust, which theoretically should allow them to be cross-platform, but that's another task for next year.\r\n\r\n3. I've Only Tested on Ubuntu through a Parallels vm\r\n\r\nObviously will need some more real-world testing.\r\n\r\n## Where to Download\r\n\r\nDownload the AppImage here:\r\nhttps://github.com/johnlindquist/kitapp/releases/tag/v1.5.1","value":"https://github.com/johnlindquist/kit/discussions/669","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1434873?v=4","user":"phollome","author":"Peter Holló","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/666","url":"https://github.com/johnlindquist/kit/discussions/666","title":"Open Browser in incognito mode","name":"Open Browser in incognito mode","extension":".md","description":"Created by phollome","resourcePath":"/johnlindquist/kit/discussions/666","createdAt":"2021-12-21T10:30:18Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOVpb","body":"Opens the selected browser in incognito mode and reuses your choice. Run the script with <kbd>cmd</kbd>+<kbd>Return</kbd> to reset your choice.\r\n\r\n[Open incognito-browser in Script Kit](https://scriptkit.com/api/new?name=incognito-browser&url=https://gist.githubusercontent.com/phollome/6d09cba387703dd8d7b42137fb2e4b7f/raw/d41602bf048888554a3e51fdc448c6dd62479faa/incognito-browser.js\")\r\n\r\n```js\r\n// Menu: Incognito Browser\r\n// Description: Open your favorite browser in incognito/private mode\r\n// Author: Peter Holló\r\n// Log: false\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst listOfBrowsers = [\r\n  {\r\n    name: \"[F]irefox\",\r\n    description: 'Opens Firefox with the \"-private-window\" flag',\r\n    value: \"Firefox\",\r\n    path: \"Firefox.app\",\r\n    command: 'open -na \"Firefox\" --args -private-window',\r\n  },\r\n  {\r\n    name: \"[B]rave\",\r\n    description: 'Opens Brave with the \"-incognito\" flag',\r\n    value: \"Brave\",\r\n    path: \"Brave Browser.app\",\r\n    command: 'open -na \"Brave Browser\" --args -incognito',\r\n  },\r\n  {\r\n    name: \"[S]afari\",\r\n    description: \"Runs an Apple Script which emulates key press\",\r\n    value: \"Safari\",\r\n    path: \"Safari.app\",\r\n    command: `\r\n      tell application \"Safari\"\r\n        activate\r\n        tell application \"System Events\"\r\n          keystroke \"n\" using {command down, shift down}\r\n        end tell\r\n      end tell`,\r\n  },\r\n  {\r\n    name: \"[C]hrome\",\r\n    description: 'Opens Chrome with the \"-incognito\" flag',\r\n    value: \"Chrome\",\r\n    path: \"Google Chrome.app\",\r\n    command: 'open -na \"Google Chrome\" --args -incognito',\r\n  },\r\n  {\r\n    name: \"[O]pera\",\r\n    description: 'Opens Opera with the \"-private\" flag',\r\n    value: \"Opera\",\r\n    path: \"Opera.app\",\r\n    command: 'open -na \"Opera\" --args -private',\r\n  },\r\n  {\r\n    name: \"[E]dge\",\r\n    description: 'Opens Edge with the \"-inprivate\" flag',\r\n    value: \"Edge\",\r\n    path: \"Microsoft Edge.app\",\r\n    command: 'open -na \"Microsoft Edge\" --args -inprivate',\r\n  },\r\n];\r\n\r\nasync function getFavoriteBrowser(availableBrowsers) {\r\n  const listOfAvailableBrowsers = listOfBrowsers.filter((browser) => {\r\n    const isBrowserAvailable = availableBrowsers.some(\r\n      (item) => item === browser.value\r\n    );\r\n    return isBrowserAvailable;\r\n  });\r\n  const selectedBrowser = await arg(\r\n    {\r\n      placeholder: \"Select a your favorite browser\",\r\n      hint: \"Press first letter for quick select\",\r\n    },\r\n    {\r\n      choices: listOfAvailableBrowsers,\r\n    }\r\n  );\r\n  return selectedBrowser;\r\n}\r\n\r\nconst data = await db({\r\n  availableBrowsers: [],\r\n});\r\n\r\nif (data.availableBrowsers.length === 0) {\r\n  for (let i = 0, length = listOfBrowsers.length; i < length; i++) {\r\n    const available = await isDir(`/Applications/${listOfBrowsers[i].path}`);\r\n    if (available) {\r\n      data.availableBrowsers.push(listOfBrowsers[i].value);\r\n    }\r\n  }\r\n  await data.write();\r\n}\r\n\r\nif (data.availableBrowsers.length === 0) {\r\n  const browserNames = listOfBrowsers.map((browser) => {\r\n    return browser.value;\r\n  });\r\n\r\n  await div(\r\n    `\r\n    <div class=\"p-4 font-mono text-sm\">\r\n      <p class=\"pb-2\">\r\n          No supported browser found!😬\r\n      </p>\r\n      <p>\r\n        Supported browsers are: ${browserNames.join(\", \")}.\r\n      <p>\r\n    </div>\r\n    `\r\n  );\r\n}\r\n\r\nconst favoriteBrowser = await env(\"FAVORITE_BROWSER\", {\r\n  reset: flag?.cmd,\r\n  choices: getFavoriteBrowser.bind(null, data.availableBrowsers),\r\n});\r\n\r\nconst { command } = listOfBrowsers.find((browser) => {\r\n  return browser.value === favoriteBrowser;\r\n});\r\n\r\nif (favoriteBrowser === \"Safari\") {\r\n  await applescript(command);\r\n} else {\r\n  await exec(command);\r\n}\r\n\r\n```\r\n\r\n## Initial description\r\nTo start writing scripts for this awesome tool I wanted to migrate an Alfred workflow I wrote ([alfred-incognito-browser\r\n](https://github.com/phollome/alfred-incognito-browser)). What I appreciate on this workflow is that it enhances the application launch feature of Alfred with the option to open your browser in incognito mode. Maybe launching an application could be a top level feature instead of being a single script?\r\n\r\nI would love get some feedback. I know there is some room for improvements (eg. the Safari script).\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/666","img":"https://avatars.githubusercontent.com/u/1434873?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/15220184?u=3a0ef6d8df198c1b1397c353a09113b144faf895&v=4","user":"blackhaj","author":"Henry Black","twitter":"HAJBlack","discussion":"https://github.com/johnlindquist/kit/discussions/664","url":"https://github.com/johnlindquist/kit/discussions/664","title":"A simple JSON formatter","name":"A simple JSON formatter","extension":".md","description":"Created by blackhaj","resourcePath":"/johnlindquist/kit/discussions/664","createdAt":"2021-12-20T17:47:56Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOVX-","body":"Hey folks - I made a little JSON formatter (my first attempt at a script)\r\n\r\nIt does the following:\r\n\r\nGrabs the latest item on your clipboard\r\nFormats it using prettier (this will have to install on your first time running the script)\r\nCopies the formatted JSON to your clipboard\r\nSuper simple but hopefully useful.\r\n\r\n[Open json-formatter in Script Kit](https://scriptkit.com/api/new?name=json-formatter&url=https://gist.githubusercontent.com/blackhaj/6651f50c6755db63e25f09f5cb9fbcaf/raw/c8a05d7266d46795d341dd4772bf9a3ad8e000c2/json-formatter.js\")\r\n\r\n```js\r\nimport '@johnlindquist/kit';\r\n\r\nconst prettier = await npm('prettier');\r\n\r\n// Name: json-formatter\r\n// Author: Henry Black\r\n// Twitter: @hajblack\r\n\r\nconst unformattedJson = await paste();\r\n\r\nlet result;\r\n\r\ntry {\r\n  result = await prettier.format(unformattedJson, {\r\n    parser: 'json',\r\n  });\r\n  await copy(result);\r\n} catch (err) {\r\n  arg(\"Couldn't format that string: \" + err);\r\n}\r\n\r\n```\r\n\r\nAny feedback very welcome - this is my first script on ScriptKit so I would love any pointers.","value":"https://github.com/johnlindquist/kit/discussions/664","img":"https://avatars.githubusercontent.com/u/15220184?u=3a0ef6d8df198c1b1397c353a09113b144faf895&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/2678610?u=baddd0d28f54963a735b44c84f585f07811662ba&v=4","user":"ValentinH","author":"Valentin Hervieu","twitter":"ValentinHervieu","discussion":"https://github.com/johnlindquist/kit/discussions/663","url":"https://github.com/johnlindquist/kit/discussions/663","title":"Create new Google Meet and share URL on Slack","name":"Create new Google Meet and share URL on Slack","extension":".md","description":"Created by ValentinH","resourcePath":"/johnlindquist/kit/discussions/663","createdAt":"2021-12-20T16:17:55Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOVVn","body":"A simple script to create a new Google Meet and paste the generated URL on the current Slack chat.\r\n\r\n[Open meet in Script Kit](https://scriptkit.com/api/new?name=meet&url=https://gist.githubusercontent.com/ValentinH/9d2b6c1525f1eed38e6af964bad22406/raw/006894bf2da7b5b84d3afdc8fc08553eec26c136/meet.ts\")\r\n\r\n```js\r\n// Menu: Meet\r\n// Description: Start new meet and paste on Slack\r\n// Author: Valentin Hervieu\r\n// Twitter: @ValentinHervieu\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nbrowse('https://meet.new')\r\nlet count = 1\r\nlet tab = ''\r\n\r\nwhile (count < 20) {\r\n  await wait(500)\r\n  tab = await getActiveTab(\"Brave\")\r\n  if (!tab.startsWith('https://meet.google.com/new') && !tab.startsWith('https://meet.new')) break\r\n  count += 1\r\n}\r\n\r\ntab = tab.split('?')[0]\r\n\r\nawait copy(tab)\r\nawait focusWindow('Slack', '')\r\nawait setSelectedText(tab)\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/663","img":"https://avatars.githubusercontent.com/u/2678610?u=baddd0d28f54963a735b44c84f585f07811662ba&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/655","url":"https://github.com/johnlindquist/kit/discussions/655","title":"🥳  Script Kit Launch Day 🎉","name":"🥳  Script Kit Launch Day 🎉","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/655","createdAt":"2021-12-17T18:33:08Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4AOUTd","body":"# Script Kit is Officially Released! 🎉\r\n\r\nDownload now from https://scriptkit.com\r\n\r\n## Free Script Kit Course on [egghead.io](https://egghead.io)\r\n\r\nTo help you get started, I put together a short course as a feature tour:\r\n\r\nhttps://egghead.io/courses/script-kit-showcase-for-optimizing-your-everyday-workflows-e20ceab4\r\n\r\nIf you've been using Script Kit for a while on the beta, you know it can do much, much more than what's shown in the lessons, but everyone has to start somewhere. Speaking of the beta...\r\n\r\n## Beta Channel Discontinued\r\n\r\nIf you installed the beta, please download from https://scriptkit.com, quit Kit.app, and replace with the new version. This will put you on the “Main” channel. Updates will be ~monthly. The beta channel is discontinued ❗️\r\n\r\nAlso, thank you so, so much for all your feedback and patience with updates over the past year. You’ve really helped make Script Kit what it is today and I’m forever grateful 🙏\r\n\r\n## Windows Developer Preview\r\n\r\nThe details for the Windows build are found here: https://github.com/johnlindquist/kit/discussions/654\r\n\r\n## Plans for 2022\r\n\r\n1. Make the dev setup more contribution-friendly. I would love to accept PRs later next year.\r\n2. Get the Windows build to parity with Mac.\r\n3. Lots of lessons and scripts. I can finally spend more time sharing scripts than working on the app 😎\r\n4. Research into Rust, runtimes, and utilities that can provide any benefit to making our scripts better.\r\n5. Focus on \"export to serverless function\", \"export as github action\", and other ways to maximize the work you put into your scripts.\r\n5. Script Kit Pro. A paid version with additional features not found in the base version. Not ready to talk about it, but it's exciting!\r\n","value":"https://github.com/johnlindquist/kit/discussions/655","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/654","url":"https://github.com/johnlindquist/kit/discussions/654","title":"Script Kit for Windows - Developer Preview","name":"Script Kit for Windows - Developer Preview","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/654","createdAt":"2021-12-17T15:06:29Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4AOUJx","body":"# Script Kit for Windows - Developer Preview\r\n\r\n## Why \"Developer Preview\"\r\n\r\n1. I haven't bought a certificate to add to the build:\r\n- You'll see many \"untrusted\" warnings when downloading/installing\r\n- Auto-updating will not work\r\n\r\n2. I haven't decided if the Windows repo will be a fork, branch, or main\r\n\r\nCurrently, the Windows build builds from the exact same branch as the Mac build. While this works fine, for now, I'm pretty sure we'll want two separate release cadences and feature sets. This could be done through a branch, but then I'd have to set up a new release server. I'll figure it out the details next year.\r\n\r\n3. The Windows build is missing all the OS-specific tools\r\n\r\nWindows currently doesn't support `getSelectedText`, `getTabs`, and other utils that are written in AppleScript. I'm planning to tackle many of those utils in Rust, which theoretically should allow them to be cross-platform, but that's another task for next year.\r\n\r\n4. I've Only Tested It on Two Laptops\r\n\r\nThe Mac version has been used/tested by many, many people. I have two Windows laptops at home to test it on. It works well, but I don't know how much your mileage will vary.\r\n\r\n## Where to Download\r\n\r\nDownload the  installer here:\r\nhttps://github.com/johnlindquist/kitapp/releases/tag/v1.5.1\r\n\r\nAgain, this build will not auto-update. I'll post announcements here when new versions are available and you'll have to download the new version each time until I have the certificate and release servers worked out. Honestly, I'll probably write a \"check for Windows update and download\" script then you can just run that on a `// Schedule: 0 8 * * *` 😉","value":"https://github.com/johnlindquist/kit/discussions/654","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/602300?u=829729de725990e263a945fc10044b989c8558a1&v=4","user":"altrim","author":"Altrim Beqiri","twitter":"altrimbeqiri","discussion":"https://github.com/johnlindquist/kit/discussions/639","url":"https://github.com/johnlindquist/kit/discussions/639","title":"Translate Image","name":"Translate Image","extension":".md","description":"Created by altrim","resourcePath":"/johnlindquist/kit/discussions/639","createdAt":"2021-12-06T19:33:53Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AONt1","body":"Simple script to translate the text found on a selected image. It uses Google Cloud vision and translation apis. \r\nTo set it up locally you need to authenticate to Google Cloud API https://cloud.google.com/docs/authentication/getting-started\r\n\r\n[Install translate-image](https://scriptkit.com/api/new?name=translate-image&url=https://gist.githubusercontent.com/altrim/7c3f8de0a05375c48a4f9e2aad6e3def/raw/93d43dac52135e1154606b5898dc52c3e312a375/translate-image.ts\")\r\n\r\nhttps://user-images.githubusercontent.com/602300/144909681-71e31270-b542-4c96-b1a6-7e00c4280f26.mp4\r\n\r\n```js\r\nimport \"@johnlindquist/kit\";\r\n// Menu: Translate Image\r\n// Description: Translate text extracted from a selected image\r\n// Author: Altrim Beqiri\r\n// Twitter: @altrimbeqiri\r\n\r\nconst vision = await npm(\"@google-cloud/vision\");\r\nconst gtranslate = await npm(\"@google-cloud/translate\");\r\nconst { Translate } = gtranslate.v2;\r\n\r\nconst client = new vision.ImageAnnotatorClient();\r\nconst translate = new Translate();\r\n\r\nconst extractText = async (): Promise<string> => {\r\n  const file = await getSelectedFile();\r\n  const [result] = await client.textDetection(file);\r\n  return result.fullTextAnnotation.text;\r\n};\r\n\r\nconst translateText = async (text: string) => {\r\n  let [translations] = await translate.translate(text, \"en\");\r\n  translations = Array.isArray(translations) ? translations : [translations];\r\n  return translations.join(\" \");\r\n};\r\n\r\ndiv(md(\"Extracting and Translating...\"));\r\nconst text = await extractText();\r\nconst translation = await translateText(text);\r\n\r\nshow(\r\n  `\r\n<div>\r\n  <div class=\"max-w-2xl mx-auto sm:px-6 lg:px-8 text-gray-800 bg-white\">\r\n    <div class=\"overflow-hidden shadow-md\">\r\n      <div class=\"px-6 py-4 border-b border-gray-200 font-bold\">Extracted Text</div>\r\n      <div class=\"p-6 border-b border-gray-200\">${text}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"max-w-2xl mx-auto sm:px-6 lg:px-8 text-gray-800 bg-white\">\r\n    <div class=\"overflow-hidden shadow-md\">\r\n      <div class=\"px-6 py-4 border-b border-gray-200 font-bold\">Translation</div>\r\n      <div class=\"p-6 border-b border-gray-200\">${translation}</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n`,\r\n  { width: 640, height: 420, transparent: true }\r\n);\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/639","img":"https://avatars.githubusercontent.com/u/602300?u=829729de725990e263a945fc10044b989c8558a1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/602300?u=829729de725990e263a945fc10044b989c8558a1&v=4","user":"altrim","author":"Altrim Beqiri","twitter":"altrimbeqiri","discussion":"https://github.com/johnlindquist/kit/discussions/635","url":"https://github.com/johnlindquist/kit/discussions/635","title":"Speed Test","name":"Speed Test","extension":".md","description":"Created by altrim","resourcePath":"/johnlindquist/kit/discussions/635","createdAt":"2021-12-03T21:06:36Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOMrV","body":"\r\n[Install speed-test](https://scriptkit.com/api/new?name=speed-test&url=https://gist.githubusercontent.com/altrim/42c80c208d129534b6dfde79df32db9e/raw/741eaf89114e64b34ab5cc6cc62bb5f221672319/speed-test.ts\")\r\n\r\nWas playing around with live data update on panels and wanted to see how one can customise the show() panel a bit, so I wrote this script to check internet download/upload speed.\r\n\r\nhttps://user-images.githubusercontent.com/602300/144672001-fff14bd5-e08a-4aa2-a98c-b0e742cb1547.mp4\r\n\r\n```js\r\nimport \"@johnlindquist/kit\";\r\n\r\n// Menu: Speed Test\r\n// Description: Test the speed and performance of your internet connection\r\n// Author: Altrim Beqiri\r\n// Twitter: @altrimbeqiri\r\n\r\nconst speedTest = await npm(\"speedtest-net\");\r\n\r\ninterface SpeedTestResult {\r\n  timestamp: Date;\r\n  ping: { jitter: number; latency: number };\r\n  download: { bandwidth: number; bytes: number; elapsed: number };\r\n  upload: { bandwidth: number; bytes: number; elapsed: number };\r\n  packetLoss: number;\r\n  isp: string;\r\n  interface: {\r\n    internalIp: string;\r\n    name: string;\r\n    macAddr: string;\r\n    isVpn: boolean;\r\n    externalIp: string;\r\n  };\r\n  server: {\r\n    id: number;\r\n    name: string;\r\n    location: string;\r\n    country: string;\r\n    host: string;\r\n    port: number;\r\n    ip: string;\r\n  };\r\n  result: {\r\n    id: string;\r\n    url: string;\r\n  };\r\n}\r\n\r\nconst progressPanelInfo = ({ downloadSpeed = 0, uploadSpeed = 0 }: { downloadSpeed: number; uploadSpeed: number }) => {\r\n  return `\r\n  <div class=\"flex flex-col p-4\">\r\n    <p class=\"mb-2 text-xl font-mono text-center text-yellow-500\" style=\"font-variant-numeric: tabular-nums;\">\r\n     ${downloadSpeed.toFixed(2)} Mbps &darr; </p>\r\n    <p class=\"text-xl text-center font-mono text-yellow-500\" style=\"font-variant-numeric: tabular-nums;\">\r\n     ${uploadSpeed.toFixed(2)} Mbps &uarr;</p>\r\n  </div>\r\n`;\r\n};\r\nconst showResultsPanel = ({\r\n  datacenter,\r\n  downloadSpeed,\r\n  uploadSpeed,\r\n}: {\r\n  datacenter: string;\r\n  downloadSpeed: number;\r\n  uploadSpeed: number;\r\n}) => {\r\n  show(\r\n    `\r\n<div class=\"px-2 py-2 mx-auto\">\r\n  <h3 class=\"text-center bg-clip-text text-green-400\" style=\"background-image: linear-gradient(45deg, #2ed1c1, #3a86f4); color: transparent; -webkit-background-clip:text\">Datacenter ${datacenter}</h3>\r\n  <div class=\"grid grid-cols-2\" style=\"gap: 1rem;\">\r\n    <div class=\"flex flex-col justify-center p-4 bg-gray-800 rounded\">\r\n        <p class=\"text-3xl font-semibold font-mono text-center text-white\">${downloadSpeed.toFixed(2)}</p>\r\n        <p class=\"text-2xl font-semibold text-center text-gray-300\">Mbps</p>\r\n        <p class=\"text-center text-gray-400\">Download</p>\r\n    </div>\r\n\r\n    <div class=\"flex flex-col justify-center p-4 bg-gray-800 rounded\">\r\n        <p class=\"text-3xl font-semibold font-mono text-center text-white\">${uploadSpeed.toFixed(2)}</p>\r\n        <p class=\"text-2xl font-semibold text-center text-gray-300\">Mbps</p>\r\n        <p class=\"text-center text-gray-400\">Upload</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n    { width: 640, height: 170, transparent: true }\r\n  );\r\n};\r\n\r\ntry {\r\n  let downloadSpeed = 0;\r\n  let uploadSpeed = 0;\r\n\r\n  div(progressPanelInfo({ downloadSpeed, uploadSpeed }));\r\n\r\n  const testResult: SpeedTestResult = await speedTest({\r\n    acceptLicense: true,\r\n    acceptGdpr: true,\r\n    progress: (progress: any) => {\r\n      if (progress.type === \"download\") {\r\n        downloadSpeed = progress.download.bandwidth / 131072;\r\n      }\r\n      if (progress.type === \"upload\") {\r\n        uploadSpeed = progress.upload?.bandwidth / 131072;\r\n      }\r\n      setPanel(progressPanelInfo({ downloadSpeed, uploadSpeed }));\r\n    },\r\n  });\r\n\r\n  downloadSpeed = testResult.download.bandwidth / 131072;\r\n  uploadSpeed = testResult.upload.bandwidth / 131072;\r\n  let datacenter = `${testResult.server.name} ${testResult.server.location} - ${testResult.server.country}`;\r\n\r\n  showResultsPanel({ datacenter, downloadSpeed, uploadSpeed });\r\n} catch (err: any) {\r\n  console.log(err.message);\r\n}\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/635","img":"https://avatars.githubusercontent.com/u/602300?u=829729de725990e263a945fc10044b989c8558a1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/602300?u=829729de725990e263a945fc10044b989c8558a1&v=4","user":"altrim","author":"Altrim Beqiri","twitter":"altrimbeqiri","discussion":"https://github.com/johnlindquist/kit/discussions/623","url":"https://github.com/johnlindquist/kit/discussions/623","title":"Quick Thoughts with Script Kit and Notion","name":"Quick Thoughts with Script Kit and Notion","extension":".md","description":"Created by altrim","resourcePath":"/johnlindquist/kit/discussions/623","createdAt":"2021-11-28T00:12:11Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOJe5","body":"I use Notion daily for my work and after I saw the tweet by @johnlindquist on the Quick Thoughts script I got inspired to write one that integrates with the Notion API. I wrote a bit about it on my blog [Quick Thoughts with Script Kit and Notion](https://altrim.io/posts/quick-thoughts-with-script-kit-and-notion)\r\n\r\n[Install notion-thoughts](https://scriptkit.com/api/new?name=notion-thoughts&url=https://gist.githubusercontent.com/altrim/141e25b46ba5fc8be4adb1517fb6d16e/raw/b892176987fb2932dee85054010d5a7ee66b56bf/notion-thoughts.ts\")\r\n\r\nhttps://user-images.githubusercontent.com/602300/144701725-aaf3a8a8-becb-4c53-9ea9-5a0592af4971.mp4\r\n\r\n\r\n```js\r\nimport \"@johnlindquist/kit\";\r\n\r\n// Menu: Notion Thoughts\r\n// Description: Add quick thoughts to a notion journal page\r\n// Author: Altrim Beqiri\r\n// Twitter: @altrimbeqiri\r\n\r\n/** @type {typeof import(\"@notionhq/client\")} */\r\nconst { Client } = await npm(\"@notionhq/client\");\r\n/** @type {typeof import(\"date-fns\")} */\r\nconst { format, parseISO, formatISO, isSameMinute } = await npm(\"date-fns\");\r\n\r\nconst NOTION_URL = await env(\"NOTION_URL\");\r\nconst DATABASE_ID = await env(\"NOTION_DATABASE_ID\");\r\nconst TOKEN = await env(\"NOTION_TOKEN\");\r\n\r\nconst notion = new Client({\r\n  auth: TOKEN,\r\n});\r\n\r\n/**\r\n * Create a heading two block\r\n *\r\n * @param content\r\n * @returns block object https://developers.notion.com/reference/block#heading-two-blocks\r\n */\r\nconst createHeadingBlock = (content: string) => {\r\n  return {\r\n    object: \"block\",\r\n    type: \"heading_2\",\r\n    heading_2: {\r\n      text: [\r\n        {\r\n          type: \"text\",\r\n          text: {\r\n            content,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Create a bulleted litst item block\r\n *\r\n * @param content\r\n * @returns block object https://developers.notion.com/reference/block#bulleted-list-item-blocks\r\n */\r\nconst createBulletItemBlock = (content: string) => {\r\n  return {\r\n    object: \"block\",\r\n    type: \"bulleted_list_item\",\r\n    bulleted_list_item: {\r\n      text: [\r\n        {\r\n          type: \"text\",\r\n          text: {\r\n            content,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Query the database by the name and today's date\r\n *\r\n * https://developers.notion.com/reference/post-database-query\r\n * @returns database object https://developers.notion.com/reference/database\r\n */\r\nconst queryDatabase = async () =>\r\n  await notion.databases.query({\r\n    database_id: DATABASE_ID,\r\n    filter: {\r\n      and: [\r\n        {\r\n          property: \"Name\",\r\n          text: {\r\n            contains: \"Thoughts\",\r\n          },\r\n        },\r\n        {\r\n          property: \"Created\",\r\n          created_time: {\r\n            equals: formatISO(new Date(), { representation: \"date\" }),\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    sorts: [\r\n      {\r\n        property: \"Created\",\r\n        direction: \"ascending\",\r\n      },\r\n    ],\r\n  });\r\n\r\n/**\r\n * Create a new page in the database with today's date and a Daily tag\r\n *\r\n * https://developers.notion.com/reference/create-a-database\r\n * @returns https://developers.notion.com/reference/page\r\n */\r\nconst createPage = async () =>\r\n  await notion.pages.create({\r\n    parent: {\r\n      database_id: DATABASE_ID,\r\n    },\r\n    icon: {\r\n      type: \"emoji\",\r\n      emoji: \"📝\",\r\n    },\r\n    properties: {\r\n      Name: {\r\n        title: [\r\n          {\r\n            text: {\r\n              content: `${format(new Date(), \"yyyy-MM-dd\")} - Thoughts`,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      Tags: {\r\n        multi_select: [{ name: \"Daily\" }],\r\n      },\r\n    },\r\n    children: [createHeadingBlock(`${format(new Date(), \"HH:mm\")}`)],\r\n  });\r\n\r\nconst hasThoughtsForTheDay = (thoughts?: any[]) => thoughts && thoughts.length > 0;\r\n\r\n// Query the database for the page that contains the \"Thoughts\" label and the today's date\r\nconst { results: database } = await queryDatabase();\r\n// If we don't have a page for today we create a new one\r\nconst page = hasThoughtsForTheDay(database) ? database[0] : await createPage();\r\n\r\nwhile (true) {\r\n  const thought = await arg({\r\n    placeholder: \"Thought:\",\r\n    hint: `Type \"open\" to open journal in browser`,\r\n  });\r\n\r\n  // Will open the journal in a new tab in your default browser and exit the script\r\n  if (thought === \"open\") {\r\n    focusTab(`${NOTION_URL}/${DATABASE_ID}`);\r\n    break;\r\n  }\r\n\r\n  // List all the children in the page\r\n  const { results: children } = await notion.blocks.children.list({\r\n    block_id: page.id,\r\n    page_size: 42, // The number of items from the full list desired in the response. Maximum: 100\r\n  });\r\n\r\n  // Get last heading block we have on the page\r\n  const headingBlock = [...children].reverse().find((obj: any) => obj.type === \"heading_2\");\r\n\r\n  // Check if the last heading is not same time as the current time we need to create a new heading block\r\n  const isSameTime = isSameMinute(parseISO(headingBlock?.created_time), new Date());\r\n  if (!isSameTime) {\r\n    await notion.blocks.children.append({\r\n      block_id: page.id,\r\n      children: [createHeadingBlock(format(new Date(), \"HH:mm\"))],\r\n    });\r\n  }\r\n\r\n  // Append the item to the last heading block\r\n  await notion.blocks.children.append({\r\n    block_id: page.id,\r\n    children: [createBulletItemBlock(thought)],\r\n  });\r\n}\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/623","img":"https://avatars.githubusercontent.com/u/602300?u=829729de725990e263a945fc10044b989c8558a1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/725120?u=9a4ac0020d0e405b332b2c408ef77588c67bf8b2&v=4","user":"horacioh","author":"Horacio Herrera","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/618","url":"https://github.com/johnlindquist/kit/discussions/618","title":"Open a random link from a markdown file","name":"Open a random link from a markdown file","extension":".md","description":"Created by horacioh","resourcePath":"/johnlindquist/kit/discussions/618","createdAt":"2021-11-24T20:34:31Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOISS","body":"I have a list of all the links I want to read in a markdown file. and I build this script to open a random link to start reading!\r\n\r\n```js\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\n// Menu: Read Random link from a mardown file\r\n// Description: Open a random link from a markdown file\r\n// Author: Horacio Herrera\r\n// Twitter: @hhg2288\r\n\r\n/** @type {typeof import(\"unified\")} */\r\nlet { unified } = await npm(\"unified\")\r\n/** @type {typeof import(\"remark-parse\").default} */\r\nlet remarkParse = await npm(\"remark-parse\")\r\n/** @type {typeof import(\"unist-util-visit\")} */\r\nlet { visit } = await npm(\"unist-util-visit\")\r\n\r\n// get the markdown file you want to parse\r\nlet file = home(`workspace/braindump/inbox.md`)\r\nlet contents = await readFile(file, \"utf-8\")\r\nlet tree = unified().use(remarkParse).parse(contents)\r\n\r\n// create an array of links\r\nlet links = []\r\nvisit(tree, \"link\", function linkVisitor(node) {\r\n  links.push(node)\r\n})\r\n\r\n// open a random url from the generated list\r\nlet index = Math.floor(Math.random() * (links.length - 1))\r\nexec(`open '${links[index].url}'`)\r\n\r\n```\r\n\r\nthere are some things I want to modify to make it better and more \"agnostic\":\r\n- [x] let de user set the file he/she wants to parse\r\n- [ ] store the remark AST result in the db, and maybe update it everytime I update the file (which I do using another script)\r\n- [ ] update the file and create another list of the links I \"visited\"\r\n\r\nany feedback and suggestion is welcome!\r\n\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/618","img":"https://avatars.githubusercontent.com/u/725120?u=9a4ac0020d0e405b332b2c408ef77588c67bf8b2&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/615","url":"https://github.com/johnlindquist/kit/discussions/615","title":"beta.114 - Info, Settings, Choice Events 🎛","name":"beta.114 - Info, Settings, Choice Events 🎛","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/615","createdAt":"2021-11-22T19:09:19Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4AOHN6","body":"# beta.114 - Info, Settings, Choice Events\r\n\r\n## Displaying Temporary Info\r\n\r\nUntil now, `await div()` worked by waiting for the user to hit enter/escape. This still works fine, but if you want to \"timeout\" a `div` to display temporary info without user input, this entire script will run without any user interaction:\r\n\r\n[Install non-blocking-div](https://scriptkit.com/api/new?name=non-blocking-div&url=https://gist.githubusercontent.com/johnlindquist/87e92156251d09a02154f04772f1e9bf/raw/be6dde40a7f5e1f3b8eaa9abf68d8698031cd3de/non-blocking-div.js\")\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet classes = `p-5 text-3xl flex justify-center items-center text-center`\r\n\r\ndiv(`Wait 1 second...`, classes)\r\nawait wait(1000)\r\n\r\ndiv(`Just 2 more seconds...`, classes)\r\nawait wait(2000)\r\n\r\ndiv(`Almost there...`, classes)\r\nawait wait(3000)\r\n\r\n```\r\n\r\n## Remember Selection\r\n\r\nI needed to build a settings \"panel\", so I wanted to make a list that could toggle. \r\n\r\n\r\n![CleanShot 2021-11-22 at 12 08 29](https://user-images.githubusercontent.com/36073/142920816-3bf47911-578b-4e2f-9662-10257287fde4.png)\r\n\r\nThe solution was to remember the previous choice by `id`. Any time `arg` is invoked, it will check to see if a choice has an id that matched the previously submitted choice and focus back on it. This enables you to hit enter repeatedly to toggle a choice on and off.\r\n\r\n[Install remember-selection](https://scriptkit.com/api/new?name=remember-selection&url=https://gist.githubusercontent.com/johnlindquist/a86395d809c260d943f9763023f5a6f0/raw/4c1057b8500fcdf34fcd179af52f09cc7dee9ca4/remember-selection.js\")\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet data = [\r\n  {\r\n    id: uuid(),\r\n    name: \"On\",\r\n  },\r\n  {\r\n    id: uuid(),\r\n    name: \"Off\",\r\n  },\r\n  {\r\n    id: uuid(),\r\n    name: \"On\",\r\n  },\r\n]\r\n\r\nlet argConfig = {\r\n  placeholder: \"Toggle items\",\r\n  flags: {\r\n    end: {\r\n      shortcut: \"cmd+enter\",\r\n    },\r\n  },\r\n}\r\n\r\nwhile (true) {\r\n  let item = await arg(argConfig, data)\r\n  data.find(i => i.id === item.id).name =\r\n    item.name === \"On\" ? \"Off\" : \"On\"\r\n\r\n  if (flag.end) break\r\n}\r\n\r\nawait div(JSON.stringify(data), \"p-2 text-sm\")\r\n```\r\n\r\nYou could also use this when making a sequence of selections:\r\n\r\n[Install remember-sequence](https://scriptkit.com/api/new?name=remember-sequence&url=https://gist.githubusercontent.com/johnlindquist/80f9d005e5bff92691125f736199aa2c/raw/4e05c118bc91defe5e2f39cff20eb9862f4c6a2d/remember-sequence.js\")\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet data = [\r\n  {\r\n    id: uuid(),\r\n    name: \"One\",\r\n  },\r\n  {\r\n    id: uuid(),\r\n    name: \"Two\",\r\n  },\r\n  {\r\n    id: uuid(),\r\n    name: \"Three\",\r\n  },\r\n]\r\n\r\nlet selections = []\r\n\r\nlet one = await arg(`First selection`, data)\r\nselections.push(one)\r\n\r\nlet two = await arg(\r\n  {\r\n    placeholder: `Second selection`,\r\n    hint: selections.map(s => s.name).join(\", \"),\r\n  },\r\n  data\r\n)\r\nselections.push(two)\r\n\r\nlet three = await arg(\r\n  {\r\n    placeholder: `Third selection`,\r\n    hint: selections.map(s => s.name).join(\", \"),\r\n  },\r\n  data\r\n)\r\nselections.push(three)\r\n\r\nawait div(\r\n  selections.map(s => s.name).join(\", \"),\r\n  \"p-2 text-sm\"\r\n)\r\n\r\n```\r\n\r\n\r\n\r\n[Install no-choices-event](https://scriptkit.com/api/new?name=no-choices-event&url=https://gist.githubusercontent.com/johnlindquist/5534589a322bbb384e5bf4dbcbf00864/raw/1a7c2500149db3b8731e900646d568fa7fb5ed74/no-choices-event.js\")\r\n\r\n## Choice Events\r\n\r\n`onNoChoices` and `onChoices` allows Kit.app to tell your script when the user has typed something that filtered out every choice. Most commonly, you'll want to provide a `setHint` (I almost made it a default), but you can add any logic you want.\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\nawait arg(\r\n  {\r\n    placeholder: `Pick a fruit`,\r\n    onChoices: async () => {\r\n      setHint(``)\r\n    },\r\n    onNoChoices: async input => {\r\n      setHint(`No choices matched ${input}`)\r\n    },\r\n  },\r\n  [`Apple`, `Orange`, `Banana`]\r\n)\r\n\r\n```\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/615","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/17577332?v=4","user":"pomdtr","author":"Achille Lacoin","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/607","url":"https://github.com/johnlindquist/kit/discussions/607","title":"Updated Raycast Integration","name":"Updated Raycast Integration","extension":".md","description":"Created by pomdtr","resourcePath":"/johnlindquist/kit/discussions/607","createdAt":"2021-11-20T16:29:47Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOGea","body":"I've built a new extension to be able to launch my scripts from raycast. It would be cool to get a review from you @johnlindquist !\r\n\r\nLink to the pull request: https://github.com/raycast/extensions/pull/399\r\n\r\nhttps://user-images.githubusercontent.com/17577332/142733677-ae7fcd29-e267-4301-a4e7-1ac86b030c98.mp4","value":"https://github.com/johnlindquist/kit/discussions/607","img":"https://avatars.githubusercontent.com/u/17577332?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/5678065?u=e2e528a3ee58b5150a1947c7ded93695b35a8779&v=4","user":"Alarid","author":"Yohann Legrand","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/600","url":"https://github.com/johnlindquist/kit/discussions/600","title":"Search Kent C. Dodds blog","name":"Search Kent C. Dodds blog","extension":".md","description":"Created by Alarid","resourcePath":"/johnlindquist/kit/discussions/600","createdAt":"2021-11-18T11:43:51Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOFh9","body":"Because we all love [Kent's blog](https://kentcdodds.com/blog) so much, I made a small script to quickly search for a blog post 😁\r\n\r\n[Install search-kent-blog](https://scriptkit.com/api/new?name=search-kent-blog&url=https://gist.githubusercontent.com/Alarid/210958c034bfeda6f1baf1cc29eed91e/raw/7777c4ed25cbbc5a4f7a5bd3bd9b7a50435e8ee1/search-kent-blog.js\")\r\n\r\n```js\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n// Menu: Search Kent's Blog\r\n\r\nconst query = await arg(\"Query\")\r\nexec(`open https://kentcdodds.com/s/${encodeURIComponent(query)}`)\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/600","img":"https://avatars.githubusercontent.com/u/5678065?u=e2e528a3ee58b5150a1947c7ded93695b35a8779&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/5678065?u=e2e528a3ee58b5150a1947c7ded93695b35a8779&v=4","user":"Alarid","author":"Yohann Legrand","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/599","url":"https://github.com/johnlindquist/kit/discussions/599","title":"Purge unused Git branches","name":"Purge unused Git branches","extension":".md","description":"Created by Alarid","resourcePath":"/johnlindquist/kit/discussions/599","createdAt":"2021-11-18T11:34:12Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOFhz","body":"[Install purge-unused-git-branches](https://scriptkit.com/api/new?name=purge-unused-git-branches&url=https://gist.githubusercontent.com/Alarid/cc25e78cefa3ae73f6b3ed12bc50ca8c/raw/2fd224db495e10f557ccfe2b209ba624f69217e3/purge-unused-git-branches.js)\r\n\r\n## Demo\r\nhttps://user-images.githubusercontent.com/5678065/142405828-21e7a439-b127-4fcb-af13-7cbe6d947400.mov\r\n\r\n## Purpose\r\nI find it quite annoying to keep old/unused Git branches in my local repositories. Most of the time, those branches have been merged some time ago, but I keep on forgetting to delete them manually. So I made this little utility to help me/you with that 😇\r\n\r\nIt will simply compare your local branches with the remote ones, and ask you if you wish to delete all the unused branches, or select the ones you want to remove manually. \r\n\r\n## Notes\r\nYou must use this script in your terminal, in a Git repository folder. This is why I excluded it from the Kit UI. Adding Kit scripts to your Path will make it easier to run this one from anywhere:\r\n```\r\n# Add this in your .zhsrc or .bashrc\r\nexport PATH=$HOME/.kenv/bin:$PATH\r\n```\r\nThen run the script from anywhere (in a Git repo):\r\n```\r\npurge-unused-git-branches\r\n```\r\n\r\n## Source\r\n```js\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n// Exclude: true\r\n\r\n$.verbose = false\r\n\r\nconst TOKENS_TO_REMOVE = [\"* \", \"origin/\", \"HEAD -> \"]\r\n\r\n// Utility to process ZX output by converting lines into an array and removing\r\n// some tokens from the branch names (so remote branches and local branches have\r\n// the same name)\r\nconst processOutput = (output) => [\r\n  ...new Set(\r\n    output\r\n      .split(\"\\n\")\r\n      .map((branch) => {\r\n        let res = branch.trim()\r\n        TOKENS_TO_REMOVE.forEach((token) => (res = res.replaceAll(token, \"\")))\r\n        return res\r\n      })\r\n      .filter((branch) => branch.length > 0)\r\n  ),\r\n]\r\n\r\n// Retrieve remote and local branches\r\nconsole.log(\"Parsing remote and local branches...\")\r\nconst remoteBranches = await $`git branch -r`.then((output) =>\r\n  processOutput(output.stdout)\r\n)\r\nconst localBranches = await $`git branch`.then((output) =>\r\n  processOutput(output.stdout)\r\n)\r\n\r\n// Compute the set of branches that are not used\r\nconst branchesToRemove = localBranches.filter(\r\n  (branch) => !remoteBranches.includes(branch)\r\n)\r\n\r\n// No branches to remove, nothing to do !\r\nif (branchesToRemove.length === 0) {\r\n  console.log(\"No branches to remove. All good 👌\")\r\n  exit()\r\n}\r\n\r\n// Output the list of branches to remove\r\nconsole.log(\r\n  `Found ${branchesToRemove.length} branches that only exist locally:`\r\n)\r\nbranchesToRemove.map((branch) => console.log(`  - ${branch}`))\r\nconsole.log()\r\n\r\n// Ask the user to confirm the list of branches to remove\r\nconst choice = await arg({\r\n  placeholder:\r\n    \"Do you wish to delete all thoses branches, or select some manually ?\",\r\n  hint: \"[a]ll/[s]elect\",\r\n})\r\nif (choice === \"a\") {\r\n  // Removing all branches at once\r\n  console.log(\"Deleting all branches...\")\r\n  for (const branch in branchesToRemove) {\r\n    await $`git branch -D ${branchesToRemove[branch]}`\r\n  }\r\n  console.log(\"✅ Done.\")\r\n} else if (choice === \"s\") {\r\n  // Ask the user to select branches to remove\r\n  for (const branch in branchesToRemove) {\r\n    const branchName = branchesToRemove[branch]\r\n    const answer = await arg({\r\n      placeholder: `Delete ${branchName}?`,\r\n      hint: `[y]es/[n]o/[e]xit`,\r\n    })\r\n    if (answer === \"y\") {\r\n      try {\r\n        await $`git branch -D ${branchName}`\r\n        console.log(`✅ Branch ${branchName} successfully deleted locally.`)\r\n      } catch (err) {\r\n        console.error(\r\n          `❌ Something went wrong while deleting your branch ${branchName}.`\r\n        )\r\n      }\r\n    } else if (answer === \"e\") {\r\n      console.log(\"Exiting...\")\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nconsole.log(\"All done, bye 👋\")\r\n```\r\n\r\n[Install purge-unused-git-branches](https://scriptkit.com/api/new?name=purge-unused-git-branches&url=https://gist.githubusercontent.com/Alarid/cc25e78cefa3ae73f6b3ed12bc50ca8c/raw/2fd224db495e10f557ccfe2b209ba624f69217e3/purge-unused-git-branches.js)","value":"https://github.com/johnlindquist/kit/discussions/599","img":"https://avatars.githubusercontent.com/u/5678065?u=e2e528a3ee58b5150a1947c7ded93695b35a8779&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/180256?v=4","user":"nadeemkhedr","author":"Nadeem Khedr","twitter":"nadeemkhedr","discussion":"https://github.com/johnlindquist/kit/discussions/597","url":"https://github.com/johnlindquist/kit/discussions/597","title":"Weather converter °C/°F conversion","name":"Weather converter °C/°F conversion","extension":".md","description":"Created by nadeemkhedr","resourcePath":"/johnlindquist/kit/discussions/597","createdAt":"2021-11-15T19:05:46Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOEIe","body":"I wanted to share a semi-useful script, primarily if you work between the states and other countries.\r\n\r\nHere I wanted to create a simple script that will run both in the CLI/UI. You enter weather in formats like `30c` or `90f,` which will convert it the other way.\r\n\r\nAlso, from the UI, it's real-time. So you will get the result while typing. \r\n\r\nThe output can improve (especially the error state). I might do it later.\r\n\r\n```javascript\r\n// Menu: Weather Degree Converter\r\n// Author: Nadeem Khedr\r\n// Twitter: @nadeemkhedr\r\n\r\nlet convertToF = (c) => {\r\n  return (c * 9) / 5 + 32\r\n}\r\n\r\nconst convertToC = (f) => {\r\n  return ((f - 32) * 5) / 9\r\n}\r\n\r\nconst getDegreeWithType = (input) => {\r\n  const matchRegex = /(\\d+)(f|c)/i\r\n  const result = matchRegex.exec(input)\r\n  if (!result) {\r\n    return null\r\n  }\r\n  return {\r\n    degree: parseInt(result[1], 10),\r\n    type: result[2].toLowerCase(),\r\n  }\r\n}\r\n\r\nconst degreeConverter = (input) => {\r\n  const degreeResult = getDegreeWithType(input)\r\n  if (!degreeResult) {\r\n    return \"You need to enter the unit in this format '30c' or '90f'\"\r\n  }\r\n\r\n  const { degree, type } = degreeResult\r\n  let oDegree = null\r\n  let oType = null\r\n  if (type === 'c') {\r\n    oDegree = convertToF(degree)\r\n    oType = 'F'\r\n  } else {\r\n    oDegree = convertToC(degree)\r\n    oType = 'C'\r\n  }\r\n  return `${oDegree.toFixed(1)}°${oType}`\r\n}\r\n\r\nconst deg = await arg(\r\n  'Enter degress in °C or °F',\r\n  (input) =>\r\n    `<div class=\"text-2xl flex justify-center items-center p-5\">\r\n${input ? degreeConverter(input) : `Waiting for input`}\r\n</div>`\r\n)\r\n\r\ndiv(degreeConverter(deg))\r\n\r\n\r\n```","value":"https://github.com/johnlindquist/kit/discussions/597","img":"https://avatars.githubusercontent.com/u/180256?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/587","url":"https://github.com/johnlindquist/kit/discussions/587","title":"beta.98 - Previews 👀, Docs, devTools, updater improvements","name":"beta.98 - Previews 👀, Docs, devTools, updater improvements","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/587","createdAt":"2021-11-12T17:32:40Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4AOC-z","body":"## Previews\r\n\r\nCreating the previews feature was a huge undertaking, but it really paid off. You can now render html into a side pane by simply providing a `preview` function. A preview can be a simple string all the way to an async function per choice that loads data based on the currently selected choice. For examples, see here #555 \r\n\r\n> You can toggle previews on/off with <kbd>cmd+p</kbd>\r\n\r\nhttps://user-images.githubusercontent.com/36073/141507471-db3e4454-f0ef-4e6b-891b-bd4344a40e85.mp4\r\n\r\n## Docs\r\n\r\nAlong with previews comes the built-in docs.\r\n\r\n- Docs are built from the GitHub discussions [docs](https://github.com/johnlindquist/kit/discussions/categories/docs) category\r\n- Each time I post/update a doc, a webhook builds the docs into a json file, Kit.app checks for a new docs.json once a day (or you can manually update them from the `Help->Download Latest Docs`\r\n- You can _click an example to install it!_ 🎉\r\n- I'll keep working on docs and examples. Please ask any questions over in the [docs](https://github.com/johnlindquist/kit/discussions/categories/docs) section if you'd like to see something clarified.\r\n\r\nhttps://user-images.githubusercontent.com/36073/141507953-02d44174-3ac0-43d7-8d92-4319e917d512.mp4\r\n\r\n## Dev Tools\r\n\r\nPass any data into `devTools` to pop open a Dev Tools pane so you can interact with the data. `devTools` will first log out the data, but it's also assigned to an `x` variable you can interact with in the console.\r\n\r\n> `devTools` will be another paid feature once Script Kit 1.0 releases\r\n\r\nhttps://user-images.githubusercontent.com/36073/141508954-df3ea997-a49e-4fdd-bd40-7bff76024a6d.mp4\r\n\r\n## Updater Fixes\r\n\r\nA few users reported a strange behavior with the updater. If you've had any issues with it, please download a fresh copy of Kit.app from https://scriptkit.com and overwrite the old version. There are many more guards around the updating logic to prevent those issues from cropping up again.\r\n\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/587","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/4287128?u=70e8d6e39f4addac43ee9849c8d9c150363e460e&v=4","user":"davelosert","author":"David Losert","twitter":"david_losert","discussion":"https://github.com/johnlindquist/kit/discussions/559","url":"https://github.com/johnlindquist/kit/discussions/559","title":"Start tracking a Todoist Todo with Toggl","name":"Start tracking a Todoist Todo with Toggl","extension":".md","description":"Created by davelosert","resourcePath":"/johnlindquist/kit/discussions/559","createdAt":"2021-11-08T16:45:55Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AOA1Z","body":"Select a task from `Todoist` (configured from tasks assigned to `today`) and start a `Toggl`-timer for it.\r\nIf both, `Todoist` and `Toggl` have a Project with the same name, that project is automatically linked in the Tracking-Entry.\r\n\r\nEven though this script is very opinionated to those two tools, it might inspire you to do something similar with the tools of your choice. 😉 \r\n\r\n```typescript\r\n// Menu: Track Todo\r\n// Description: Start the tracking timer of Toggl with a todo from today of Todoist.\r\n// Author: David Losert\r\n// Twitter: @david_losert\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { getTodosOfToday, getProjectById } from '../lib/Todoist';\r\nimport { startTimeTrackerFor } from '../lib/Toggl';\r\n\r\nconst todosToday = await getTodosOfToday();\r\n\r\nconst selectedTodo = await arg(\r\n  'Select Todo to start', \r\n  todosToday.map((todo) => ({\r\n    name: todo.content,\r\n    value: todo\r\n  })\r\n));\r\n\r\nlet projectName;\r\nif(selectedTodo.project_id) {\r\n  const project = await getProjectById(selectedTodo.project_id);\r\n  projectName = project.name;\r\n}\r\n\r\nconst result = await startTimeTrackerFor({ \r\n  description: selectedTodo.content,\r\n  projectName\r\n});\r\n\r\nawait notify({\r\n  title: 'Tracking Started.',\r\n  message: `Started Tracking for ${result.description}.`\r\n});\r\n```\r\n\r\nAs I am planing to write some more actions for Todoist as well as Toggl, I externalized accessing them into two modules (might put them into own npm modules when I have the time):\r\n\r\n## `../lib/Todoist.ts`:\r\n\r\n```typescript\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst axios = await npm('axios');\r\n\r\nconst todoistApiToken = await env('TODOIST_API_TOKEN');\r\n\r\n// Types omit properties not relevant right now\r\ntype TodoistTask = {\r\n    id: number,\r\n    project_id: number,\r\n    content: string,\r\n };\r\n\r\ntype TodoistProject = {\r\n  id: number,\r\n  name: string,\r\n};\r\n\r\nconst getTodosOfToday = async (): Promise<TodoistTask[]> => {\r\n  const response =  await axios({\r\n    method: 'GET',\r\n    url: 'https://api.todoist.com/rest/v1/tasks?filter=today',\r\n    headers: {\r\n      'Authorization': `Bearer ${todoistApiToken}`\r\n    }\r\n  });\r\n  return response.data;\r\n};\r\n\r\nconst getProjectById = async (id: number): Promise<TodoistProject> => {\r\n  const response =  await axios({\r\n    method: 'GET',\r\n    url: `https://api.todoist.com/rest/v1/projects/${id}`,\r\n    headers: {\r\n      'Authorization': `Bearer ${todoistApiToken}`\r\n    }\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport {\r\n  getTodosOfToday,\r\n  getProjectById\r\n};\r\n```\r\n\r\n## `../lib/Toggl.ts`\r\n\r\n```typescript\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst axios = await npm('axios');\r\nconst togglApiToken = await env('TOGGL_API_TOKEN');\r\nconst togglWorkspaceId = await env('TOGGL_WORKSPACE_ID');\r\n\r\nconst auth = {\r\n      username: togglApiToken,\r\n      // not a real password - the token is the actual secret. For whatever reason, toggl expects it this way around.\r\n      password: 'api_token'\r\n };\r\n\r\n// Types omit properties not relevant right now\r\ntype TimeEntry = {\r\n    id: number,\r\n    description: string,\r\n};\r\n\r\ntype TogglProject = {\r\n  id: number,\r\n  name: string,\r\n}\r\n\r\nconst getProjectByName = async(name: string): Promise<TogglProject | undefined> => {\r\n  const response = await axios({\r\n    method: 'GET',\r\n    url: `https://api.track.toggl.com/api/v8/workspaces/${togglWorkspaceId}/projects`,\r\n    auth\r\n  });\r\n  return response.data.find((project: TogglProject): boolean => project.name === name)\r\n}\r\n\r\nconst startTimeTrackerFor = async (\r\n  {description, projectName}: { description: string, projectName?: string}\r\n): Promise<TimeEntry> => {\r\n  let projectId;\r\n  if(projectName) {\r\n    const project = await getProjectByName(projectName);\r\n    projectId = project.id;\r\n  }\r\n  \r\n  const response = await axios({\r\n    method: 'POST',\r\n    url: 'https://api.track.toggl.com/api/v8/time_entries/start',\r\n    data: {\r\n      time_entry: {\r\n        description,\r\n        pid: projectId,\r\n        created_with: 'script-kit'\r\n      }\r\n    },\r\n    auth\r\n  });\r\n  return response.data.data;\r\n}\r\n\r\nexport {\r\n  startTimeTrackerFor\r\n};\r\n\r\n\r\nexport {\r\n  startTimeTrackerFor\r\n};\r\n```","value":"https://github.com/johnlindquist/kit/discussions/559","img":"https://avatars.githubusercontent.com/u/4287128?u=70e8d6e39f4addac43ee9849c8d9c150363e460e&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/4287128?u=70e8d6e39f4addac43ee9849c8d9c150363e460e&v=4","user":"davelosert","author":"David Losert","twitter":"david_losert","discussion":"https://github.com/johnlindquist/kit/discussions/501","url":"https://github.com/johnlindquist/kit/discussions/501","title":"Change Wallpaper","name":"Change Wallpaper","extension":".md","description":"Created by davelosert","resourcePath":"/johnlindquist/kit/discussions/501","createdAt":"2021-11-02T07:54:32Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AN-Bb","body":"Here is a little script I wrote to easily change the background-wallpaper. \r\n\r\nI use this as I have to set a certain wallpaper before doing webinars or screencasts for my clients.\r\n\r\n```typescript\r\n// Menu: Change Wallpaper\r\n// Description: Change your background wallpaper by selecting from a configured folder.\r\n// Author: David Losert\r\n// Twitter: @david_losert\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\n// Set to the folder where you keep all your wallpapers for easy selection\r\nconst wallpapersPath = await env('WALLPAPER_PATH');\r\n\r\nconst availableWallpapers = ls(wallpapersPath);\r\nconst selectedWallpaper = await arg('select', availableWallpapers.map(image => {\r\n  const imagePath = path.resolve(wallpapersPath, image);\r\n  return {\r\n    name: image,\r\n    preview: `<img src=\"${imagePath}\">`,\r\n    value: imagePath\r\n  };\r\n}));\r\n\r\nawait applescript(`tell application \"Finder\" to set desktop picture to POSIX file \"${selectedWallpaper}\"`);\r\n```","value":"https://github.com/johnlindquist/kit/discussions/501","img":"https://avatars.githubusercontent.com/u/4287128?u=70e8d6e39f4addac43ee9849c8d9c150363e460e&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/900523?u=ab7e35b384354f771ecd6d683d12dade83d221dd&v=4","user":"JamesHenry","author":"James Henry","twitter":"MrJamesHenry","discussion":"https://github.com/johnlindquist/kit/discussions/496","url":"https://github.com/johnlindquist/kit/discussions/496","title":"🔥 Automation Overload - Example of running macOS Monterey Shortcuts via Script Kit","name":"🔥 Automation Overload - Example of running macOS Monterey Shortcuts via Script Kit","extension":".md","description":"Created by JamesHenry","resourcePath":"/johnlindquist/kit/discussions/496","createdAt":"2021-10-29T10:51:19Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AN8tE","body":"\r\n[Install macos-monterey-shortcuts-example](https://scriptkit.com/api/new?name=macos-monterey-shortcuts-example&url=https://gist.githubusercontent.com/JamesHenry/75292ec21a02dcb8918a96c018d47a37/raw/77182d0c994698de037c5b12cc6bc5b30949c0d6/macos-monterey-shortcuts-example.js\")\r\n\r\n```js\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\n// Menu: Say Hello World Shortcut\r\n// Description: Trigger macOS Monterey Shortcut from Script Kit\r\n// Author: James Henry\r\n// Twitter: @MrJamesHenry\r\n\r\n/**\r\n * I have created a Shortcut on my Mac running macOS Monterey called\r\n * \"Say Hello World\".\r\n *\r\n * There are a couple of options available when it comes to invoking\r\n * it programmatically (whether via Script Kit or in general).\r\n */\r\n\r\n/**\r\n * OPTION 1:\r\n *\r\n * You can use the `shortcuts` CLI that is preinstalled on macOS\r\n * Monterey to run named Shortcuts.\r\n */\r\nawait $`shortcuts run \"Say Hello World\"`;\r\n\r\n/**\r\n * OPTION 2:\r\n *\r\n * You can use AppleScript to communicate with the \"Shortcuts\"\r\n * application on macOS Monterey to run named Shortcuts.\r\n *\r\n * NOTE: I first tried to communicate with \"Shortcuts Events\" per this\r\n * video from WWDC 2021, but it does not work:\r\n * https://developer.apple.com/videos/play/wwdc2021/10232/?time=1539\r\n */\r\nawait applescript(`\r\n  tell application \"Shortcuts\"\r\n    run the shortcut named \"Say Hello World\"\r\n  end tell\r\n`);\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/496","img":"https://avatars.githubusercontent.com/u/900523?u=ab7e35b384354f771ecd6d683d12dade83d221dd&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/494","url":"https://github.com/johnlindquist/kit/discussions/494","title":"Currency Converter using Google :)","name":"Currency Converter using Google :)","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/494","createdAt":"2021-10-23T19:33:03Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AN6JK","body":"Since most of currency converters are paid APIs - why not just use google for this task :)\r\n\r\nhttps://user-images.githubusercontent.com/1018759/138569135-4b682b44-8b8b-4e9b-bd30-64c180bd1d5f.mp4\r\n\r\n\r\n[Install currency-converter](https://scriptkit.com/api/new?name=currency-converter&url=https://gist.githubusercontent.com/hakubo/d4822cfc6e42d7dead70d4da73bfded9/raw/97afb98be93518b2550448e5b81d425b79642ed2/currency-converter.js\")\r\n\r\n```js\r\n// Menu: Currency Converter using google\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nconst from = await arg(\"from\", [\"pln\", \"usd\", \"eur\"]);\r\nconst to = await arg(\"to\", [\"usd\", \"pln\", \"eur\"]);\r\nconst query = await arg(\"amount\");\r\nconst value = await scrapeSelector(\r\n  `https://google.com/search?q=${encodeURIComponent(\r\n    query + \" \" + from + \" \" + to\r\n  )}`,\r\n  \"span[data-value]\"\r\n);\r\n\r\ndiv(query + \" \" + from + \" = \" + value + \" \" + to, \"p-4\");\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/494","img":"https://avatars.githubusercontent.com/u/1018759?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/967145?u=a0c390fc6689da83a5fb10aa017ed9f58466673a&v=4","user":"brandonpittman","author":"Brandon Pittman","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/491","url":"https://github.com/johnlindquist/kit/discussions/491","title":"Quick Google Translate","name":"Quick Google Translate","extension":".md","description":"Created by brandonpittman","resourcePath":"/johnlindquist/kit/discussions/491","createdAt":"2021-10-21T22:46:51Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AN5ZN","body":"I whipped up a quick action to take some selected text and open Google Translate with it. Swap out the source, `sl`, and target, `tl`, with your most commonly used languages.\r\n\r\n[Install script](https://scriptkit.com/api/new?name=quick-translate&url=https://gist.githubusercontent.com/brandonpittman/18791a65c6721f822473b2f1900cfb50/raw/52b9db763ed4ab31139994611aaa57a0b871e46a/google-translate.ts)\r\n\r\n```ts\r\n// Menu: JA → EN\r\n// Description: Translate selected text into with Google Translate.\r\n// Author: Brandon Pittman\r\n// Shortcut: ctrl j\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst origin = \"https://translate.google.com\";\r\nconst text = await getSelectedText();\r\nconst sl = \"ja\";\r\nconst tl = \"en\";\r\nconst op = \"translate\";\r\n\r\nconst url = encodeURI(`${origin}/?sl=${sl}&tl=${tl}&text=${text}&op=${op}`);\r\n\r\nexec(`open \"${url}\"`, { encoding: \"utf8\" });\r\n```","value":"https://github.com/johnlindquist/kit/discussions/491","img":"https://avatars.githubusercontent.com/u/967145?u=a0c390fc6689da83a5fb10aa017ed9f58466673a&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/490","url":"https://github.com/johnlindquist/kit/discussions/490","title":"RCKIK mobile busses","name":"RCKIK mobile busses","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/490","createdAt":"2021-10-19T09:42:02Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AN3tJ","body":"This is for Poznań, Poland only. Data taken from https://www.rckik.poznan.pl/najblizsze-wyjazdy\r\n\r\nIt'll show a list of next places where you can find a bus in which you can donate a blood in Poznań - filtered by given text so you can narrow list to locations closest to you.\r\n\r\nThis is WIP - I'll try to optimize it and maybe make the list easier to read.\r\n\r\n\r\n![Screenshot 2021-10-19 at 11 39 17](https://user-images.githubusercontent.com/1018759/137884912-27795174-e583-4c32-beed-14ea806b125a.png)\r\n\r\n\r\n[Install rckik](https://scriptkit.com/api/new?name=rckik&url=https://gist.githubusercontent.com/hakubo/947f4d98c74acaa041cb9944039e4479/raw/90a0ea842b9341e8592dd30dc5a8c1a29c91212f/rckik.js\")\r\n\r\n```js\r\n// Menu: RCKIK mobile\r\n// Description: Show filtered plan of mobile RCKIK busses\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nfunction transform(node) {\r\n  // Edit that to filter locations that you're interested in\r\n  // has to be inside transform function - as it's being serialized and passed to browser\r\n  const filter = \"Poznań\";\r\n  const columns = [...node.querySelectorAll(\"td\")];\r\n\r\n  if (columns[3].innerHTML.startsWith(filter)) {\r\n    return (\r\n      columns[0].querySelector(\"a\").innerHTML +\r\n      \" \" +\r\n      columns[3].innerHTML +\r\n      \" \" +\r\n      columns[2].innerHTML\r\n    );\r\n  }\r\n}\r\n\r\nconst pagination = await scrapeSelector(\r\n  \"https://www.rckik.poznan.pl/najblizsze-wyjazdy?page=1\",\r\n  \".pagination li\"\r\n);\r\n\r\nconst numberOfPages = pagination.length;\r\nlet t = [];\r\n\r\nfor (let i = 1; i <= numberOfPages; i += 1) {\r\n  const result = await scrapeSelector(\r\n    `https://www.rckik.poznan.pl/najblizsze-wyjazdy?page=${i}`,\r\n    \"#calendarTable tr:not(.header):not(.canceled)\",\r\n    transform\r\n  );\r\n\r\n  t = t.concat(result);\r\n}\r\n\r\ndiv(\r\n  `<ul>${t\r\n    .filter(Boolean)\r\n    .map((date) => `<li>${date}</li>`)\r\n    .join(\"\")}</ul>`,\r\n  \"p-4\"\r\n);\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/490","img":"https://avatars.githubusercontent.com/u/1018759?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/489","url":"https://github.com/johnlindquist/kit/discussions/489","title":"Weather by yr.no","name":"Weather by yr.no","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/489","createdAt":"2021-10-19T09:35:42Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4AN3s_","body":"Very simple weather forecast (as pdf 🤣  ) from yr.no bit manual to setup but should be simple an quick.\r\n\r\n![image](https://user-images.githubusercontent.com/1018759/137885137-d2e26e62-668c-4949-a389-b98b7425601c.png)\r\n\r\n[Install weather](https://scriptkit.com/api/new?name=weather&url=https://gist.githubusercontent.com/hakubo/1fc8e04a0ab26a251c6e5113ae8e85ed/raw/ae24bf7daeea3127d9be6bd0a7cd48949921e743/weather.js\")\r\n\r\n```js\r\n// Menu: Weather by yr.no\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\n/**\r\n * 1. Open https://www.yr.no/\r\n * 2. Find your location\r\n * 3. Copy what comes AFTER https://www.yr.no/en/forecast/daily-table/ to location const\r\n */\r\n\r\nconst location = \"5-1233000/Poland/Poznan\";\r\n\r\ndiv(\r\n  `<iframe src=\"https://www.yr.no/en/print/forecast/${location}#toolbar=0\" height=800 width=600/>`,\r\n  \"p-2\"\r\n);\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/489","img":"https://avatars.githubusercontent.com/u/1018759?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/488","url":"https://github.com/johnlindquist/kit/discussions/488","title":"Script Kit online on Stackblitz ⚡️","name":"Script Kit online on Stackblitz ⚡️","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/488","createdAt":"2021-10-18T20:06:28Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4AN3Xv","body":"I spent last week getting Script Kit running \"in browser\" to emulate the terminal experience over on Stackblitz. Here's a quick demo:\r\n\r\nhttps://stackblitz.com/edit/node-rnrhra?file=scripts%2Frepos-to-markdown.js\r\n\r\nThe plan is to use this to host interactive demos for the guide/docs. I'd appreciate if you could play around with it a bit and see if I missed anything.\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/488","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/4882345?u=b84755144b8f4f75f19a42c33667dcc66819f7de&v=4","user":"vaskort","author":"Vasilis Kortsimelidis","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/485","url":"https://github.com/johnlindquist/kit/discussions/485","title":"Search ASOS","name":"Search ASOS","extension":".md","description":"Created by vaskort","resourcePath":"/johnlindquist/kit/discussions/485","createdAt":"2021-10-12T12:22:49Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANz-U","body":"It will search at ASOS.com\r\n\r\n[Install search-asos](https://scriptkit.com/api/new?name=search-asos&url=https://gist.githubusercontent.com/vaskort/2c7dcba1649783d51d1df2cb860ab2dd/raw/988c94b6eba344a61d9b9a0ee51c7b7e70870a07/search-asos.js)\r\n\r\n```js\r\n// Shortcode: asos\r\n// Menu: search-asos\r\n// Description: Search ASOS\r\n// Author: Vasilis Kortsimelidis\r\n// Twitter: @vas_kort\r\n\r\nlet searchTerm = await arg(\"ASOS term to search for:\")\r\nlet termWithEncodedSpaces = searchTerm.replace(/ /g, \"%20\");\r\n\r\nexec(`open https://www.asos.com/search/?q=${termWithEncodedSpaces}`)\r\n```","value":"https://github.com/johnlindquist/kit/discussions/485","img":"https://avatars.githubusercontent.com/u/4882345?u=b84755144b8f4f75f19a42c33667dcc66819f7de&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/483","url":"https://github.com/johnlindquist/kit/discussions/483","title":"Record screen","name":"Record screen","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/483","createdAt":"2021-10-11T18:54:36Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANzrg","body":"This script just opens Quick Time Player and turns on recording of part of your screen.\r\n\r\nIt has a dependency on another script by @johnlindquist app-launcher: https://www.scriptkit.com/johnlindquist/app-launcher\r\n\r\n\r\n[Install record-screen](https://scriptkit.com/api/new?name=record-screen&url=https://gist.githubusercontent.com/hakubo/e3c8698169fede4baad7d9d938c37a25/raw/b8bba52ed97317eb7c8ced279d48765a04214d9e/record-screen.js\")\r\n\r\n```js\r\n// Menu: Record Screen\r\n// Description: Start QuickTime player and open screen recorder\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\nawait run(\"app-launcher\", \"QuickTime Player\");\r\nawait keystroke(\"command control n\");\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/483","img":"https://avatars.githubusercontent.com/u/1018759?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/482","url":"https://github.com/johnlindquist/kit/discussions/482","title":"Ping","name":"Ping","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/482","createdAt":"2021-10-11T18:50:33Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANzrW","body":"Run ping to a destination and draw a chart of latest entries.\r\n\r\n\r\nhttps://user-images.githubusercontent.com/1018759/136839677-7bdf6871-8742-4480-a8e1-54f064e6cc50.mp4\r\n\r\n\r\n\r\n[Install ping](https://scriptkit.com/api/new?name=ping&url=https://gist.githubusercontent.com/hakubo/f499d770a72aeb944350c075e722701c/raw/c04fd12e149004bc23803458888bf87dfb4807c2/ping.js\")\r\n\r\n```js\r\n// Menu: Ping\r\n// Description: Ping destination and show line graph of latest values\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\nconst jsdom = await npm(\"jsdom\");\r\nawait npm(\"canvas\");\r\nconst Chart = await npm(\"chart.js\");\r\n\r\nconst { JSDOM } = jsdom;\r\n\r\n// Edit the list to suit your needs\r\nconst destination = await arg(\"ping\", [\"8.8.8.8\", \"google.com\"]);\r\n\r\n// How many entries should the chart show\r\nconst entries = 20;\r\n\r\nconst command = `ping ${destination}`;\r\nconst child = exec(command, { async: true });\r\n\r\nconst dom = new JSDOM(\r\n  `<!DOCTYPE html><canvas id=\"bar-chart\" width=\"800\" height=\"450\"></canvas>`\r\n);\r\n\r\nglobal.window = dom.window;\r\n\r\nChart.defaults.color = \"white\";\r\nChart.defaults.font = { size: 24, weight: \"bold\" };\r\n\r\nconst labels = new Array(entries)\r\n  .fill()\r\n  .map((_, i) => i)\r\n  .reverse();\r\n\r\nlet output = [];\r\nconst chartData = {\r\n  labels: labels,\r\n  datasets: [\r\n    {\r\n      label: `${command}: - ms`,\r\n      backgroundColor: \"rgb(255, 99, 132)\",\r\n      borderColor: \"rgb(255, 99, 132)\",\r\n      data: output,\r\n    },\r\n  ],\r\n};\r\n\r\nconst chart = new Chart(dom.window.document.getElementById(\"bar-chart\"), {\r\n  type: \"line\",\r\n  data: chartData,\r\n  options: {\r\n    animation: false,\r\n    tooltips: { enabled: false },\r\n    hover: { mode: null },\r\n  },\r\n});\r\n\r\nlet firstLine = true;\r\n\r\nchild.stdout.on(\"data\", function (data) {\r\n  if (!firstLine) {\r\n    const value = +data.replace(/.*time=(.*)ms/, \"$1\");\r\n    output.push(value);\r\n\r\n    if (output.length > entries) {\r\n      output = output.slice(1);\r\n    }\r\n\r\n    chartData.datasets[0].label = `${command}: ${value}ms`;\r\n    chartData.datasets[0].data = output;\r\n    chart.update();\r\n\r\n    div(`<img src=\"${chart.toBase64Image(\"image/jpeg\", 1)}\"/>`, \"p-4\");\r\n  } else {\r\n    firstLine = false;\r\n  }\r\n});\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/482","img":"https://avatars.githubusercontent.com/u/1018759?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/481","url":"https://github.com/johnlindquist/kit/discussions/481","title":"Open Jira ticket","name":"Open Jira ticket","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/481","createdAt":"2021-10-09T18:53:10Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANzA1","body":"The script parses selections to find valid JIRA ticket and when found - opens it in browser\r\n\r\n\r\n[Install open-jira-ticket](https://scriptkit.com/api/new?name=open-jira-ticket&url=https://gist.githubusercontent.com/hakubo/f73e67370a52d48ebc28bfbb09114a6a/raw/3d9b16915e3b968cbd899f885fbe58b9540b28fb/open-jira-ticket.js\")\r\n\r\n```js\r\n// Menu: Open Jira ticket in browser\r\n// Description: Parses a valid ticket number from selection and opens it in browser\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\nconst jiraDomain = await env(\"JIRA_DOMAIN\");\r\nconst text = await getSelectedText();\r\nconst jiraTicket = text.match(/([A-Z]{2,5}-[0-9]+)/);\r\n\r\nif (jiraTicket) {\r\n  focusTab(`${jiraDomain}/browse/${jiraTicket[0]}`);\r\n}\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/481","img":"https://avatars.githubusercontent.com/u/1018759?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/12306850?u=51152dab74c9158efeb6a84a65acf2464cf84218&v=4","user":"benjaminmodayil","author":"Benjamin Modayil","twitter":"modayilme","discussion":"https://github.com/johnlindquist/kit/discussions/467","url":"https://github.com/johnlindquist/kit/discussions/467","title":"Mouse Mover (Python Script + ScriptKit)","name":"Mouse Mover (Python Script + ScriptKit)","extension":".md","description":"Created by benjaminmodayil","resourcePath":"/johnlindquist/kit/discussions/467","createdAt":"2021-10-04T15:26:08Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANwpi","body":"😅 This one is more of a Python script, but I use ScriptKit to launch it. There are moments where I have to leave my computer to address something in another room or need more time than the allotted 10 minutes that Slack provides before it makes it look like I'm unavailable. For the most part, even if I'm in another room, I am still available for conversation/inquiries, so I don't want my coworkers to think I can't be bothered if my status looks like I'm away, but in reality I just might be eating/cooking. So this keeps my computer + work messaging app status in the green so it doesn't look like I'm unavailable.\r\n\r\nThe Python script requires `pyautogui` and `time` modules. I'm not the best for Python troubleshooting as I just learned some Python through YouTube tutorials. All I remember from when I wrote this was that it was a pain to get my computer using the latest version of Python.\r\n\r\nFrom the Python script below, `pyautogui` lets you __exit the script from taking control of your mouse by running `ctrl + c` or moving your mouse to the top right corner of your screen__. Because you can't run `ctrl + c` into a non-existent terminal when using it through ScriptKit, you need to move your mouse to the top right corner of your monitor to exit. \r\n\r\n**Note:** Before connecting/disconnecting external displays while the script is active, you must exit the script first, otherwise you'll have to reconnect/disconnect your displays to the condition of your computer when you started the script to exit.\r\n\r\nYou'll have to squint to see the mouse once the script starts + I only run it for three seconds before closing... Sorry about that.\r\n\r\nhttps://user-images.githubusercontent.com/12306850/135878354-7ab7e798-c63d-4a5e-8ee8-78e938d66b9a.mp4\r\n\r\n```python\r\n\r\n#! /usr/bin/env python3\r\nimport pyautogui\r\nimport time\r\n\r\nwhile True:\r\n    pyautogui.moveRel(0, 50, duration=1.5)\r\n    time.sleep(1)\r\n    pyautogui.moveRel(0, -50, duration=1.5)\r\n    time.sleep(1)\r\n    pyautogui.moveRel(50, 0, duration=1.5)\r\n    time.sleep(1)\r\n    pyautogui.moveRel(-50, 0, duration=1.5)\r\n    time.sleep(1)\r\n\r\n# You can remove a bunch of the repetition above. I just like seeing the mouse move a lot to know it's working.\r\n\r\n```\r\n\r\nHere's the ScriptKit launcher. This will vary depending on your Python path + Python script path.\r\n\r\n```js\r\n// Menu: Mouse Mover\r\n// Description: Moves your mouse so you don't go inactive in Slack or Microsoft Teams\r\n// Author: Benjamin Modayil\r\n// Twitter: @24props\r\n\r\nawait exec(`/PATH-TO-PYTHON-EXECUTABLE/python3.9 /PATH-TO-SCRIPT/i-am-here.py`)\r\n```","value":"https://github.com/johnlindquist/kit/discussions/467","img":"https://avatars.githubusercontent.com/u/12306850?u=51152dab74c9158efeb6a84a65acf2464cf84218&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/466","url":"https://github.com/johnlindquist/kit/discussions/466","title":"Image Info from Finder","name":"Image Info from Finder","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/466","createdAt":"2021-09-30T18:29:41Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANvTb","body":"![CleanShot 2021-09-30 at 12 28 58](https://user-images.githubusercontent.com/36073/135510901-7559fcd9-f8e3-4875-be16-f70057efdb26.png)\r\n\r\n\r\n[Install image-info](https://scriptkit.com/api/new?name=image-info&url=https://gist.githubusercontent.com/johnlindquist/3bffee49a8128b0ebf8be12d47dce93a/raw/4b08de2b5cafc79f4244cafe6bd946e660224a61/image-info.ts\")\r\n\r\n```js\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n// Description: Displays Image Info of Selected File\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet sharp = await npm(\"sharp\")\r\n\r\nlet metadata = await sharp(\r\n  await getSelectedFile()\r\n).metadata()\r\n\r\nawait div(\r\n  md(`\r\n~~~json\r\n${JSON.stringify(metadata, null, \"\\t\")}\r\n~~~\r\n`)\r\n)\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/466","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/457","url":"https://github.com/johnlindquist/kit/discussions/457","title":"TypeScript support! 🚀","name":"TypeScript support! 🚀","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/457","createdAt":"2021-09-27T17:25:03Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4ANtu1","body":"beta.62 brings with it a long-awaited, much-requested feature: TypeScript support!\r\n\r\n![CleanShot 2021-09-27 at 10 42 38](https://user-images.githubusercontent.com/36073/134951810-31754840-85c3-4ad3-a493-59c757fdda07.png)\r\n\r\n## TypeScript Support 🚀\r\n\r\n### 1. But, how?\r\n\r\nEach time your run a TS script, Script Kit will compile the TS script using `esbuild` to a JS script in a `.scripts` dir (notice the \"dot\"). The compiled JS script is then imported from there. Using `.scripts` as a sibling dir will help avoid any `import`/path issues. You can also write TS \"library\" files in your `~/.kenv/lib` dir and import them into your script just fine.\r\n\r\nIf you're experienced with `esbuild` and curious about the settings, they look like this:\r\n\r\n```js\r\nlet { build } = await import(\"esbuild\")\r\n\r\nawait build({\r\n  entryPoints: [scriptPath],\r\n  outfile,\r\n  bundle: true,\r\n  platform: \"node\",\r\n  format: \"esm\",\r\n  external: [\"@johnlindquist/kit\"],\r\n})\r\n```\r\n\r\nThis also opens the door to exporting/building/bundling scripts and libs as individual shippable tools which I'll investigate more in the future.\r\n\r\n### 2. Can I still run my JS scripts if I switch to TS?\r\n\r\nYes! Both your TS and JS scripts will show up in the UI.\r\n\r\n### 3. Why the `import \"@johnlindquist/kit\"`?\r\n\r\nWhen you create a new TS script, the generated script will start with the line: `import \"@johnlindquist/kit\"`\r\n\r\nThis is mostly to make your editor stop complaining by forcing it to load the type definition files and forcing it to treat the file as an \"es module\" so support \"top-level `await`\". It's not technically required since it's not technically importing anything, but your editor will certainly complain very loudly if you leave it out.\r\n\r\n### 4. Where is the setting stored?\r\n\r\nLook in your `~/.kenv/.env` for `KIT_MODE=ts`.\r\n\r\n## fs-extra's added to global\r\n\r\nThe [fs-extra methods](https://www.npmjs.com/package/fs-extra#methods) are now added on the global space. I found myself using `outputFile`, `write/readJson`, etc too often and found them to be a great addition. The only one missing is `copy` since we're already using that to \"copy to clipboard\". You can bring it in with the normal import/alias process if needed, e.g., `let {copy:fsCopy} = await import(\"fs-extra\")`\r\n\r\n## Sync Path\r\n\r\n![CleanShot 2021-09-27 at 11 10 26](https://user-images.githubusercontent.com/36073/134954703-7c9d779f-268a-4f8b-973a-59ac71eebaf0.png)\r\n\r\nYou may notice running scripts from the Script Kit app that some commands you can run in your terminal might be missing, like \"yarn\", etc.\r\n\r\nRun the following command in your terminal to copy the $PATH var from your terminal to your `~/.kenv/.env`. This will help \"sync\" up which commands are available between your terminal and running scripts from the app.\r\n\r\n```bash\r\n~/.kit/bin/kit sync-path\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/457","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/18247063?u=b194d1f49eacbd10e90eeddfc7941822205e75d4&v=4","user":"OskarsEzerins","author":"Oskars Ezerins","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/456","url":"https://github.com/johnlindquist/kit/discussions/456","title":"Switch osx theme","name":"Switch osx theme","extension":".md","description":"Created by OskarsEzerins","resourcePath":"/johnlindquist/kit/discussions/456","createdAt":"2021-09-26T09:22:58Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANtNt","body":"Kit has to be given permission for System events in Settings -> Security & Privacy -> Privacy -> Automation\r\n\r\n```js\r\n// Menu: Switch osx theme\r\n// Shortcut: option command t\r\n// Author: Oskars Ezerins\r\n\r\nconst toggleTheme = async () => {\r\n  let script = `\r\n  tell application \"System Events\"\r\n    tell appearance preferences\r\n      set dark mode to not dark mode\r\n    end tell\r\n  end tell\r\n  `.trim()\r\n  return await global.applescript(script)\r\n}\r\n\r\ntoggleTheme()\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/456","img":"https://avatars.githubusercontent.com/u/18247063?u=b194d1f49eacbd10e90eeddfc7941822205e75d4&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/3830326?v=4","user":"stevebarakat","author":null,"twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/444","url":"https://github.com/johnlindquist/kit/discussions/444","title":"React Sandbox","name":"React Sandbox","extension":".md","description":"Created by stevebarakat","resourcePath":"/johnlindquist/kit/discussions/444","createdAt":"2021-09-22T02:35:23Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANrkH","body":"\r\n[Install react-sandbox](https://scriptkit.com/api/new?name=react-sandbox&url=https://gist.githubusercontent.com/stevebarakat/fcb2d504ba35eb653b72f0b78d1e26b5/raw/433accc5cfc9b35974fffa141d05c410d44b1875/react-sandbox.js\")\r\n\r\n```js\r\n// Menu: React Sandbox\r\n// Description: Barebones React Starter\r\n// Author: S.Barakat\r\n\r\n//Log: false\r\n\r\n// Prevent Scriptkit from closing until script finishes\r\nsetIgnoreBlur(true);\r\n\r\n// Find and replace\r\nlet replaceInFile = async (filePath, regex, string) => {\r\n  let content = await readFile(filePath, \"utf-8\");\r\n  let updatedContent = content.replace(new RegExp(regex), string);\r\n  await writeFile(filePath, updatedContent);\r\n};\r\n\r\n// $`` is using the \"zx\" tool which wraps around \"exec\"\r\n// \"sed\" is a very powerful search/replace tool. We can use it for removing lines:\r\nlet removeLine = async (searchArgs, file) => {\r\n  for (let n = 0; n < searchArgs.length; n++) {\r\n    await $`sed -i .bak /${searchArgs[n]}/d ${file}`;\r\n  }\r\n};\r\n\r\nlet reset = false;\r\n// Prompt to reset settings\r\nlet resetSettings = await arg(\"Reset settings?\", [\"no\", \"yes\"]);\r\nif (resetSettings === \"yes\") {\r\n  reset = true;\r\n}\r\n\r\n// Prompt for the project name\r\nlet projectName = await arg(\"Project name\");\r\n// Remove any spaces or uppercase letters from project name.\r\nprojectName = await projectName.toLowerCase().replace(/\\s/g, \"\");\r\n\r\n// Prompt for the project directory\r\nlet projectDir = await env(\"PROJECT_DIR\", {\r\n  placeholder: \"proj dir: from home (~/)\",\r\n  reset: reset,\r\n});\r\n\r\n// \"home\" is a helper to create paths in your home dir\r\ncd(home());\r\nmkdir(projectDir);\r\ncd(projectDir);\r\n\r\n// Create new app with CRA\r\nawait $`npx create-react-app ${projectName.toLowerCase()}`;\r\n\r\ncd(path.resolve(projectName, \"src\"));\r\n\r\n// Note: \"rm\" is actually mapped to \"trash\" so files get moved to your trash bin instead of permenantly deleted\r\nrm([\r\n  `App.test.js`,\r\n  `index.css`,\r\n  `setUpTests.js`,\r\n  `reportWebVitals.js`,\r\n  `logo.svg`,\r\n]);\r\n\r\n// remove web-vitals and testing-library\r\nawait \"npm remove web-vitals @testing-library/jest-dom @testing-library/react @testing-library/user-event\";\r\n\r\nlet filePath = path.resolve();\r\n\r\nawait removeLine([\"logo\"], \"App.js\");\r\nawait removeLine([\"WebVitals\", \"vitals\", \"performance\"], \"index.js\");\r\n\r\n// Download to current dir\r\nawait download(\"https://meyerweb.com/eric/tools/css/reset/reset.css\", \".\");\r\n\r\nawait replaceInFile(\r\n  filePath + \"/App.js\",\r\n  `<header className=\"App-header\">\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>`,\r\n  `App`\r\n);\r\n\r\nawait replaceInFile(\r\n  filePath + \"/index.js\",\r\n  `import './index.css'`,\r\n  `import './reset.css'`\r\n);\r\n\r\nawait replaceInFile(\r\n  filePath + \"/App.css\",\r\n  /^(?=[\\S\\s]{10,8000})[\\S\\s]*$/im,\r\n  `\r\n  *,\r\n  *::before,\r\n  *::after {\r\n    box-sizing: border-box;\r\n  }\r\n  body {\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }`\r\n);\r\n\r\nrm([`index.js.bak`, `App.js.bak`]);\r\n\r\nsetIgnoreBlur(false);\r\nedit(`${filePath}/../`);\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/444","img":"https://avatars.githubusercontent.com/u/3830326?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/442","url":"https://github.com/johnlindquist/kit/discussions/442","title":"Scripts in GitHub actions (preview)","name":"Scripts in GitHub actions (preview)","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/442","createdAt":"2021-09-21T19:34:15Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"D_kwDOEu7MBc4ANrYA","body":"## tl;dr Here's an example repo\r\n\r\nThe example script creates a release, downloads an image, and uploads it to the release.\r\n\r\nhttps://github.com/johnlindquist/kit-action-example\r\n\r\n## Template Repo\r\n\r\nThis page has a \"one-click\" clone so you can add/play with your own script.\r\n\r\nhttps://github.com/johnlindquist/kit-action-template\r\n\r\n## What is it?\r\n\r\nUse any of your scripts in a GitHub action. `use` the `kit-action` and point it to a scripts in your `scripts` dir:\r\n\r\n```yml\r\nname: \"example\"\r\non:\r\n  workflow_dispatch:\r\n  pull_request:\r\n  push:\r\n    branches:\r\n      - main\r\n\r\njobs:\r\n  example:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Script Kit\r\n        uses: johnlindquist/kit-action@main\r\n        with:\r\n          script: \"example-script\" # The name of a script in your ./scripts dir\r\n```\r\n\r\n## Add env vars:\r\n\r\nYou most likely add [\"secrets\" to GitHub actions](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-an-environment), so you'll want to pass them to your scripts as environment variables:\r\n\r\n```yml\r\njobs:\r\n  example:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Script Kit\r\n        uses: johnlindquist/kit-action@main\r\n        with:\r\n          script: \"example-script\"\r\n        env:\r\n          REPO_TOKEN: \"${{ secrets.REPO_TOKEN }}\" # load in your script with await env(\"REPO_TOKEN\")\r\n```\r\n\r\n## Works with your existing repos\r\n\r\nFeel free to add this action and a `scripts` dir to your existing repos. It automatically loads in your repo so you can parse `package.json`, compress assets, or whatever it is you're looking to add to your CI.\r\n\r\n## What does \"preview\" mean?\r\n\r\nEverything is working, but it's pointing to the \"main\" branch rather than a tagged version. Once I get some feedback, I'll tag a \"1.0\" version so you can `uses: @johlindquist/kit-action@v1`\r\n\r\n## Please ask for help! 😇\r\n\r\nI'd ❤️ to help you script something for a github action! Please let me know whatever I can do to help.","value":"https://github.com/johnlindquist/kit/discussions/442","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/440","url":"https://github.com/johnlindquist/kit/discussions/440","title":"(Gitlab) Open next MR that awaits approval","name":"(Gitlab) Open next MR that awaits approval","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/440","createdAt":"2021-09-18T20:02:58Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANqQ0","body":"\r\n[Install nextMR](https://scriptkit.com/api/new?name=nextMR&url=https://gist.githubusercontent.com/hakubo/9b08be9ee12fa5862dd5e10d8d5ac8b4/raw/1ccb059df8f5017f51250377c71425d81389efaf/nextMR.js\")\r\n\r\n```js\r\n// Menu: GitLab - next MR\r\n// Description: Open next MR that I have not approved\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n// Shortcut: ctrl opt \\\r\n\r\nconst { request, gql, GraphQLClient } = await npm(\"graphql-request\");\r\nconst dayjs = await npm(\"dayjs\");\r\nimport relativeTime from \"dayjs/plugin/relativeTime.js\";\r\ndayjs.extend(relativeTime);\r\n\r\nconst domain = await env(\"GITLAB_DOMAIN\");\r\nconst token = await env(\"GITLAB_TOKEN\");\r\nconst username = await env(\"GITLAB_USERNAME\");\r\nconst jiraDomain = await env(\"JIRA_DOMAIN\");\r\nconst requiredApprovals = Number(await env(\"GITLAB_REQUIRED_APPROVALS\"));\r\nconst debug = false;\r\n\r\nfunction log(...args) {\r\n  if (debug) {\r\n    console.log(...args);\r\n  }\r\n}\r\n\r\nconst graphQLClient = new GraphQLClient(domain + \"/api/graphql\", {\r\n  headers: {\r\n    \"PRIVATE-TOKEN\": token,\r\n  },\r\n});\r\n\r\nconst projects = gql`\r\n  query($name: String!) {\r\n    projects(search: $name, membership: true) {\r\n      nodes {\r\n        nameWithNamespace\r\n        fullPath\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nif (!env.GITLAB_PROJECT_PATH) {\r\n  const fullPath = await arg(\"Search project\", async (input) => {\r\n    return (\r\n      await graphQLClient.request(projects, { name: input })\r\n    ).projects.nodes.map((project) => ({\r\n      name: project.nameWithNamespace,\r\n      description: project.fullPath,\r\n      value: project.fullPath,\r\n    }));\r\n  });\r\n\r\n  await cli(\"set-env-var\", \"GITLAB_PROJECT_PATH\", fullPath);\r\n}\r\n\r\nconst queryMrs = gql`\r\n  query($projectPath: ID!) {\r\n    project(fullPath: $projectPath) {\r\n      mergeRequests(state: opened, sort: UPDATED_DESC) {\r\n        nodes {\r\n          title\r\n          webUrl\r\n          iid\r\n          draft\r\n          description\r\n          createdAt\r\n          approvedBy {\r\n            nodes {\r\n              name\r\n              username\r\n            }\r\n          }\r\n          author {\r\n            name\r\n            username\r\n            avatarUrl\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst query = gql`\r\n  query($iid: String!, $projectPath: ID!) {\r\n    project(fullPath: $projectPath) {\r\n      mergeRequest(iid: $iid) {\r\n        commitsWithoutMergeCommits(first: 1) {\r\n          nodes {\r\n            authoredDate\r\n          }\r\n        }\r\n        headPipeline {\r\n          status\r\n        }\r\n        notes {\r\n          nodes {\r\n            updatedAt\r\n            author {\r\n              username\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nlet nextMR;\r\nconst myMrs = [];\r\nconst drafts = [];\r\nconst awaitingReview = [];\r\nconst alreadyCommented = [];\r\nconst haveAuthorCommented = [];\r\nconst haveOthersCommented = [];\r\nconst haveFailingPipeline = [];\r\nconst alreadyApprovedByMe = [];\r\nconst alreadyApprovedByOthers = [];\r\n\r\nconst {\r\n  project: {\r\n    mergeRequests: { nodes: mergeRequests },\r\n  },\r\n} = await graphQLClient.request(queryMrs, {\r\n  projectPath: env.GITLAB_PROJECT_PATH,\r\n});\r\n\r\narg(\"Processing...\");\r\nlog(\"Show list\", flag.showList);\r\nlog(\"Checking\", mergeRequests.length, \"MRs\");\r\n\r\nfor (let mr of mergeRequests) {\r\n  log(\"Checking MR\", mr.title, `(${mr.author.username})`);\r\n  const approvedBy = mr.approvedBy.nodes.map((node) => node.username);\r\n\r\n  if (mr.author.username === username) {\r\n    log(\"^ This is my MR\");\r\n    myMrs.push(mr);\r\n    continue;\r\n  }\r\n\r\n  if (mr.draft) {\r\n    drafts.push(mr);\r\n    log(\"^ This is a draft\");\r\n    continue;\r\n  }\r\n\r\n  if (approvedBy.includes(username)) {\r\n    log(\"^ Approved by me\");\r\n    alreadyApprovedByMe.push(mr);\r\n    continue;\r\n  } else {\r\n    if (approvedBy.length >= requiredApprovals) {\r\n      log(\"^ Approved by others\");\r\n      alreadyApprovedByOthers.push(mr);\r\n      continue;\r\n    }\r\n\r\n    const {\r\n      project: { mergeRequest },\r\n    } = await graphQLClient.request(query, {\r\n      iid: mr.iid,\r\n      projectPath: env.GITLAB_PROJECT_PATH,\r\n    });\r\n\r\n    const pipelineStatus = mergeRequest.headPipeline.status;\r\n\r\n    if (pipelineStatus !== \"SUCCESS\") {\r\n      log(\"^ Failed pipeline\");\r\n      haveFailingPipeline.push(mr);\r\n      continue;\r\n    }\r\n\r\n    const comments = mergeRequest.notes.nodes;\r\n\r\n    const anyLatestComment = comments[0];\r\n    const myLatestComment = comments.find(\r\n      (comment) => comment.author.username === username\r\n    );\r\n    const authorLatestComment = comments.find(\r\n      (comment) => comment.author.username === mr.author.username\r\n    );\r\n\r\n    if (myLatestComment) {\r\n      const latestCommitTime = dayjs(\r\n        mergeRequest.commitsWithoutMergeCommits.nodes[0].authoredDate\r\n      );\r\n      const myLatestCommentTime = dayjs(myLatestComment.updatedAt);\r\n\r\n      if (latestCommitTime.isBefore(myLatestCommentTime)) {\r\n        log(\"^ awaits new commits after my comments\");\r\n        alreadyCommented.push(mr);\r\n        continue;\r\n      }\r\n\r\n      if (authorLatestComment) {\r\n        const authorLatestCommentTime = dayjs(authorLatestComment.updatedAt);\r\n\r\n        if (authorLatestCommentTime.isAfter(myLatestComment.updatedAt)) {\r\n          log(\"^ have some comments by the MR author after my comment\");\r\n          haveAuthorCommented.push(mr);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      if (anyLatestComment) {\r\n        const latestCommentTime = dayjs(anyLatestComment.updatedAt);\r\n\r\n        if (latestCommentTime.isAfter(myLatestComment.updatedAt)) {\r\n          log(\"^ have some comments by other after my comment\");\r\n          haveOthersCommented.push(mr);\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!flag.showList) {\r\n      nextMR = mr;\r\n      break;\r\n    } else {\r\n      awaitingReview.push(mr);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createJiraLinks(text) {\r\n  return text.replace(\r\n    /[A-Z]{1,5}-[0-9]*/g,\r\n    (ticketNumber) => `[${ticketNumber}](${jiraDomain}}/browse/${ticketNumber})`\r\n  );\r\n}\r\n\r\nfunction getName(mr) {\r\n  if (mr.author.username === username) {\r\n    return `${!mr.draft && mr.approvedBy.nodes.length < 2 ? \"!A \" : \"\"}${\r\n      mr.title\r\n    }`;\r\n  }\r\n\r\n  return mr.title;\r\n}\r\n\r\nfunction getChoices(mrs, description) {\r\n  return mrs.map((mr) => ({\r\n    name: getName(mr),\r\n    value: mr.webUrl,\r\n    description: description,\r\n    img: mr.author.avatarUrl.includes(\"http\")\r\n      ? mr.author.avatarUrl\r\n      : domain + mr.author.avatarUrl,\r\n    preview: md(\r\n      `# ${createJiraLinks(mr.title)}\r\n## Created ${dayjs(mr.createdAt).fromNow()} by ${mr.author.name}\r\n\r\n## ${description}\r\n\r\n## Approved by\r\n${\r\n  mr.approvedBy.nodes.length\r\n    ? mr.approvedBy.nodes\r\n        .map(\r\n          (user) => `* ${user.name}\r\n`\r\n        )\r\n        .join(\"\")\r\n    : \"- nobody\"\r\n}\r\n\r\n${createJiraLinks(\r\n  mr.description.replace(\r\n    /\\/uploads\\//g,\r\n    domain + \"/uploads/\" + env.GITLAB_PROJECT_PATH + \"/\"\r\n  )\r\n)}`\r\n    ),\r\n  }));\r\n}\r\n\r\nif (nextMR) {\r\n  await focusTab(nextMR.webUrl);\r\n} else {\r\n  const choices = [\r\n    ...getChoices(awaitingReview, \"Awaiting Review\"),\r\n    ...getChoices(haveAuthorCommented, \"Author have comments after you\"),\r\n    ...getChoices(haveOthersCommented, \"Someone have comments after you\"),\r\n    ...getChoices(myMrs, \"My merge request\"),\r\n    ...getChoices(haveFailingPipeline, \"Failing Pipeline\"),\r\n    ...getChoices(alreadyCommented, \"You have commented on this\"),\r\n    ...getChoices(alreadyApprovedByOthers, \"Already approved by others\"),\r\n    ...getChoices(alreadyApprovedByMe, \"Already approved by you\"),\r\n    ...getChoices(drafts, \"Draft\"),\r\n  ];\r\n\r\n  if (choices.length) {\r\n    const mr = await arg(\"Open MR:\", choices);\r\n\r\n    if (mr) {\r\n      focusTab(mr);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n```\r\n\r\nThis one I use every day at work. It checks a project for any MR that have no approvals and open it for me automatically.\r\nIn case there is no MR that I should review - it opens arg with a list of all MRs that I might be interested in in this order:\r\n\r\n1. All MRs that I approved but author have comments after me\r\n2. All MRs that I approved but someone have comments after me\r\n3. All my MRs\r\n4. All MRs that have a pipeline failing\r\n5. All MRs that I have already commented\r\n6. All MRs that is already approved by others\r\n7. All MR s that is already approved by me\r\n8. All Draft Mrs.\r\n\r\nFirst time you run it i'll ask you to configure it with gitlab domain, token and your username, jira domain and number of approvals required for each MR.","value":"https://github.com/johnlindquist/kit/discussions/440","img":"https://avatars.githubusercontent.com/u/1018759?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/439","url":"https://github.com/johnlindquist/kit/discussions/439","title":"Conventional comments","name":"Conventional comments","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/439","createdAt":"2021-09-18T19:47:08Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"D_kwDOEu7MBc4ANqQp","body":"\r\n[Install comment](https://scriptkit.com/api/new?name=comment&url=https://gist.githubusercontent.com/hakubo/7813751d84d00da902f997df98a4b9a6/raw/d8e610f13ae4f943c70370195d27497124ee817e/comment.js\")\r\n\r\n```js\r\n// Menu: Conventional comment\r\n// Description: Comments that are easy to grok and grep\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n// Shortcut: opt 0\r\n// Based on: https://hemdan.hashnode.dev/conventional-comments\r\n\r\nconst type = await arg(\"Label\", [\r\n  {\r\n    name: \"👏 praise\",\r\n    value: \"**👏 praise**: \",\r\n    description:\r\n      \"Praises highlight something positive. Try to leave at least one of these comments per review (if it exists :^)\",\r\n  },\r\n  {\r\n    name: \"🤓 nitpick\",\r\n    value: \"**🤓 nitpick**: \",\r\n    description:\r\n      \"Nitpicks are small, trivial, but necessary changes. Distinguishing nitpick comments significantly helps direct the reader's attention to comments requiring more involvement.\",\r\n  },\r\n  {\r\n    name: \"🎯 suggestion\",\r\n    value: \"**🎯 suggestion**: \",\r\n    description:\r\n      \"Suggestions are specific requests to improve the subject under review. It is assumed that we all want to do what's best, so these comments are never dismissed as “mere suggestions”, but are taken seriously.\",\r\n  },\r\n  {\r\n    name: \"🔨 issue\",\r\n    value: \"**🔨 issue**: \",\r\n    description:\r\n      \"Issues represent user-facing problems. If possible, it's great to follow this kind of comment with a suggestion.\",\r\n  },\r\n  {\r\n    name: \"❔ question\",\r\n    value: \"**❔ question**: \",\r\n    description:\r\n      \"Questions are appropriate if you have a potential concern but are not quite sure if it's relevant or not. Asking the author for clarification or investigation can lead to a quick resolution.\",\r\n  },\r\n  {\r\n    name: \"💭 thought\",\r\n    value: \"**💭 thought**: \",\r\n    description:\r\n      \"Thoughts represent an idea that popped up from reviewing. These comments are non-blocking by nature, but they are extremely valuable and can lead to more focused initiatives and mentoring opportunities.\",\r\n  },\r\n  {\r\n    name: \"💣 chore\",\r\n    value: \"**💣 chore**: \",\r\n    description:\r\n      \"Chores are simple tasks that must be done before the subject can be “officially” accepted. Usually, these comments reference some common processes. Try to leave a link to the process described so that the reader knows how to resolve the chore.\",\r\n  },\r\n]);\r\n\r\nsetSelectedText(type);\r\n\r\n```\r\n\r\nSimple list of conventional comments ready to be used.\r\nhttps://conventionalcomments.org/\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/439","img":"https://avatars.githubusercontent.com/u/1018759?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/3830326?v=4","user":"stevebarakat","author":null,"twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/433","url":"https://github.com/johnlindquist/kit/discussions/433","title":"Computer Info","name":"Computer Info","extension":".md","description":"Created by stevebarakat","resourcePath":"/johnlindquist/kit/discussions/433","createdAt":"2021-09-13T20:28:09Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNTcwMTQ1","body":"\r\n[Install computer-info](https://scriptkit.com/api/new?name=computer-info&url=https://gist.githubusercontent.com/stevebarakat/f8c4140f0fc23638cc851a4ae352811a/raw/3dbfd57e6e24f5065cbafc43917a129ab4bc5f2e/computer-info.js\")\r\n\r\n```js\r\n// Menu: Computer Info\r\n// Description: Gets Computer info\r\n// Author: S.Barakat\r\n\r\nimport os from \"os\";\r\n\r\nconst homeDirectory = os.homedir();\r\n\r\nconst osPlatform = os.platform();\r\n\r\nconst cpu = os.cpus();\r\nconst coreCount = cpu.length;\r\nconst cpuModel = cpu[0].model;\r\nconst cpuSpeed = cpu[0].speed;\r\n\r\nlet info = `\r\n* OS: ${osPlatform}\r\n* Home: ${homeDirectory}\r\n* CPU: ${cpuModel}\r\n* Speed: ${cpuSpeed} MHz\r\n* Cores: ${coreCount}\r\n`\r\n\r\n\r\nawait say(\r\n  `\r\n  Your home directory is: ${homeDirectory}. \r\n  The OS platform is: ${osPlatform}. \r\n  The processor speed is ${cpuSpeed} megahertz.\r\n  Your ${cpuModel} has ${coreCount} cores.\r\n  `\r\n);\r\n\r\nawait div(md(info), `p-4`)\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/433","img":"https://avatars.githubusercontent.com/u/3830326?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","author":"Kent C. Dodds","twitter":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/420","url":"https://github.com/johnlindquist/kit/discussions/420","title":"Create new Blog Post","name":"Create new Blog Post","extension":".md","description":"Created by kentcdodds","resourcePath":"/johnlindquist/kit/discussions/420","createdAt":"2021-09-03T13:25:47Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNTU0MjEx","body":"I'm even using metascraper to scrape unsplash for an image, it's alt text, and author (unsplash does not make any of these things easy, yes I realize they have an API, but their terms say you have to hotlink to them if you use it and I don't want to).\r\n\r\nI'm using cloudinary auto-uploads so I don't have to bother uploading the photo manually either :)\r\n\r\n[Install new-post](https://scriptkit.com/api/new?name=new-post&url=https://gist.githubusercontent.com/kentcdodds/f9a5b9f24f8866e75138ff1629bab071/raw/ba9205394f971b62e56064ea528a905b49e10768/new-post.js\")\r\n\r\n```js\r\n// Menu: New Post\r\n// Description: Create a new blog post\r\n// Author: Kent C. Dodds\r\n// Shortcut: command option control p\r\n// Twitter: @kentcdodds\r\n\r\nconst dateFns = await npm('date-fns')\r\nconst prettier = await npm('prettier')\r\nconst YAML = await npm('yaml')\r\nconst slugify = await npm('@sindresorhus/slugify')\r\nconst {format: formatDate} = await npm('date-fns')\r\nconst makeMetascraper = await npm('metascraper')\r\nconst {$filter, toRule} = await npm('@metascraper/helpers')\r\n\r\nconst unsplashTitleToAlt = toRule(str => str.replace(/ photo – .*$/, ''))\r\nconst unsplashOGTitleToAuthor = toRule(str =>\r\n  str.replace(/Photo by (.*?) on Unsplash/, '$1'),\r\n)\r\nconst unsplashImageToPhotoId = toRule(str =>\r\n  new URL(str).pathname.replace('/', ''),\r\n)\r\n\r\nconst metascraper = makeMetascraper([\r\n  {\r\n    unsplashPhotoId: [\r\n      unsplashImageToPhotoId($ =>\r\n        $('meta[property=\"og:image\"]').attr('content'),\r\n      ),\r\n    ],\r\n  },\r\n  {\r\n    author: [\r\n      unsplashOGTitleToAuthor($ =>\r\n        $('meta[property=\"og:title\"]').attr('content'),\r\n      ),\r\n    ],\r\n  },\r\n  {alt: [unsplashTitleToAlt($ => $('title').text())]},\r\n])\r\n\r\nasync function getMetadata(url) {\r\n  const html = await fetch(url).then(res => res.text())\r\n  return metascraper({html, url})\r\n}\r\n\r\nconst blogDir = await env(\r\n  'KCD_BLOG_CONTENT_DIR',\r\n  `What's the path to the blog content directory on this machine?`,\r\n)\r\n\r\nconst title = await arg({\r\n  placeholder: `What's the title of this post?`,\r\n  hint: 'Title',\r\n  ignoreBlur: true,\r\n})\r\n\r\nconst description = await arg({\r\n  placeholder: `What's the description of this post?`,\r\n  hint: 'Description',\r\n  input: 'TODO: add a description',\r\n  ignoreBlur: true,\r\n})\r\n\r\nconst categories = (\r\n  await arg({\r\n    placeholder: `What are the categories of this post?`,\r\n    hint: 'Categories (comma separated)',\r\n    ignoreBlur: true,\r\n  })\r\n)\r\n  .split(',')\r\n  .map(c => c.trim())\r\n\r\nconst keywords = (\r\n  await arg({\r\n    placeholder: `What are the keywords of this post?`,\r\n    hint: 'Keywords (comma separated)',\r\n    ignoreBlur: true,\r\n  })\r\n)\r\n  .split(',')\r\n  .map(c => c.trim())\r\n\r\nconst unsplashPhotoInput = await arg({\r\n  placeholder: `What's the unsplash photo?`,\r\n  hint: 'Unsplash Photo',\r\n  ignoreBlur: true,\r\n})\r\nconst unsplashPhotoUrl = unsplashPhotoInput.startsWith('http')\r\n  ? unsplashPhotoInput\r\n  : `https://unsplash.com/photos/${unsplashPhotoInput}`\r\n\r\nconst metadata = await getMetadata(unsplashPhotoUrl)\r\n\r\nconst frontmatter = YAML.stringify({\r\n  title,\r\n  date: dateFns.format(new Date(), 'yyyy-MM-dd'),\r\n  description,\r\n  categories,\r\n  meta: {keywords},\r\n  bannerCloudinaryId: `unsplash/${metadata.unsplashPhotoId}`,\r\n  bannerAlt: metadata.alt,\r\n  bannerCredit: `Photo by [${metadata.author}](${unsplashPhotoUrl})`,\r\n})\r\n\r\nconst md = `---\r\n${frontmatter}\r\n---\r\n\r\nBe excellent to each other.\r\n`\r\n\r\n// prettify the markdown\r\nconst prettyMd = await prettier.format(md, {\r\n  parser: 'markdown',\r\n  arrowParens: 'avoid',\r\n  bracketSpacing: false,\r\n  embeddedLanguageFormatting: 'auto',\r\n  htmlWhitespaceSensitivity: 'css',\r\n  insertPragma: false,\r\n  jsxBracketSameLine: false,\r\n  jsxSingleQuote: false,\r\n  printWidth: 80,\r\n  proseWrap: 'always',\r\n  quoteProps: 'as-needed',\r\n  requirePragma: false,\r\n  semi: false,\r\n  singleQuote: true,\r\n  tabWidth: 2,\r\n  trailingComma: 'all',\r\n  useTabs: false,\r\n  vueIndentScriptAndStyle: false,\r\n})\r\n\r\nconst filename = slugify(title, {decamelize: false})\r\nconst newFile = path.join(blogDir, `${filename}.mdx`)\r\nawait writeFile(newFile, prettyMd)\r\nawait edit(newFile)\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/420","img":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1780212?u=d13d5e4e13fac82156fe85a78a2079c560a349b8&v=4","user":"hariombalhara","author":"Hariom Balhara","twitter":"hariom_balhara","discussion":"https://github.com/johnlindquist/kit/discussions/409","url":"https://github.com/johnlindquist/kit/discussions/409","title":"Github Actions","name":"Github Actions","extension":".md","description":"Created by hariombalhara","resourcePath":"/johnlindquist/kit/discussions/409","createdAt":"2021-08-25T07:43:09Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNTM4MjI2","body":"[Github Actions Script](https://gist.github.com/hariombalhara/969bd98ec14006d5b8b60fb51d018aa2)\r\n\r\nI have my blog using Notion API and whenever I want to publish a post to my blog, I trigger a GitHub Workflow that does the job.\r\n\r\nEarlier, I used to do it using a bookmark for the workflow and 1-2 additional clicks in Github UI. \r\n","value":"https://github.com/johnlindquist/kit/discussions/409","img":"https://avatars.githubusercontent.com/u/1780212?u=d13d5e4e13fac82156fe85a78a2079c560a349b8&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/405","url":"https://github.com/johnlindquist/kit/discussions/405","title":"beta.55 Improved Search, Drag, and Happiness 😊","name":"beta.55 Improved Search, Drag, and Happiness 😊","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/405","createdAt":"2021-08-20T21:58:48Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zNTMxOTA2","body":"## Search Improvements\r\n\r\nbeta.55 has a vastly improved search:\r\n\r\nSearch descriptions 🎉\r\n\r\n![CleanShot 2021-08-20 at 13 37 44](https://user-images.githubusercontent.com/36073/130285547-24f111d7-a706-4be2-b0d6-b425afbe6683.png)\r\n\r\nSearch shortcuts\r\n\r\n![CleanShot 2021-08-20 at 13 51 49](https://user-images.githubusercontent.com/36073/130286634-4797c029-c2ed-4071-9e1d-285d6bf1a15f.png)\r\n\r\nSearch by kenv\r\n\r\n![CleanShot 2021-08-20 at 13 51 18](https://user-images.githubusercontent.com/36073/130286567-4fd0a155-43a7-4af5-bd3f-c0a9db9ae8dc.png)\r\n\r\nSear by \"command-name\" (if you can't think of // Menu: name)\r\n\r\n![CleanShot 2021-08-20 at 13 54 45](https://user-images.githubusercontent.com/36073/130286878-62b2a139-b3b7-4c34-904f-40d7b03a7e1c.png)\r\n\r\nSorts by \"score\" (rather than alphabetically)\r\n\r\n## Drag\r\n\r\nChoices can now take a `drag` property. This will make list items \"draggable\" and allow you to drag/drop to copy files from your machine (or even from URLs!) into any app. When using remote URLs, their will be a bit of \"delay\" while the file downloads (depending on the file size) between \"drag start\" and \"drop enabled\", so just be aware. I'll add some sort of download progress indicator sometime in the future, just not high priority 😅\r\n\r\n```js\r\n// Menu: Drag demo\r\n\r\nawait arg(\r\n  {\r\n    placeholder: \"Drag something from below\",\r\n    ignoreBlur: true,\r\n  },\r\n  [\r\n    {\r\n      name: \"Heart Eyes (local)\",\r\n      drag: \"/Users/johnlindquist/Downloads/john-hearts@2x.png\",\r\n      img: \"/Users/johnlindquist/Downloads/john-hearts@2x.png\",\r\n    },\r\n    {\r\n      name: \"React logo svg (wikipedia)\",\r\n      drag: \"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\",\r\n      img: \"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\",\r\n    },\r\n  ]\r\n)\r\n```\r\n\r\n![CleanShot 2021-08-20 at 15 26 07](https://user-images.githubusercontent.com/36073/130294979-c45aabe2-6c30-41ad-94b4-64a85a2c34eb.gif)\r\n\r\nYou can use the `drag` object syntax to define a `format` and `data`\r\n\r\n> `text/html`: Renders the HTML payload in contentEditable elements and rich text (WYSIWYG) editors like Google Docs, Microsoft Word, and others.\r\n> `text/plain`: Sets the value of input elements, content of code editors, and the fallback from text/html.\r\n> `text/uri-list`: Navigates to the URL when dropping on the URL bar or browser page. A URL shortcut will be created when dropping on a directory or the desktop.\r\n\r\n```js\r\n// Menu: Drag demo\r\n\r\nawait arg(\r\n  {\r\n    placeholder: \"Drag something from below\",\r\n    ignoreBlur: true,\r\n  },\r\n  [\r\n    {\r\n      name: \"Padding 4\",\r\n      drag: {\r\n        format: \"text/plain\",\r\n        data: `className=\"p-4\"`,\r\n      },\r\n    },\r\n    {\r\n      name: \"I love code\",\r\n      drag: {\r\n        format: \"text/html\",\r\n        data: `<span style=\"background-color:yellow;font-family:Roboto Mono\">I ❤️ code</span>`,\r\n      },\r\n    },\r\n  ]\r\n)\r\n```\r\n\r\n![CleanShot 2021-08-20 at 15 48 00](https://user-images.githubusercontent.com/36073/130296713-6249d5c2-c01f-42d1-b2c2-ea86d2e4c29b.gif)\r\n\r\n## Happiness\r\n\r\nI'm _very_ happy with the state of Script Kit. When I started almost a year ago, I had no idea I could push the concept of creating/sharing/managing custom scripts so far. I think it looks great, feels speedy, and is flexible enough to handle so, so many scenarios.\r\n\r\nWith everything in place, next week I'm starting on creating lessons, demos, and docs. It's time to show you what Script Kit can really do 😉 \r\n\r\nP.S. - Thanks for all the beta-testing and feedback. It's been tremendously helpful!\r\n","value":"https://github.com/johnlindquist/kit/discussions/405","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/400","url":"https://github.com/johnlindquist/kit/discussions/400","title":"Search MDN","name":"Search MDN","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/400","createdAt":"2021-08-17T21:34:27Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNTI1OTI0","body":"\r\n[Install mdn-search](https://scriptkit.com/api/new?name=mdn-search&url=https://gist.githubusercontent.com/johnlindquist/3c3b581c19e5ad78d2a0a8d659dafee8/raw/bc7e56597e2eb90872b1133e17ee77d5b380760e/mdn-search.js\")\r\n\r\n```js\r\n// Shortcode: mdn\r\n// Menu: Search MDN\r\n// Description: Search and open MDN docs\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet searchIndexResponse = await get(\r\n  `https://developer.mozilla.org/en-US/search-index.json`\r\n)\r\n\r\nlet url = await arg(\r\n  `Select doc:`,\r\n  searchIndexResponse.data.map(({ title, url }) => ({\r\n    name: title,\r\n    description: url,\r\n    value: `https://developer.mozilla.org${url}`,\r\n  }))\r\n)\r\n\r\nexec(`open '${url}'`)\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/400","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/397","url":"https://github.com/johnlindquist/kit/discussions/397","title":"beta.46 Design, ⚐ Flags, div, fixed notify","name":"beta.46 Design, ⚐ Flags, div, fixed notify","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/397","createdAt":"2021-08-13T16:33:27Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zNTE2OTE1","body":"## Design/theme\r\n\r\nPut a lot of work into tightening up pixels and made progress towards custom themes:\r\n\r\n![CleanShot 2021-08-13 at 09 35 40](https://user-images.githubusercontent.com/36073/129383567-ae628c68-3c96-463f-a47e-4800186ea7ac.png)\r\n\r\nHere's a silly demo of me playing with theme generation:\r\n\r\nhttps://user-images.githubusercontent.com/36073/129384214-2af744ab-8165-4e3f-825d-42fadbf86aec.mp4\r\n\r\n## Flags ⚐\r\n\r\nAn astute observer would notice that the `Edit` and `Share` tabs are now gone. They've been consolidated into a \"flag menu\".\r\n\r\nWhen you press the `right` key from the main menu of script, the flag menu now opens up. This shows the selected script and gives you some options. It also exposes the keyboard shortcuts associated with those options that you can use to :\r\n\r\n![CleanShot 2021-08-13 at 09 42 52](https://user-images.githubusercontent.com/36073/129384559-bff59ebf-88d9-4b95-b9b5-640ce755fe8f.png)\r\n\r\nI've found I use `cmd+o` and `cmd+n` all the time to tweak scripts of quickly create a new one to play around with.\r\n\r\n### Custom Flags\r\n\r\nYou can pass your own custom flags like so:\r\n\r\n[Install flags-demo](https://scriptkit.com/api/new?name=flags-demo&url=https://gist.githubusercontent.com/johnlindquist/b96c8f8de9c256f909ae0f6ab0adda39/raw/9f049cf454f0766fb278e5ee7a24c6b6776df889/flags-demo.js)\r\n\r\n```js\r\n//Menu: Flags demo\r\n\r\nlet urls = [\r\n  \"https://scriptkit.com\",\r\n  \"https://egghead.io\",\r\n  \"https://johnlindquist.com\",\r\n]\r\n\r\nlet flags = {\r\n  open: {\r\n    name: \"Open\",\r\n    shortcut: \"cmd+o\",\r\n  },\r\n  copy: {\r\n    name: \"Copy\",\r\n    shortcut: \"cmd+c\",\r\n  },\r\n}\r\n\r\nlet url = await arg(\r\n  { placeholder: `Press 'right' to see menu`, flags },\r\n  urls\r\n)\r\n\r\nif (flag?.open) {\r\n  $`open ${url}`\r\n} else if (flag?.copy) {\r\n  copy(url)\r\n} else {\r\n  console.log(url)\r\n}\r\n```\r\n\r\nNotice that `flag` is a global while `flags` is an object you pass to `arg`. This is to help keep it consistent with terminal usage:\r\n\r\nFrom the terminal\r\n```bash\r\nflags-demo --open\r\n```\r\n\r\nWill set the global `flag.open` to `true`\r\n\r\n![CleanShot 2021-08-13 at 10 08 30](https://user-images.githubusercontent.com/36073/129388037-3f27a12d-9e44-4402-a51f-bac39eead54d.png)\r\n\r\n\r\nYou could also run this and pass in all the args:\r\n\r\n```bash\r\nflags-demo https://egghead.io --copy\r\n```\r\n\r\nIn the app, you could create a second script to pass flags to the first with. This is required if you need to pass multiple flags since the `arg` helper can only \"submit\" one per `arg`.\r\n\r\n```js\r\nawait run(`flags-demo https://egghead.io --copy`)\r\n```\r\n\r\nI'll put together some more demos soon. There are plenty of existing CLI tools out there using flags heavily, so lots of inspiration to pull from.\r\n\r\n## `await div()`\r\n\r\nThere's a new `div` \"component\". You can pass in arbitrary HTML. This works well with the `md()` helper which generates `html` from markdown.\r\n\r\n[Install div-demo](https://scriptkit.com/api/new?name=div-demo&url=https://gist.githubusercontent.com/johnlindquist/0ad790953f7101d313abfd48182356b0/raw/c70e17649317986707d2ac714c31afe6f7850015/div-demo.js)\r\n\r\n```js\r\n// Menu: Div Demo\r\n\r\n// Hit \"enter\" to continue, escape to exit\r\nawait div(`<img src=\"https://placekitten.com/320\"/>`)\r\n\r\nawait div(\r\n  md(\r\n    `\r\n    # Some header\r\n\r\n    ## You guessed it, an h2\r\n\r\n    * I\r\n    * love\r\n    * lists\r\n    `\r\n  )\r\n)\r\n\r\n```\r\n\r\n## Fixed `notify`\r\n\r\n`notify` is now fixed so that it doesn't open a prompt\r\n\r\nThe most basic usage is:\r\n\r\n```js\r\nnotify(\"Hello world\")\r\n```\r\n\r\n`notify` leverages [https://www.npmjs.com/package/node-notifier](https://www.npmjs.com/package/node-notifier)\r\n\r\nSo the entire API should be available. Here's an example of using the \"type inside a notification\":\r\n\r\n[Install notify-demo](https://scriptkit.com/api/new?name=notify-demo&url=https://gist.githubusercontent.com/johnlindquist/44387dc5b0c170e4146b061162c33532/raw/1bce77fb778a45cf9052a63d02dcab94a9cf7ef0/notify-demo.js)\r\n\r\n```js\r\n// Menu: Notify Demo\r\nlet notifier = notify({\r\n  title: \"Notifications\",\r\n  message: \"Write a reply?\",\r\n  reply: true,\r\n})\r\n\r\nnotifier.on(\"replied\", async (obj, options, metadata) => {\r\n  await arg(metadata.activationValue)\r\n})\r\n\r\n```\r\n\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/397","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/392","url":"https://github.com/johnlindquist/kit/discussions/392","title":"Genius Lyrics Lookup","name":"Genius Lyrics Lookup","extension":".md","description":"Created by dealingwith","resourcePath":"/johnlindquist/kit/discussions/392","createdAt":"2021-08-12T13:50:24Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNTE0ODcy","body":"Just what it says on the tin. How can I improve this one?\r\n\r\n[Install song-search](https://scriptkit.com/api/new?name=song-search&url=https://gist.githubusercontent.com/dealingwith/11ca5e660d3873a3e521ad2905e2b5b7/raw/4910306cd3818772b1cd67b1718e0f3d59e7ced5/song-search.js)\r\n\r\n```js\r\n// Menu: Genius Lyrics Search\r\n\r\nlet Genius = await npm('genius-lyrics-api')\r\n\r\nlet geniusUserToken = await env(\"GENIUS_AUTH_TOKEN\")\r\nimport { getLyrics, searchSong } from 'genius-lyrics-api';\r\n\r\nlet songTitle = await arg(\"Song Title\")\r\n\r\nlet options = {\r\n  apiKey: geniusUserToken,\r\n  title: songTitle,\r\n  artist: '',\r\n  optimizeQuery: true\r\n}\r\n\r\nlet returnedSongs = await(searchSong(options).then((r) => r))\r\nlet returnedSongTitles = returnedSongs.map(s => s.title)\r\n\r\nlet chosenSongTitle = await arg(\"Which song?\", returnedSongTitles)\r\n\r\nlet songData = returnedSongs.filter(s => s.title == chosenSongTitle)\r\nlet lyrics = await(getLyrics(songData[0].url).then((r) => r))\r\n\r\nlet whatToDo = await arg(\"\", [\"Copy\", \"View\", \"Visit\"])\r\n\r\nif (whatToDo == \"Copy\") copy(lyrics)\r\nelse if (whatToDo == \"View\") await textarea(lyrics)\r\nelse if (whatToDo == \"Visit\") await focusTab(songData[0].url)\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/392","img":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/390","url":"https://github.com/johnlindquist/kit/discussions/390","title":"Resize selected images","name":"Resize selected images","extension":".md","description":"Created by dealingwith","resourcePath":"/johnlindquist/kit/discussions/390","createdAt":"2021-08-12T04:37:13Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNTE0MDc3","body":"Resizes selected images to specified width. Note: overwrites existing files.\r\n\r\n[Install batch-image-resize](https://scriptkit.com/api/new?name=batch-image-resize&url=https://gist.githubusercontent.com/dealingwith/3cdc6420882928df72f9671fd8f366d7/raw/cce80aaf26edd7210f15af16ecb3cade4013dd39/batch-image-resize.js)\r\n\r\n```js\r\nlet Jimp = await npm('jimp')\r\n\r\nlet width = await arg('New width in pixels')\r\n\r\nlet selectedFiles = await getSelectedFile();\r\nlet filePaths = selectedFiles.split(\"\\n\");\r\n\r\nfor (let filePath of filePaths) {\r\n  Jimp.read(filePath, (err, image) => {\r\n    if (err) throw err;\r\n    image.resize(parseInt(width), Jimp.AUTO).write(filePath); // save\r\n  });\r\n}\r\n```","value":"https://github.com/johnlindquist/kit/discussions/390","img":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/17577332?v=4","user":"pomdtr","author":"Achille Lacoin","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/377","url":"https://github.com/johnlindquist/kit/discussions/377","title":"Manipulate the clipboard content using the command line","name":"Manipulate the clipboard content using the command line","extension":".md","description":"Created by pomdtr","resourcePath":"/johnlindquist/kit/discussions/377","createdAt":"2021-07-31T10:42:01Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDkxODQ3","body":"This script allows to quickly run and preview any shell command on the clipboard content using the command line.\r\nExample usecase -> urlencode a string, extract column from a csv, run a jq command...\r\nYou can also chain shell commands using pipes.\r\n\r\n[Install pipe](https://scriptkit.com/api/new?name=pipe&url=https://gist.githubusercontent.com/pomdtr/6d389a4490fd53b6eeaf4ac1e74e820e/raw/65e967a027e2296f620761d949062173979c998b/pipe.js)\r\n\r\n```js\r\n// Menu: Pipe Clipboard to Command\r\n// Decription: Manipulate clipboard content using the command line\r\n// Author: pomdtr\r\n\r\nprocess.env.PATH = `${process.env.HOME}/.local/bin:/usr/local/bin/:${process.env.PATH}`;\r\n\r\nfunction codeblock(text) {\r\n  const triple_backquote = \"```\";\r\n  return `${triple_backquote}shell\\n${text}\\n${triple_backquote}`;\r\n}\r\n\r\n// Persist clipoard inside a file\r\nconst clipboardContent = await paste();\r\nconst tempfile = `${kit.tempdir()}/input.txt`;\r\nawait kit.writeFile(tempfile, clipboardContent, {\r\n  flag: \"w\",\r\n  encoding: \"utf-8\",\r\n});\r\n\r\nlet command = \"\";\r\nlet [stdout, stderr, code] = [null, null, 0];\r\nlet panelContent = await kit.readFile(tempfile, { encoding: \"utf-8\" });\r\n\r\nwhile (true) {\r\n  command = await arg(\r\n    {\r\n      placeholder: \"Input Command:\",\r\n      className: \"p-2\",\r\n      input: command,\r\n      hint: \"Hit enter to run command and save output to clipboard, esc to dismiss window.\"\r\n    },\r\n    md(codeblock(panelContent))\r\n  );\r\n\r\n  if (command) {\r\n    ({ stdout, stderr, code } = exec(`cat ${tempfile} | ${command}`));\r\n    panelContent = code == 0 ? stdout : stderr;\r\n    if (code == 0) {\r\n      panelContent = stdout;\r\n    } else {\r\n      panelContent = stderr;\r\n    }\r\n  } else {\r\n    panelContent = await kit.readFile(tempfile, { encoding: \"utf-8\" });\r\n  }\r\n\r\n  await copy(panelContent);\r\n}\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/377","img":"https://avatars.githubusercontent.com/u/17577332?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/12306850?u=51152dab74c9158efeb6a84a65acf2464cf84218&v=4","user":"benjaminmodayil","author":"Benjamin Modayil","twitter":"modayilme","discussion":"https://github.com/johnlindquist/kit/discussions/373","url":"https://github.com/johnlindquist/kit/discussions/373","title":"Generate TS Interfaces from JSON input","name":"Generate TS Interfaces from JSON input","extension":".md","description":"Created by benjaminmodayil","resourcePath":"/johnlindquist/kit/discussions/373","createdAt":"2021-07-29T20:12:56Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDg5Njcw","body":"Hi everyone,\r\n\r\nJust made this quick script and thought I'd share. My company is updating our codebases to use TypeScript and wanted a way to quickly generate interfaces from JSON input. I'm usually right clicking and copying parts of API responses in the Network tab to pick out the JSON and manually type things out. Now I just copy the JSON, paste into Kit, and then save a few moments of my time. \r\n\r\n## Script\r\n\r\n```javascript\r\n// Title: Generate types\r\n// Description: Paste your JSON in and get your Interfaces straight to your clipboard\r\n// Author: Benjamin Modayil\r\n// Twitter: @24props\r\n\r\nlet {json2ts} = await npm('json-ts')\r\n\r\nlet schema = await arg(\"What is the schema?\");\r\nawait copy(`${json2ts(schema)}`)\r\n\r\nnotify({\r\n  title: 'Interfaces copied to the clipboard',\r\n  message: \"Paste your interfaces into a text editor\"\r\n})\r\nexit() // needed otherwise scriptkit hangs open\r\n```\r\n\r\nI haven't tested the script that much yet, but something that could be tweaked would be wrapping `json-ts` in a try/catch and outputting a different notification depending on the result. \r\n\r\nAnother thing to note is that the output from `json-ts` could always be improved from the developer using the script. I would assume for `json-ts` that it's pretty hard to generate union types without more data to comb through and it's up to the developer to determine when you might need flexibility `number | string` or strictness from something like `\"success\" | \"error\" | \"warning\"`. Also, from the example output below, `json-ts` generates the property `previous` as null, based on the data provided, but I'm guessing it's actually supposed to be a string like `next`. All this to say: \"use at your own discretion\".\r\n\r\n## Example\r\n\r\nGo to this [Pokemon API JSON link](https://pokeapi.co/api/v2/pokemon/), copy JSON, paste into script, paste into editor, and see the below output: \r\n\r\n```typescript\r\ninterface IRootObject {\r\n    count: number;\r\n    next: string;\r\n    previous: null;\r\n    results: IResultsItem[];\r\n}\r\ninterface IResultsItem {\r\n    name: string;\r\n    url: string;\r\n}\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/373","img":"https://avatars.githubusercontent.com/u/12306850?u=51152dab74c9158efeb6a84a65acf2464cf84218&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/365","url":"https://github.com/johnlindquist/kit/discussions/365","title":"beta.33 `console.log` component, cmd+o to Open, `className`","name":"beta.33 `console.log` component, cmd+o to Open, `className`","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/365","createdAt":"2021-07-22T22:44:19Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zNDczNTEw","body":"## `console.log` Component\r\n\r\nThe follow code will create the below prompt (👀 notice the black background logging component):\r\n```js\r\nlet { stdout } = await $`ls ~/projects | grep kit`\r\n\r\nawait arg(`Select a kit dir`, stdout.split(\"\\n\"))\r\n\r\n```\r\n<img width=\"402\" alt=\"CleanShot 2021-07-22 at 16 13 10@2x\" src=\"https://user-images.githubusercontent.com/36073/126716080-db8e1361-7972-488c-8873-2996a7c03064.png\">\r\n\r\n```js\r\nconsole.log(chalk`{green.bold The current date is:}`)\r\nconsole.log(new Date().toLocaleDateString())\r\nawait arg()\r\n```\r\n\r\n<img width=\"416\" alt=\"CleanShot 2021-07-22 at 16 12 24@2x\" src=\"https://user-images.githubusercontent.com/36073/126716010-b38c8d28-af68-4f1f-aefd-93de186a03d2.png\">\r\n\r\nThe log even persists between prompts:\r\n\r\n```js\r\nlet first = await arg(\"First name\")\r\nconsole.log(first)\r\nlet last = await arg(\"Last name\")\r\nconsole.log(`${first} ${last}`)\r\nlet age = await arg(\"Age\")\r\nconsole.log(`${first} ${last} ${age}`)\r\nlet emotion = await arg(\"Emotion\")\r\nconsole.log(`${first} ${last} ${age} ${emotion}`)\r\nawait arg()\r\n```\r\n<img width=\"415\" alt=\"CleanShot 2021-07-22 at 16 19 36@2x\" src=\"https://user-images.githubusercontent.com/36073/126716651-bb7b539a-2314-4d95-bcd9-5104c8d18ec5.png\">\r\n\r\nClick the \"edit\" icon to open the full log in your editor:\r\n![CleanShot 2021-07-22 at 16 20 57@2x](https://user-images.githubusercontent.com/36073/126716749-4eda367a-4e55-424f-915a-30207583cd3f.png)\r\n\r\n## cmd+o to Open\r\n\r\nFrom the main menu, hitting `cmd+o` will open:\r\n\r\n1. The currently selected script from the main menu\r\n2. The currently running script\r\n3.  Any \"choice\" that provides a \"filePath\" prop:\r\n\r\n```js\r\nawait arg(`cmd+o to open file`, [\r\n  {\r\n    name: \"Karabiner config\",\r\n    filePath: \"~/.dotfiles/karabiner/karabiner.edn\",\r\n  },\r\n  {\r\n    name: \"zshrc\",\r\n    filePath: \"~/.zshrc\",\r\n  },\r\n])\r\n```\r\n\r\nI've found this really useful when I want to tweak the running script, but I don't want to go back through the process of finding it.\r\n\r\n## Experimental `className`\r\n\r\nYou can pass `className` into the arg options to affect the container for the list items or panel. Most classes from Tailwind should be available. Feel free to play around with it and let me know how it goes 😇:\r\n\r\n```js\r\nawait arg(\r\n  {\r\n    className: \"p-4 bg-black font-mono text-xl text-white\",\r\n  },\r\n  `\r\n  <p>Working on Script Kit today</p>\r\n  <img src=\"https://i.imgflip.com/5hc0v4.jpg\" title=\"made at imgflip.com\"/>`\r\n)\r\n\r\n```\r\n\r\n<img width=\"428\" alt=\"CleanShot 2021-07-22 at 16 38 40@2x\" src=\"https://user-images.githubusercontent.com/36073/126717978-2bf8d0e4-24a4-47ad-948a-97fde38a83e0.png\">\r\n\r\n\r\n```js\r\nawait arg(\r\n  {\r\n    className: \"p-4 bg-black font-mono text-xl text-white\",\r\n  },\r\n  [\"Eat\", \"more\", \"tacos 🌮\"]\r\n)\r\n```\r\n\r\n<img width=\"420\" alt=\"CleanShot 2021-07-22 at 16 41 19@2x\" src=\"https://user-images.githubusercontent.com/36073/126718146-c3c94b10-0e5a-4e9d-8bab-a6b7c3b6f1d3.png\">\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/365","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","author":"Kent C. Dodds","twitter":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/357","url":"https://github.com/johnlindquist/kit/discussions/357","title":"Daily Story","name":"Daily Story","extension":".md","description":"Created by kentcdodds","resourcePath":"/johnlindquist/kit/discussions/357","createdAt":"2021-07-20T18:16:42Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDY5NTIw","body":"Wrote a new script where I can quickly write little stories of what's going on in my life. It's kind of like a little journal. I set the `DAILY_STORY_DIRECTORY` to a folder in dropbox.\r\n\r\nThe only thing I'm unsure of right now is I want to use `textarea` but I don't know how to actually submit what's been typed. Hitting \"enter\" just (correctly) inserts a newline. I tried ⌘+enter and that didn't work. Anyone know how to submit a textarea?\r\n\r\n[Install daily-story](https://scriptkit.com/api/new?name=daily-story&url=https://gist.githubusercontent.com/kentcdodds/1a5d2b4eabd90ae6b45734ddc2a040dc/raw/d59daeb69d8ef54d54fc4823c0b7f2c147d6932e/daily-story.js)\r\n\r\n```js\r\n// Menu: Daily Story\r\n// Description: Write a quick story\r\n// Author: Kent C. Dodds\r\n// Shortcut: command option control o\r\n// Twitter: @kentcdodds\r\n\r\nconst dateFns = await npm('date-fns')\r\nconst filenamify = await npm('filenamify')\r\nconst prettier = await npm('prettier')\r\n\r\nconst storyDir = await env(\r\n  'DAILY_STORY_DIRECTORY',\r\n  `Where do you want daily stories to be saved?`,\r\n)\r\n\r\nconst story = await arg({placeholder: 'Write your story here'})\r\n\r\nconst today = dateFns.format(new Date(), 'yyyy-MM-dd')\r\nconst date = await arg({\r\n  input: today,\r\n  hint: 'When did this happen?',\r\n})\r\nconst title = await arg({\r\n  placeholder: 'What do you want to call this story?',\r\n  hint: 'Title',\r\n})\r\n\r\nconst md = `---\r\ntitle: ${title}\r\ndate: ${date}\r\nwritten: ${today}\r\n---\r\n\r\n${story}\r\n`\r\n\r\n// prettify the markdown\r\nconst prettyMd = await prettier.format(md, {\r\n  parser: 'markdown',\r\n  arrowParens: 'avoid',\r\n  bracketSpacing: false,\r\n  embeddedLanguageFormatting: 'auto',\r\n  htmlWhitespaceSensitivity: 'css',\r\n  insertPragma: false,\r\n  jsxBracketSameLine: false,\r\n  jsxSingleQuote: false,\r\n  printWidth: 80,\r\n  proseWrap: 'always',\r\n  quoteProps: 'as-needed',\r\n  requirePragma: false,\r\n  semi: false,\r\n  singleQuote: true,\r\n  tabWidth: 2,\r\n  trailingComma: 'all',\r\n  useTabs: false,\r\n  vueIndentScriptAndStyle: false,\r\n})\r\n\r\nconst filename = filenamify(\r\n  `${date}-${title.toLowerCase().replace(/ /g, '-')}.md`,\r\n  {replacement: '-'},\r\n)\r\nawait writeFile(path.join(storyDir, filename), prettyMd)\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/357","img":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/353","url":"https://github.com/johnlindquist/kit/discussions/353","title":"beta.29 M1 build, install remote kenvs, polish, upcoming lessons","name":"beta.29 M1 build, install remote kenvs, polish, upcoming lessons","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/353","createdAt":"2021-07-16T18:29:00Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zNDY0MDk2","body":"I'm starting on lessons/docs on Monday. If you have anything specific you want me to cover, please reply below!\r\n\r\n## M1 Build\r\n If you're on an M1 mac, you can download the new M1 build from https://www.scriptkit.com/\r\n\r\n1. Download https://www.scriptkit.com/\r\n2. Quit Kit. *note - typing `kit quit` or `k q` in the app is the fastest way to quit.\r\n3. Drag/drop to overwrite your previous build\r\n4. Kit should now auto-update from the M1 channel\r\n5. Open Kit\r\n\r\n## Kenv Management\r\nThere are a lot of tools to help manage other kenvs. They're in the `Kit` menu and once you've installed a remote kenv (which is really just a git repo with a scripts dir), then more options show up in the `Edit` menu to move scripts between kenvs, etc. I'll cover this in detail in the docs/lessons\r\n\r\n## Polish\r\nLots of UI work:\r\n* Remembering position - Each script with a `//Shortcut` will remember its last individual prompt position. For example, if you have a script that uses `textarea`, then drag it to the upper right, the next time you launch that script, it will launch in that position.\r\n* `//Image` metadata - Scripts can now have images:\r\n```js\r\n//Image: https://placekitten.com/64\r\n```\r\nor\r\n```js\r\n//Image: logo.png\r\n```\r\nwill load from `~/.kenv/assets/logo.png`\r\n\r\n\r\n* Spinner - added a spinner for when you submit a prompt and the process needs to do some work before opening the next prompt\r\n\r\n![CleanShot 2021-07-16 at 12 22 58](https://user-images.githubusercontent.com/36073/125992326-7b6f0034-00e8-41df-9ca7-f0e33becf0b2.gif)\r\n\r\n\r\n* Resizing - *Lots* of work on getting window resizing behavior consistent between different UIs. This was a huge pain, but you'll probably never appreciate it 😅\r\n* Lots more - many more small things\r\n\r\n## Lessons!\r\n\r\nI'm starting to work on lessons next week and getting back into streaming schedule. I would ♥️ to hear any specific questions or lessons you would like to see to help you remove some friction from your day. I'll be posting the lessons over on [egghead.io](egghead.io) for your viewing pleasure. Please ask questions in the replies!\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/353","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/2118956?u=dd12813efdeb91151f98fcecd5c078f29bed6ff9&v=4","user":"JCofman","author":"Jacob Cofman","twitter":"JCofman","discussion":"https://github.com/johnlindquist/kit/discussions/341","url":"https://github.com/johnlindquist/kit/discussions/341","title":"Generate fake data with faker.js","name":"Generate fake data with faker.js","extension":".md","description":"Created by JCofman","resourcePath":"/johnlindquist/kit/discussions/341","createdAt":"2021-07-10T10:00:11Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDU0MDky","body":"Here is a simple one to generate fake data with https://www.npmjs.com/package/@faker-js/faker and save it to clipboard.\r\n\r\n> Note: Updated to use https://www.npmjs.com/package/@faker-js/faker - @johnlindquist \r\n\r\n\r\n[Open fake in Script Kit](https://scriptkit.com/api/new?name=fake&url=https://gist.githubusercontent.com/johnlindquist/a477dfe683294781d77fb0fa2171a501/raw/65c0dbb1b98c22c6682f834ead9c329953d6c5c6/fake.ts\")\r\n\r\n```js\r\n// Menu: Fake\r\n// Description: generate fake data with faker.js\r\n// Author: Jacob Cofman\r\n// Twitter: @jcofman\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst {faker} = await npm(\"@faker-js/faker\");\r\n\r\nfunction getMethodFakerData(method) {\r\n  return Object.keys(faker[method]);\r\n}\r\n\r\nconst fakerMethods = [\r\n  \"name\",\r\n  \"address\",\r\n  \"phone\",\r\n  \"internet\",\r\n  \"company\",\r\n  \"image\",\r\n  \"lorem\",\r\n  \"helpers\",\r\n  \"date\",\r\n  \"random\",\r\n  \"finance\",\r\n  \"hacker\",\r\n  \"system\",\r\n  \"commerce\",\r\n  \"database\",\r\n  \"animal\",\r\n  \"git\",\r\n  \"music\",\r\n  \"datatype\",\r\n];\r\n\r\nconst method = await arg(\"Select-Base-Method:\", fakerMethods);\r\n\r\nconst fakerBaseMethods = getMethodFakerData(method);\r\n\r\nconst script = await arg(\"Select-Script:\", fakerBaseMethods);\r\n\r\nconst result = await faker[method][script]();\r\ncopy(result);\r\nawait arg(result);\r\n```\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/341","img":"https://avatars.githubusercontent.com/u/2118956?u=dd12813efdeb91151f98fcecd5c078f29bed6ff9&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","author":"Kent C. Dodds","twitter":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/336","url":"https://github.com/johnlindquist/kit/discussions/336","title":"ConvertKit lookup","name":"ConvertKit lookup","extension":".md","description":"Created by kentcdodds","resourcePath":"/johnlindquist/kit/discussions/336","createdAt":"2021-07-08T05:07:55Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDUwNjMy","body":"Created a new script to easily query convert kit because I was tired of the manual process of going to convert kit and clicking around to find a particular user. Wrote this in 2 minutes (had some of the convert kit API code already). Man I love ScriptKit.\r\n\r\n[Install convert-kit-lookup](https://scriptkit.com/api/new?name=convert-kit-lookup&url=https://gist.githubusercontent.com/kentcdodds/815c2fad013740830946c17468e3bbb7/raw/7b1c9ba639eb6881ba8d595f14eca04832087af9/convert-kit-lookup.js)\r\n\r\n```js\r\n// Menu: ConvertKit > Lookup\r\n// Description: Query convertkit\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nconst CONVERT_KIT_API_SECRET = await env('CONVERT_KIT_API_SECRET')\r\nconst CONVERT_KIT_API_KEY = await env('CONVERT_KIT_API_KEY')\r\n\r\nconst query = await arg('query')\r\nlet url\r\nif (query.includes('@')) {\r\n  const sub = await getConvertKitSubscriber(query)\r\n  if (sub?.id) {\r\n    url = `https://app.convertkit.com/subscribers/${sub.id}`\r\n  }\r\n}\r\n\r\nif (!url) {\r\n  url = `https://app.convertkit.com/subscribers?utf8=%E2%9C%93&q=${query}&status=all`\r\n}\r\nexec(`open \"${url}\"`)\r\n\r\nasync function getConvertKitSubscriber(email) {\r\n  const url = new URL('https://api.convertkit.com/v3/subscribers')\r\n  url.searchParams.set('api_secret', CONVERT_KIT_API_SECRET)\r\n  url.searchParams.set('email_address', email)\r\n\r\n  const resp = await fetch(url.toString())\r\n  const json = await resp.json()\r\n  const {subscribers: [subscriber] = []} = json\r\n\r\n  return subscriber\r\n}\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/336","img":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/335","url":"https://github.com/johnlindquist/kit/discussions/335","title":"Title Case Selected Text","name":"Title Case Selected Text","extension":".md","description":"Created by dealingwith","resourcePath":"/johnlindquist/kit/discussions/335","createdAt":"2021-07-01T14:06:36Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDQwNDQw","body":"Here's a really quick one I decided to spin up this morning:\r\n\r\n[Install title-case](https://scriptkit.com/api/new?name=title-case&url=https://gist.githubusercontent.com/dealingwith/02ad42f0b334ed36faf7d034f8d97c76/raw/14467032b86ce587d70032f4cd29b913ef30234c/title-case.js)\r\n\r\n```js\r\nlet { titleCase } = await npm(\"title-case\");\r\nlet selectedText = await getSelectedText();\r\nlet value = titleCase(selectedText);\r\nawait setSelectedText(value);\r\n```\r\n\r\n\r\n...also, a tiny variant on the above I like to call The Proper Namifier™\r\n\r\n```js\r\nlet { titleCase } = await npm(\"title-case\");\r\nlet selectedText = await getSelectedText();\r\nlet value = titleCase(selectedText) + '™';\r\nawait setSelectedText(value);\r\n``` ","value":"https://github.com/johnlindquist/kit/discussions/335","img":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/330","url":"https://github.com/johnlindquist/kit/discussions/330","title":"Beta.20 MOAR SPEED! ⚡️","name":"Beta.20 MOAR SPEED! ⚡️","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/330","createdAt":"2021-06-26T17:03:40Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zNDMxOTgz","body":"## Process Pools and Virtualized Lists\r\n\r\nhttps://user-images.githubusercontent.com/36073/123519955-7fdd8200-d66b-11eb-8167-09b9daed1c9f.mp4\r\n\r\n\r\n## Experimental `textarea`\r\n\r\nFeel free to play around with the `textarea` for multiline input.\r\n\r\n```js\r\nlet value = await textarea()\r\n```\r\n\r\nThe API of textarea will change (it currently just sets the placeholder), but it will always return the string value of the textarea, so there won't be any breaking changes if you just keep the default behavior. `cmd+s` submits. `cmd+w` cancels.\r\n\r\n## Experimental `editor` (this will become a _paid_  💵 feature later this year)\r\n\r\nAs an upgrade to `textarea`, `await editor()` will give you a full editor experience. Same as the textarea, the API will also change, but will always return a string of the content.\r\n\r\n\r\n```js\r\n// Defaults to markdown\r\nlet value = await editor()\r\n```\r\n\r\n> ⚠️ API is subject to change!\r\n```js\r\nlet value = await editor(\"markdown\", `\r\n## Preloaded content\r\n\r\n* nice\r\n`)\r\n```\r\n\r\n```js\r\nlet value = await editor(\"javascript\", `\r\nconsole.log(\"Support other languages\")\r\n`)\r\n```\r\n\r\n### A note on paid features\r\n\r\nEverything you've used so far in the Script Kit app will stay free. The core `kit` is open-source MIT. \r\n\r\nThe paid features will be add-ons to the core experience: Themes, Editor, Widgets, Screenshots, Record Audio, and many more fun ideas. These will roll out experimentally in the free version first then move exclusively to the paid version. Expect the paid versions later this year.\r\n","value":"https://github.com/johnlindquist/kit/discussions/330","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/25487857?u=1c81cf15334c751c49f61fe7e0e84b0618eb0e0e&v=4","user":"vojtaholik","author":"Vojta Holik","twitter":"vjthlk","discussion":"https://github.com/johnlindquist/kit/discussions/328","url":"https://github.com/johnlindquist/kit/discussions/328","title":"Compress selected images with Tinify","name":"Compress selected images with Tinify","extension":".md","description":"Created by vojtaholik","resourcePath":"/johnlindquist/kit/discussions/328","createdAt":"2021-06-24T17:28:25Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDI4OTg5","body":"![tinify](https://user-images.githubusercontent.com/25487857/123306748-f706ff00-d521-11eb-9f11-6744d7b1e76b.gif)\r\n\r\n```js\r\n// Menu: Tinify\r\n// Description: Compress selected images with Tinify\r\n// Author: Vojta Holik\r\n// Twitter: @vjthlk\r\n\r\nlet tinify = await npm(\"tinify\");\r\nlet fs = await import(\"fs\");\r\nlet selectedFiles = await getSelectedFile();\r\n\r\ntinify.key = await env(\"TINIFY_API_KEY\", {\r\n  hint: md(\"get your Tinify api key at https://tinypng.com/developers\"),\r\n  ignoreBlur: true,\r\n  secret: true,\r\n});\r\n\r\nlet filePaths = selectedFiles.split(\"\\n\");\r\n\r\nfor (let filePath of filePaths) {\r\n  let directory = path.dirname(filePath);\r\n  let extension = path.extname(filePath);\r\n  let originalFileName = path.basename(filePath);\r\n  let suffix = \"\";\r\n  let isHD = originalFileName.includes(\"@2x\");\r\n  let newFileName = isHD\r\n    ? originalFileName\r\n        .replace(\"@2x\", \"\")\r\n        .replace(extension, `${suffix}@2x${extension}`)\r\n    : originalFileName.replace(extension, `${suffix}${extension}`);\r\n\r\n  fs.readFile(filePath, (err, sourceData) => {\r\n    if (err) throw err;\r\n    tinify.fromBuffer(sourceData).toBuffer((err, resultData) => {\r\n      if (err) throw err;\r\n      fs.writeFile(`${directory}/` + newFileName, resultData, (err) => {\r\n        if (err) throw err;\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n```\r\n\r\n---\r\n\r\n<details>\r\n  <summary>You can change file names and directory to best suite your workflow. Since I often work with <code>@2x</code> images I adjusted the script to correctly suffix that part.</summary>\r\n\r\n```js\r\nlet isHD = originalFileName.includes(\"@2x\");\r\nlet newFileName = isHD\r\n  ? originalFileName\r\n      .replace(\"@2x\", \"\")\r\n      .replace(extension, `${suffix}@2x${extension}`)\r\n  : originalFileName.replace(extension, `${suffix}${extension}`);\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/328","img":"https://avatars.githubusercontent.com/u/25487857?u=1c81cf15334c751c49f61fe7e0e84b0618eb0e0e&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/12891645?u=eb9ed13c1bc9eeccf0b87ddbeea8778c7c32c05a&v=4","user":"JoepKockelkorn","author":"Joep Kockelkorn","twitter":"JoepKockelkorn","discussion":"https://github.com/johnlindquist/kit/discussions/325","url":"https://github.com/johnlindquist/kit/discussions/325","title":"Paste last item from clipboard","name":"Paste last item from clipboard","extension":".md","description":"Created by JoepKockelkorn","resourcePath":"/johnlindquist/kit/discussions/325","createdAt":"2021-06-20T07:15:54Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDIwNDMy","body":"With two globals you can paste the last item from the clipboard:\r\n\r\n`await setSelectedText(await paste());`","value":"https://github.com/johnlindquist/kit/discussions/325","img":"https://avatars.githubusercontent.com/u/12891645?u=eb9ed13c1bc9eeccf0b87ddbeea8778c7c32c05a&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/25487857?u=1c81cf15334c751c49f61fe7e0e84b0618eb0e0e&v=4","user":"vojtaholik","author":"Vojta Holik","twitter":"vjthlk","discussion":"https://github.com/johnlindquist/kit/discussions/320","url":"https://github.com/johnlindquist/kit/discussions/320","title":"Slugify selected file names","name":"Slugify selected file names","extension":".md","description":"Created by vojtaholik","resourcePath":"/johnlindquist/kit/discussions/320","createdAt":"2021-06-15T08:26:48Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zNDEyNTU1","body":"<img src=\"https://p-ZmFjNlQ.b3.n0.cdn.getcloudapp.com/items/mXur6N2W/50e6f3d6-8b3d-4b24-a4c6-3ee047a9613e.gif?v=f5fe168354cb0d1e34dcbf405c7891ac\" width=\"700\" />\r\n\r\n```js\r\n// Menu: Slugify file name\r\n// Description: Slugify selected files\r\n// Author: Vojta Holik\r\n// Twitter: @vjthlk\r\n\r\nlet slugify = await npm(\"slugify\")\r\nlet selectedFiles = await getSelectedFile()\r\n\r\nconst filePaths = selectedFiles.split(\"\\n\")\r\n\r\nfor (let filePath of filePaths) {\r\n  let originalFileName = path.basename(filePath)\r\n  let newFileName = slugify(originalFileName, {\r\n    lower: true,\r\n  })\r\n  let newFilePath = path.join(\r\n    path.dirname(filePath),\r\n    newFileName\r\n  )\r\n\r\n  cp(filePath, newFilePath)\r\n}\r\n```","value":"https://github.com/johnlindquist/kit/discussions/320","img":"https://avatars.githubusercontent.com/u/25487857?u=1c81cf15334c751c49f61fe7e0e84b0618eb0e0e&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/312","url":"https://github.com/johnlindquist/kit/discussions/312","title":"Beta.19 New Features - Gotta go fast! 🏎💨","name":"Beta.19 New Features - Gotta go fast! 🏎💨","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/312","createdAt":"2021-06-07T20:47:28Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zNDAwNjgx","body":"Beta.19 is all about _speed_! I've finally landed on an approach I love to get the prompt moving waaaay faster.\r\n\r\nCouple videos below:\r\n\r\n## Instant Prompts\r\n\r\nhttps://user-images.githubusercontent.com/36073/121084054-6d270a00-c79d-11eb-8b37-96473de7e0e4.mp4\r\n\r\n```js\r\n// Shortcut: option 5\r\n\r\nlet { items } = await db(async () => {\r\n  let response = await get(\r\n    `https://api.github.com/users/johnlindquist/repos`\r\n  )\r\n\r\n  return response.data\r\n})\r\n\r\nawait arg(\"Select repo\", items)\r\n\r\n```\r\n\r\n## Instant Tabs\r\n\r\nhttps://user-images.githubusercontent.com/36073/121084134-85972480-c79d-11eb-9e18-94e5a2efa5d1.mp4\r\n\r\n## Instant Main Menu\r\n\r\nThe main menu now also leverages the concepts behind Instant Prompts listed above.\r\n\r\n## Faster in the future\r\n\r\nThese conventions laid the groundwork for caching prompt data, but I still have plenty ideas to speed things, especially around how the app launches the process. I'm looking forward to making this even faster for you!\r\n\r\nI'm also starting the work on an \"Instant Textarea\" because I know popping open a little textarea to take/save notes/ideas is something many people would use. 📝\r\n\r\n\r\n\r\n\r\n\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/312","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","author":"Kent C. Dodds","twitter":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/310","url":"https://github.com/johnlindquist/kit/discussions/310","title":"Cloudinary upload","name":"Cloudinary upload","extension":".md","description":"Created by kentcdodds","resourcePath":"/johnlindquist/kit/discussions/310","createdAt":"2021-06-07T05:28:35Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzk5NDk0","body":"I made this handy little script that makes it really easy for me to upload images to cloudinary.\r\n\r\nI just realized that I need to make it so I can create a new folder from script kit (right now you can only choose from folders that already exist). But it should make it much easier for me to get images up to cloudinary while I'm in the zone writing a blog post :)\r\n\r\n```js\r\n// Menu: Cloudinary upload\r\n// Description: Upload an image to cloudinary\r\n// Shortcut: command option control c\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nimport path from 'path'\r\n\r\nconst cloudinaryCloudName = await env('CLOUDINARY_CLOUD_NAME')\r\nconst cloudinaryKey = await env('CLOUDINARY_API_KEY')\r\nconst cloudinarySecret = await env('CLOUDINARY_API_SECRET')\r\nconst cloudiaryConsoleId = await env('CLOUDINARY_CONSOLE_ID')\r\n\r\nawait npm('cloudinary')\r\nimport cloudinary from 'cloudinary'\r\n\r\nconst cacheDb = await db('cloudinary-cache', {lastChoice: '', folders: {}})\r\nawait cacheDb.read()\r\n\r\ncloudinary.config({\r\n  cloud_name: cloudinaryCloudName,\r\n  api_key: cloudinaryKey,\r\n  api_secret: cloudinarySecret,\r\n  secure: true,\r\n})\r\n\r\nconst actions = {\r\n  CREATE_NEW: 'creating new folder',\r\n  REFRESH_CACHE: 'refreshing cache',\r\n  OPEN_DIR: 'opening directory',\r\n}\r\n\r\nlet chosenDirectory = await cacheDb.data.lastChoice\r\nlet lastSelection\r\nwhile (true) {\r\n  // if the last action was to create a new directory then we know the chosen\r\n  // directory is new and has no folders otherwise we have to wait a few seconds\r\n  // for the API to be prepared for us to make a request for the contents.\r\n  const directories =\r\n    lastSelection === actions.CREATE_NEW\r\n      ? []\r\n      : await getFolders(chosenDirectory)\r\n  lastSelection = await arg(\r\n    `Select directory in ${chosenDirectory}`,\r\n    [\r\n      {name: '.', value: '.', description: '✅ Choose this directory'},\r\n      !chosenDirectory\r\n        ? null\r\n        : {name: '..', value: '..', description: '⤴️ Go up a directory'},\r\n      ...directories.map(folder => ({\r\n        name: folder.name,\r\n        value: folder.path,\r\n        description: '⤵️ Select directory',\r\n      })),\r\n      {\r\n        name: 'Open directory',\r\n        value: actions.OPEN_DIR,\r\n        description: '🌐 Open this directory in the browser',\r\n      },\r\n      {\r\n        name: 'Refresh cache',\r\n        value: actions.REFRESH_CACHE,\r\n        description: '🔄 Refresh the cache for this directory',\r\n      },\r\n      {\r\n        name: 'Create new directory',\r\n        value: actions.CREATE_NEW,\r\n        description: '➕ Create a new directory here',\r\n      },\r\n    ].filter(Boolean),\r\n  )\r\n  if (lastSelection === '..') {\r\n    chosenDirectory = chosenDirectory.split('/').slice(0, -1).join('/')\r\n  } else if (lastSelection === '.') {\r\n    break\r\n  } else if (lastSelection === actions.CREATE_NEW) {\r\n    const newFolderName = await arg(`What's the new folder name?`)\r\n    const newDirectory = `${chosenDirectory}/${newFolderName}`\r\n    const result = await cloudinary.v2.api.create_folder(newDirectory)\r\n    delete cacheDb.data.folders[chosenDirectory]\r\n    chosenDirectory = newDirectory\r\n  } else if (lastSelection === actions.REFRESH_CACHE) {\r\n    delete cacheDb.data.folders[chosenDirectory]\r\n  } else if (lastSelection === actions.OPEN_DIR) {\r\n    await openFolder(chosenDirectory)\r\n  } else {\r\n    chosenDirectory = lastSelection\r\n  }\r\n}\r\n\r\ncacheDb.data.lastChoice = chosenDirectory\r\nawait cacheDb.write()\r\n\r\nconst images = await arg({\r\n  placeholder: 'Drop the image(s) you want to upload',\r\n  drop: true,\r\n  ignoreBlur: true,\r\n})\r\nfor (const image of images) {\r\n  const defaultName = path.parse(image.path).name\r\n\r\n  const name =\r\n    (await arg({\r\n      placeholder: `Name of this image?`,\r\n      hint: `Default is: \"${defaultName}\"`,\r\n    })) || defaultName\r\n\r\n  const uploadedImage = await cloudinary.v2.uploader.upload(image.path, {\r\n    public_id: name,\r\n    overwrite: false,\r\n    folder: chosenDirectory,\r\n  })\r\n\r\n  // If you have multiple files then this isn't really useful unless you have\r\n  // clipbloard history (which I recommend you get!)\r\n  await copy(uploadedImage.secure_url)\r\n}\r\n\r\nawait openFolder(chosenDirectory)\r\n\r\nfunction openFolder(folder) {\r\n  const encodedFolder = encodeURIComponent(folder)\r\n  console.log('opening')\r\n  return exec(\r\n    `open \"https://cloudinary.com/console/${cloudiaryConsoleId}/media_library/folders/${encodedFolder}\"`,\r\n  )\r\n}\r\n\r\nasync function getFolders(directory) {\r\n  const cachedDirectories = cacheDb.data.folders[directory]\r\n  if (cachedDirectories) {\r\n    return cachedDirectories\r\n  }\r\n\r\n  try {\r\n    const {folders: directories} = !directory\r\n      ? await cloudinary.v2.api.root_folders()\r\n      : await cloudinary.v2.api.sub_folders(directory)\r\n\r\n    cacheDb.data.folders[directory] = directories\r\n\r\n    await cacheDb.write()\r\n\r\n    return directories\r\n  } catch (error) {\r\n    console.error('error with the directory')\r\n    return []\r\n  }\r\n}\r\n```","value":"https://github.com/johnlindquist/kit/discussions/310","img":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/5678065?u=e2e528a3ee58b5150a1947c7ded93695b35a8779&v=4","user":"Alarid","author":"Yohann Legrand","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/306","url":"https://github.com/johnlindquist/kit/discussions/306","title":"My attempt with Notion API","name":"My attempt with Notion API","extension":".md","description":"Created by Alarid","resourcePath":"/johnlindquist/kit/discussions/306","createdAt":"2021-06-04T23:37:23Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzk3MzQy","body":"Hey folks 👋 \r\n\r\nSo I have this big \"Tasks\" database in Notion where I put all my tasks (personal/work/projects). Each task has many properties, including a \"Status\" (_ToDo, Doing, Done, ..._) and a \"Day\" (_Monday, Tuesday, ...) which I use in a view called \"Week planner\". It's a board view, one column for each value of the property \"Day\", which allows me to have a nice view of what needs to be done this week. I found myself using mainly this view for inserting new tasks. In fact, if I need to do something for tomorrow or the day after, then I add a new task in this column. \r\n\r\nSince Notion released their APIs, I thought \"How cool it would be to do this with Kit!\". I finally did it, and I'm loving it already. This is gonna save me so much time. If I'm working on something and a new task pop into my mind, I can add it from anywhere in a few seconds.\r\n\r\nHere is the script for those interested _(UPDATED VERSION: thanks John for the tips)_\r\n\r\n```js\r\n// Menu: New task\r\n// Description: Add a new task in Notion\r\n\r\nconst { newTask, getProperties, syncProperties } = await lib(\"notion-tasks\")\r\n\r\nlet taskName = await arg({\r\n  placeholder: \"Task name\",\r\n  hint: `Type \"sync\" to sync`,\r\n})\r\nif (taskName === \"sync\") {\r\n  try {\r\n    await syncProperties()\r\n    notify({\r\n      title: \"✅ Notion sync\",\r\n      message: \"Tasks properties successfully cached locally\",\r\n    })\r\n  } catch (err) {\r\n    notify({\r\n      title: \"⛔️ Notion sync\",\r\n      message: \"Something went wrong\",\r\n    })\r\n    console.error(err)\r\n  }\r\n  taskName = await arg(\"Task name\")\r\n}\r\n\r\nconst { statusOptions, dayOptions, tagOptions } = getProperties()\r\n\r\nconst status = await arg(\r\n  \"Status\",\r\n  statusOptions.map((opt) => opt.name)\r\n)\r\nconst day = await arg(\r\n  \"Day\",\r\n  dayOptions.map((opt) => opt.name)\r\n)\r\nconst tag = await arg(\r\n  \"Tag\",\r\n  tagOptions.map((opt) => opt.name)\r\n)\r\n\r\ntry {\r\n  await newTask(taskName, status, day, tag)\r\n  send(\"HIDE_APP\")\r\n  notify({\r\n    title: \"✅ New task added\",\r\n    message: `${taskName} for ${day} (${status})`,\r\n  })\r\n} catch (err) {\r\n  send(\"HIDE_APP\")\r\n  notify({\r\n    title: \"⛔️ New task\",\r\n    message: `Something went wrong`,\r\n  })\r\n  console.error(err)\r\n}\r\n```\r\n\r\nAnd the lib file (`.kenv/lib/notion-tasks.js`)\r\n\r\n```js\r\nconst notionToken = await env(\"NOTION_USER_TOKEN\")\r\nconst databaseId = \"06d55db47a994f429132d5d8fd9edd2a\"\r\nconst tasksDb = await db(\"tasks\", {\r\n  properties: {\r\n    statusOptions: [],\r\n    dayOptions: [],\r\n    tagOptions: [],\r\n  },\r\n})\r\nexport const getProperties = () => tasksDb.properties\r\n\r\nexport async function syncProperties() {\r\n  const { data } = await get(\r\n    `https://api.notion.com/v1/databases/${databaseId}`,\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${notionToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n        \"Notion-Version\": \"2021-05-13\",\r\n      },\r\n    }\r\n  )\r\n  const {\r\n    Status: {\r\n      select: { options: statusOptions },\r\n    },\r\n    Day: {\r\n      multi_select: { options: dayOptions },\r\n    },\r\n    Tag: {\r\n      multi_select: { options: tagOptions },\r\n    },\r\n  } = data.properties\r\n\r\n  tasksDb.properties = { statusOptions, dayOptions, tagOptions }\r\n  await tasksDb.write()\r\n}\r\n\r\nexport async function newTask(taskName, status, day, tag) {\r\n  return await post(\r\n    \"https://api.notion.com/v1/pages\",\r\n    {\r\n      parent: { database_id: databaseId },\r\n      properties: {\r\n        Name: {\r\n          title: [{ text: { content: taskName } }],\r\n        },\r\n        Status: {\r\n          select: { name: status },\r\n        },\r\n        Day: {\r\n          multi_select: [{ name: day }],\r\n        },\r\n        Tag: {\r\n          multi_select: [{ name: tag }],\r\n        },\r\n      },\r\n    },\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${notionToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n        \"Notion-Version\": \"2021-05-13\",\r\n      },\r\n    }\r\n  )\r\n}\r\n```\r\n\r\n~Maybe I'm missing something about caching though 😅~ Any feedback/improvement ideas appreciated. And once again, thanks @johnlindquist for this amazing app, I use it every single day and it has definitely made my life easier 🙏 ","value":"https://github.com/johnlindquist/kit/discussions/306","img":"https://avatars.githubusercontent.com/u/5678065?u=e2e528a3ee58b5150a1947c7ded93695b35a8779&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/305","url":"https://github.com/johnlindquist/kit/discussions/305","title":"How to Get Your Scripts Featured on ScriptKit.com 😎","name":"How to Get Your Scripts Featured on ScriptKit.com 😎","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/305","createdAt":"2021-06-04T20:07:36Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzk3MTc2","body":"TL;DR\r\n\r\n- Help -> Create kenv\r\n- Git init new kenv, push to github\r\n- Reply, dm, contact me somehow with the repo 😇\r\n\r\nHere's a video walking you through it:\r\n\r\nhttps://user-images.githubusercontent.com/36073/120856653-6732ee00-c53d-11eb-9dfb-04907b036361.mp4\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/305","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/304","url":"https://github.com/johnlindquist/kit/discussions/304","title":"Beta.18 Changes/Features (`db` has a breaking change)","name":"Beta.18 Changes/Features (`db` has a breaking change)","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/304","createdAt":"2021-06-04T18:09:55Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzk3MDY0","body":"## ⚠️Breaking: New `db` helper\r\n\r\n[lowdb](https://github.com/typicode/lowdb) updated to 2.0, so I updated the `db` helper to support it.\r\n\r\n* access/mutate the objects in the db directly. Then `.write()` to save your changes to the file.\r\n* `await db()` and `await myDb.write()`\r\n\r\nExample with a simple object:\r\n```js\r\nlet shoppingListDb = await db(\"shopping-list\", {\r\n  list: [\"apples\", \"bananas\"],\r\n})\r\n\r\nlet item = await arg(\"Add to list\")\r\nshoppingListDb.list.push(item)\r\nawait shoppingListDb.write()\r\n\r\nawait arg(\"Shopping list\", shoppingListDb.list)\r\n```\r\n\r\n\r\nYou can also use an `async` function to store the initial data:\r\n```js\r\nlet reposDb = await db(\"repos\", async () => {\r\n  let response = await get(\r\n    \"https://api.github.com/users/johnlindquist/repos\"\r\n  )\r\n\r\n  return {\r\n    repos: response.data,\r\n  }\r\n})\r\n\r\nawait arg(\"Select repo\", reposDb.repos)\r\n```\r\n\r\n## Text Area prompt\r\n\r\n```js\r\nlet text = await textarea()\r\n\r\ninspect(text)\r\n```\r\n![CleanShot 2021-06-04 at 14 25 12](https://user-images.githubusercontent.com/36073/120858988-cf370380-c540-11eb-8b79-5483ec090dd8.gif)\r\n\r\n\r\n## Optional `value`\r\n\r\n`arg` choice objects used to require a `value`. Now if you don't provide a value, it will simply return the entire object:\r\n\r\n```js\r\nlet person = await arg(\"Select\", [\r\n  { name: \"John\", location: \"Chair\" },\r\n  { name: \"Mindy\", location: \"Couch\" },\r\n])\r\n\r\nawait arg(person.location)\r\n```\r\n\r\n## ⚗️ Experimental \"Multiple kenvs\"\r\n\r\nThere was a _ton_ 🏋️‍♀️ of internal work over the past couple weeks to get this working. The \"big idea\" is supporting multiple kit environments. For example:\r\n\r\n* private/personal kenv\r\n* shared kenv\r\n* company kenv\r\n* product kenv\r\n\r\n### Future plans\r\nIn an upcoming release: \r\n* you'll be able to \"click to install kenv from repo\" (just like we do with individual scripts)\r\n* update a git-controlled kenv (like a company kenv)\r\n* the main prompt will be able to search for all scripts across kenvs. \r\n* If multiple kenvs exist, creating a new script will ask you which kenv to create it in.\r\n\r\nFor now, you can try adding/creating/switching the help menu. It should all work fine, but will be _waaaay_ cooler in the future 😎\r\n\r\n![CleanShot 2021-06-04 at 11 50 32](https://user-images.githubusercontent.com/36073/120843227-16b29500-c52b-11eb-974c-a81c260b9ae2.png)\r\n\r\n## Improved Error Prompt\r\n\r\nNow when an error occurs, it takes the error data, shuts down the script, then prompts you on what to do. For example, trying to use the old `db` would result in this:\r\n\r\n![CleanShot 2021-06-04 at 12 03 04](https://user-images.githubusercontent.com/36073/120844575-d6541680-c52c-11eb-8d12-c7c3117e132e.png)\r\n\r\n## Improved Tab Switching\r\nSwitching tabs will now cancel the previous tabs' script. Previously, if you quickly switched tabs on the main menu, the \"Hot\" tab results might show up in a different tab because the loaded _after_ the tab switched. The internals around message passing between the script and the app now have a cancellation mechanism so you only get the latest result that matches the prompt/tab. (This was also a ton of internals refactoring work 😅)\r\n\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/304","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/297","url":"https://github.com/johnlindquist/kit/discussions/297","title":"Another Notion example -- select a random item from a database","name":"Another Notion example -- select a random item from a database","extension":".md","description":"Created by dealingwith","resourcePath":"/johnlindquist/kit/discussions/297","createdAt":"2021-05-30T04:23:32Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzg4NDc4","body":"Like the [last Notion example I posted](https://github.com/johnlindquist/kit/discussions/286), this one interfaces with my giant, singular Tasks database in Notion. This one selects one task at random (that does not have a status of Done or Archive).\r\n\r\n[Install notion-random-task](https://scriptkit.com/api/new?name=notion-random-task&url=https://gist.githubusercontent.com/dealingwith/43c1079690c14481ec2e76737e5f60fc/raw/f77a17b9cfe93b0a4b8eb0f533f014aeaaadbb9f/notion-random-task.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\n\r\nlet {data} = await post(\r\n  `https://api.notion.com/v1/databases/${databaseID}/query`,\r\n{\r\n  \"filter\": {\r\n    \"and\": [\r\n      {\r\n        \"property\": \"Status\",\r\n        \"select\": {\r\n          \"does_not_equal\": \"Done\"\r\n        }\r\n      },\r\n      {\r\n        \"property\": \"Status\",\r\n        \"select\": {\r\n          \"does_not_equal\": \"Archive\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  page_size: 100\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet tasks = data.results\r\nlet task = tasks[Math.floor(Math.random() * tasks.length)];\r\nlet pageID = task.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\ncopy(pageURL)\r\n\r\nawait focusTab(pageURL, \"Google Chrome Beta\")\r\n```\r\n\r\nI also created one that only queries for tasks with no status (the \"inbox\")...\r\n\r\n[Install notion-random-from-inbox](https://scriptkit.com/api/new?name=notion-random-from-inbox&url=https://gist.githubusercontent.com/dealingwith/24ccf1b94413168939eff0369a25bd9f/raw/019aa8bf68265fce8e9119b4a6409c1b5fc2ef7c/notion-random-from-inbox.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\n\r\nlet {data} = await post(\r\n  `https://api.notion.com/v1/databases/${databaseID}/query`,\r\n{\r\n  \"filter\": \r\n  {\r\n    \"property\": \"Status\",\r\n    \"select\": {\r\n      \"is_empty\": true\r\n    }\r\n  },\r\n  page_size: 50\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet tasks = data.results\r\nlet task = tasks[Math.floor(Math.random() * tasks.length)];\r\nlet pageID = task.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\ncopy(pageURL)\r\n\r\nawait focusTab(pageURL, \"Google Chrome Beta\")\r\n```\r\n\r\n~Is there a better way to open the link in a browser? I stole this method from Ian Jones.~","value":"https://github.com/johnlindquist/kit/discussions/297","img":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","author":"Kent C. Dodds","twitter":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/295","url":"https://github.com/johnlindquist/kit/discussions/295","title":"Shorten with netlify-shortener","name":"Shorten with netlify-shortener","extension":".md","description":"Created by kentcdodds","resourcePath":"/johnlindquist/kit/discussions/295","createdAt":"2021-05-27T02:50:35Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzgzOTg5","body":"[netlify-shortener](https://github.com/kentcdodds/netlify-shortener)\r\n\r\n[Install shorten](https://scriptkit.com/api/new?name=shorten&url=https://gist.githubusercontent.com/kentcdodds/539bb0543b8d8056e5a8d0dada61e140/raw/7f4b2cf571afddbcfea6bf1dcd18f3227e5fd4b5/shorten.js)\r\n\r\n```js\r\n// Menu: Shorten\r\n// Description: Shorten a given URL with a given short name via netlify-shortener\r\n// Shortcut: command option control s\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nconst dir = await env(\r\n  'SHORTEN_REPO_DIRECTORY',\r\n  'Where is your netlify-shortener repo directory?',\r\n)\r\n\r\nconst longURL = await arg(`What's the full URL?`)\r\n// TODO: figure out how to make this optional\r\nconst shortName = await arg(`What's the short name?`)\r\nconst netlifyShortenerPath = path.join(\r\n  dir,\r\n  'node_modules/netlify-shortener/dist/index.js',\r\n)\r\nconst {baseUrl} = JSON.parse(await readFile(path.join(dir, 'package.json')))\r\n\r\nsetPlaceholder(`Creating redirect: ${baseUrl}/${shortName} -> ${longURL}`)\r\nconst result = exec(\r\n  `node \"${netlifyShortenerPath}\" \"${longURL}\" \"${shortName}\"`,\r\n)\r\n\r\nconst {stderr, stdout} = result\r\n\r\nif (result.code === 0) {\r\n  const lastLine = stdout.split('\\n').filter(Boolean).slice(-1)[0]\r\n  notify({\r\n    title: '✅ Short URL created',\r\n    message: lastLine,\r\n  })\r\n} else {\r\n  const getErr = str => str.match(/Error: (.+)\\n/)?.[1]\r\n  const error = getErr(stderr) ?? getErr(stdout) ?? 'Unknown error'\r\n  console.error({stderr, stdout})\r\n  notify({\r\n    title: '❌ Short URL not created',\r\n    message: error,\r\n  })\r\n}\r\n\r\n```\r\n\r\nIt's a bit of a hack in some places, but it works!","value":"https://github.com/johnlindquist/kit/discussions/295","img":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/285740?v=4","user":"gm90","author":"Gary McCann","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/288","url":"https://github.com/johnlindquist/kit/discussions/288","title":"Kill Notification","name":"Kill Notification","extension":".md","description":"Created by gm90","resourcePath":"/johnlindquist/kit/discussions/288","createdAt":"2021-05-21T20:26:44Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzc2NzQ3","body":"Inspired by Tyler Hall, a quick shortcut key to clear a mac notification with the awkward Big Sur UX  with the tiny cross click area.\r\n\r\n```javascript\r\n// Shortcut: command option k\r\n// Menu: Kill Notification\r\n// Description: Kill pesky mac os notification inspired by 240px-invisible-pixels @ https://tyler.io/240-invisible-pixels/\r\n// Author: Gary McCann\r\n\r\nconst robot = await npm (\"robotjs\");\r\nconst screenSize = robot.getScreenSize();\r\nconst xPosition = screenSize.width - 354;\r\nconst yPosition = 47;\r\n\r\nrobot.moveMouse(xPosition, yPosition);\r\n\r\nsetTimeout(() => {  \r\n  robot.mouseClick();\r\n}, 100)","value":"https://github.com/johnlindquist/kit/discussions/288","img":"https://avatars.githubusercontent.com/u/285740?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/286","url":"https://github.com/johnlindquist/kit/discussions/286","title":"Post to Notion","name":"Post to Notion","extension":".md","description":"Created by dealingwith","resourcePath":"/johnlindquist/kit/discussions/286","createdAt":"2021-05-20T04:14:00Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzczNzkx","body":"<img width=\"418\" alt=\"Screen Shot 2021-05-19 at 11 06 46 PM\" src=\"https://user-images.githubusercontent.com/124208/118917657-f8c41e00-b8f6-11eb-9c5d-de7be826ec4c.png\">\r\n\r\nI thought the Notion API might be a fun thing to play with via Script Kit. I have a singular \"tasks\" database that I use to capture all manner of things, so I always want to insert pages into it in order to process them later. These scripts will require you to update the databaseID value in the code itself. I could see an expansion of this script to allow for the selection of a specific Notion database from a list.\r\n\r\nThe second script below takes a second input in order to insert content into the new page -- I was wondering if there is a way to allow multiline text input via Script Kit, which would make that script more robust.\r\n\r\nYou can get a Notion API token [here](https://developers.notion.com/) and find quick-start instructions [here](https://developers.notion.com/docs), as well as the API reference [here](https://developers.notion.com/reference/intro).\r\n\r\nFor a quick overview of the data model, [check out Chris Biscardi's video here](https://www.youtube.com/watch?v=apKz987OLcE&t=1s). For a more in-depth overview, check out [this Notion blog post](https://www.notion.so/blog/data-model-behind-notion).\r\n\r\n[Install notion-add-task](https://scriptkit.com/api/new?name=notion-add-task&url=https://gist.githubusercontent.com/dealingwith/d8e701f2e0e5e64cb820103af96a08d2/raw/b2c11daf28ed7e4b40f2809bda428b527dd78b24/notion-add-task.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\nlet content = await arg('Enter Task')\r\n\r\nlet {data} = await post(\r\n  'https://api.notion.com/v1/pages', {\r\n  \"parent\": { \"database_id\": databaseID },\r\n  \"properties\": {\r\n    \"Name\": {\r\n      \"title\": [\r\n        {\r\n          \"text\": {\r\n            \"content\": content\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n  }\r\n})\r\n\r\nlet pageID = data.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\n\r\ncopy(pageURL)\r\n```\r\n\r\n\r\n[Install notion-add-task-with-content](https://scriptkit.com/api/new?name=notion-add-task-with-content&url=https://gist.githubusercontent.com/dealingwith/99c4da33565dddb115b5c173e1e29f48/raw/0c5b31b56b0fcc39fa3f589f7e2dcd4312f5c53a/notion-add-task-with-content.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\nlet content = await arg('Enter Task')\r\n\r\nlet {data} = await post(\r\n  'https://api.notion.com/v1/pages', {\r\n  \"parent\": { \"database_id\": databaseID },\r\n  \"properties\": {\r\n    \"Name\": {\r\n      \"title\": [\r\n        {\r\n          \"text\": {\r\n            \"content\": content\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet bodyContent = await arg('Enter Content')\r\n\r\nlet {bodyData} = await patch(\r\n  `https://api.notion.com/v1/blocks/${data.id}/children`, {\r\n  \"children\": [\r\n    {\r\n      \"object\": \"block\",\r\n      \"type\": \"paragraph\",\r\n      \"paragraph\": {\r\n        \"text\": [\r\n          {\r\n            \"type\": \"text\",\r\n            \"text\": {\r\n              \"content\": bodyContent\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet pageID = data.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\n\r\ncopy(pageURL)\r\n```\r\n\r\n(I just noticed that I haven't updated the first script to pass the \"Notion-Version\" header, but it seems unnecessary for now.)","value":"https://github.com/johnlindquist/kit/discussions/286","img":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/433725?u=7e3bc90109dae2debbf59a2c822f3daca50f6aa7&v=4","user":"iansu","author":"Ian Sutherland","twitter":"iansu","discussion":"https://github.com/johnlindquist/kit/discussions/283","url":"https://github.com/johnlindquist/kit/discussions/283","title":"npm search","name":"npm search","extension":".md","description":"Created by iansu","resourcePath":"/johnlindquist/kit/discussions/283","createdAt":"2021-05-18T21:53:16Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzcxNzg3","body":"[Install npm](https://scriptkit.com/api/new?name=npm&url=https://gist.githubusercontent.com/iansu/7f0227f191865e18b5a2b7ff616d6fd9/raw/6e18ce83af9eedc2a3fde3b39f35f682e3d841e4/npm.js)\r\n\r\nThis is a very simple script that I made to search npm and open the results in your browser. I took a quick look and didn't see anything similar here so I figured I would share it, even though the script itself isn't particularly interesting.\r\n\r\n```js\r\n// Menu: npm\r\n// Description: Search npm\r\n// Author: Ian Sutherland\r\n// Twitter: @iansu\r\n\r\nawait arg(\"Search query:\", async () => {\r\n  let query = await arg(\"Search query:\")\r\n\r\n  exec(`open https://www.npmjs.com/search?q=${query}`)\r\n})\r\n```","value":"https://github.com/johnlindquist/kit/discussions/283","img":"https://avatars.githubusercontent.com/u/433725?u=7e3bc90109dae2debbf59a2c822f3daca50f6aa7&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/282","url":"https://github.com/johnlindquist/kit/discussions/282","title":"✨NEW FEATURES✨ beta.17","name":"✨NEW FEATURES✨ beta.17","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/282","createdAt":"2021-05-18T20:24:57Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzcxNjg5","body":"New features are separated into the comments below:\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/282","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","author":"Kent C. Dodds","twitter":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/269","url":"https://github.com/johnlindquist/kit/discussions/269","title":"Twimage Download (tweet image)","name":"Twimage Download (tweet image)","extension":".md","description":"Created by kentcdodds","resourcePath":"/johnlindquist/kit/discussions/269","createdAt":"2021-05-17T05:21:38Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzY4NjQ4","body":"I made a little script to download images from tweets and set exif data to info derived from the tweet. Especially helpful is the creation date and the GPS data (if the tweet includes location).\r\n\r\nI'm using this to go back to pictures people have taken of me speaking at conferences and adding them to my personal photo library and make sure they appear at the right time in my photo library timeline.\r\n\r\n[Install twimage-download](https://scriptkit.com/api/new?name=twimage-download&url=https://gist.githubusercontent.com/kentcdodds/acfa864608d00af8a37a074cc857c657/raw/82294cd894a5b04800f642b02faaf3f829f550fc/twimage-download.js)\r\n\r\n```js\r\n// Menu: Twimage Download\r\n// Description: Download twitter images and set their exif info based on the tweet metadata\r\n// Shortcut: fn ctrl opt cmd t\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nimport fs from 'fs'\r\nimport {fileURLToPath, URL} from 'url'\r\n\r\nconst exiftool = await npm('node-exiftool')\r\nconst exiftoolBin = await npm('dist-exiftool')\r\nconst fsExtra = await npm('fs-extra')\r\n\r\nconst baseOut = home('Pictures/twimages')\r\n\r\nconst token = await env('TWITTER_BEARER_TOKEN')\r\nconst twitterUrl = await arg('Twitter URL')\r\nconsole.log(`Starting with ${twitterUrl}`)\r\n\r\nconst tweetId = new URL(twitterUrl).pathname.split('/').slice(-1)[0]\r\nconst params = new URLSearchParams()\r\nparams.set('ids', tweetId)\r\nparams.set('user.fields', 'username')\r\nparams.set('tweet.fields', 'author_id,created_at,geo')\r\nparams.set('media.fields', 'url')\r\nparams.set('expansions', 'author_id,attachments.media_keys,geo.place_id')\r\nconst response = await get(\r\n  `https://api.twitter.com/2/tweets?${params.toString()}`,\r\n  {\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  },\r\n)\r\n\r\nconst json = /** @type import('../types/twimage-download').JsonResponse */ (\r\n  response.data\r\n)\r\n\r\nconst ep = new exiftool.ExiftoolProcess(exiftoolBin)\r\n\r\nawait ep.open()\r\n\r\nfor (const tweet of json.data) {\r\n  const {attachments, geo, id, text, created_at} = tweet\r\n  if (!attachments) throw new Error(`No attachements: ${tweet.id}`)\r\n  const author = json.includes.users.find(u => u.id === tweet.author_id)\r\n  if (!author) throw new Error(`wut? No author? ${tweet.id}`)\r\n\r\n  const link = `https://twitter.com/${author.username}/status/${id}`\r\n  const {latitude, longitude} = geo ? await getGeoCoords(geo.place_id) : {}\r\n\r\n  for (const mediaKey of attachments.media_keys) {\r\n    const media = json.includes.media.find(m => mediaKey === m.media_key)\r\n    if (!media) throw new Error(`Huh... no media found...`)\r\n    const formattedDate = formatDate(created_at)\r\n    const colonDate = formattedDate.replace(/-/g, ':')\r\n    const formattedTimestamp = formatTimestamp(created_at)\r\n    const filename = new URL(media.url).pathname.split('/').slice(-1)[0]\r\n    const filepath = path.join(\r\n      baseOut,\r\n      formattedDate.split('-').slice(0, 2).join('-'),\r\n      filename,\r\n    )\r\n\r\n    await download(media.url, filepath)\r\n\r\n    console.log(`Updating exif metadata for ${filepath}`)\r\n    await ep.writeMetadata(\r\n      filepath,\r\n      {\r\n        ImageDescription: `${text} – ${link}`,\r\n        Keywords: 'photos from tweets',\r\n        DateTimeOriginal: formattedTimestamp,\r\n        FileModifyDate: formattedTimestamp,\r\n        ModifyDate: formattedTimestamp,\r\n        CreateDate: formattedTimestamp,\r\n        ...(geo\r\n          ? {\r\n              GPSLatitudeRef: latitude > 0 ? 'North' : 'South',\r\n              GPSLongitudeRef: longitude > 0 ? 'East' : 'West',\r\n              GPSLatitude: latitude,\r\n              GPSLongitude: longitude,\r\n              GPSDateStamp: colonDate,\r\n              GPSDateTime: formattedTimestamp,\r\n            }\r\n          : null),\r\n      },\r\n      ['overwrite_original'],\r\n    )\r\n  }\r\n}\r\n\r\nawait ep.close()\r\nconsole.log(`All done with ${twitterUrl}`)\r\n\r\nfunction formatDate(t) {\r\n  const d = new Date(t)\r\n  return `${d.getFullYear()}-${padZero(d.getMonth() + 1)}-${padZero(\r\n    d.getDate(),\r\n  )}`\r\n}\r\nfunction formatTimestamp(t) {\r\n  const d = new Date(t)\r\n  const formattedDate = formatDate(t)\r\n  return `${formatDate(t)} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\r\n}\r\nfunction padZero(n) {\r\n  return String(n).padStart(2, '0')\r\n}\r\n\r\nasync function getGeoCoords(placeId) {\r\n  const response = await get(\r\n    `https://api.twitter.com/1.1/geo/id/${placeId}.json`,\r\n    {\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n      },\r\n    },\r\n  )\r\n  const [longitude, latitude] = response.data.centroid\r\n  return {latitude, longitude}\r\n}\r\n\r\nasync function download(url, out) {\r\n  console.log(`downloading ${url} to ${out}`)\r\n  await fsExtra.ensureDir(path.dirname(out))\r\n\r\n  const writer = fs.createWriteStream(out)\r\n  const response = await get(url, {responseType: 'stream'})\r\n  response.data.pipe(writer)\r\n\r\n  return new Promise((resolve, reject) => {\r\n    writer.on('finish', () => resolve(out))\r\n    writer.on('error', reject)\r\n  })\r\n}\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/269","img":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/39992?u=1ee38610bb2d8a082b3e84db7ecacf78149d061b&v=4","user":"gr2m","author":"Gregor Martynus","twitter":"gr2m","discussion":"https://github.com/johnlindquist/kit/discussions/266","url":"https://github.com/johnlindquist/kit/discussions/266","title":"Create Gist from Clipboard","name":"Create Gist from Clipboard","extension":".md","description":"Created by gr2m","resourcePath":"/johnlindquist/kit/discussions/266","createdAt":"2021-05-14T00:19:42Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzY0OTA0","body":"<kbd><a href=\"https://scriptkit.com/api/new?name=create-gist-from-clipboard&url=https://gist.githubusercontent.com/gr2m/f5d7ee961664ee1e2561ca29311026c6/raw/dbecf63ff2a68dcc4778a2d4d26a42af2b3998bf/create-gist-from-clipboard.js\">Install create-gist-from-clipboard</a></kbd>\r\n\r\n```js\r\n// Menu: Create gist from clipboard\r\n// Description: Creates a new GitHub Gist with the contents of your current clipboard\r\n// Author: Gregor Martynus\r\n// Twitter: @gr2m\r\n\r\n// https://github.com/gr2m/scriptkit-octokit/\r\nconst { Octokit } = await npm(\"scriptkit-octokit\");\r\nconst octokit = new Octokit({\r\n  auth: {\r\n    scopes: [\"gist\"],\r\n  },\r\n});\r\n\r\n// copy the content from the current clipboard\r\nconst content = await paste();\r\n\r\nif (!content) {\r\n  console.log(\"clipboard is empty\");\r\n  exit();\r\n}\r\n\r\nconst { data } = await octokit.rest.gists.create({\r\n  description: \"Created using https://github.com/johnlindquist/kit/discussions/266\",\r\n  public: false,\r\n  files: {\r\n    \"clipboard.txt\": { content },\r\n  },\r\n});\r\n\r\nawait copy(data.html_url);\r\nconsole.log(\"Gist created at %s\", data.html_url);\r\n```\r\n\r\nI highly recommend setting a shortcut, e.g. add to the top:\r\n\r\n```js\r\n// Shortcut: command option g\r\n```","value":"https://github.com/johnlindquist/kit/discussions/266","img":"https://avatars.githubusercontent.com/u/39992?u=1ee38610bb2d8a082b3e84db7ecacf78149d061b&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/253","url":"https://github.com/johnlindquist/kit/discussions/253","title":"Word Game 🎯","name":"Word Game 🎯","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/253","createdAt":"2021-05-07T22:01:23Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzU2MjY0","body":"\r\n[Install word-game](https://scriptkit.com/api/new?name=word-game&url=https://gist.githubusercontent.com/johnlindquist/0388865384e7a761e92c0bfa5b176a9a/raw/9c7214c1533f43fd09ac418d8cfc4c574f8e655a/word-game.js)\r\n\r\n```js\r\n// Menu: Word Game\r\n// Description: Guess letters to win!\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet playAgain = true\r\n\r\nwhile (playAgain) {\r\n  let {\r\n    data: [word],\r\n  } = await get(\r\n    `https://random-word-api.herokuapp.com/word`\r\n  )\r\n\r\n  let correct = false\r\n  let guesses = []\r\n\r\n  while (!correct) {\r\n    let [...letters] = await arg(\r\n      { placeholder: \"Guess a letter/s:\", hint: word }, //remove hint to make it more challenging 😉\r\n      word\r\n        .split(\"\")\r\n        .map(char => (guesses.includes(char) ? char : \"*\"))\r\n        .join(\"\")\r\n    )\r\n    guesses = guesses.concat(...letters)\r\n\r\n    correct = word\r\n      .split(\"\")\r\n      .every(char => guesses.includes(char))\r\n  }\r\n\r\n  playAgain = await arg(`🏆 \"${word}\"! Play Again?`, [\r\n    { name: \"Yes\", value: true },\r\n    { name: \"No\", value: false },\r\n  ])\r\n}\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/253","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1518780?u=af82f867331be805d51330c3f8e1f7ab8169837b&v=4","user":"mandiwise","author":"Mandi Wise","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/252","url":"https://github.com/johnlindquist/kit/discussions/252","title":"Open a GitHub repo (including org and private repos, as well as pagination)","name":"Open a GitHub repo (including org and private repos, as well as pagination)","extension":".md","description":"Created by mandiwise","resourcePath":"/johnlindquist/kit/discussions/252","createdAt":"2021-05-07T18:51:28Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzU2MTAw","body":"This script allows you to authenticate with a GitHub personal access token and open repos from your user account or any organizations you belong to. It also displays private repos and handles pagination if the repo count exceeds 100 (just scroll to the bottom of the list and you'll see a \"Load more...\" option, when applicable).\r\n\r\n![Opening an org repo](https://user-images.githubusercontent.com/1518780/117495102-70c33900-af32-11eb-9e04-be54ca374032.gif)\r\n\r\n```js\r\n// Menu: Open a GitHub Repo\r\n// Description: Launch a GitHub repo in your browser\r\n// Author: Mandi Wise\r\n// Twitter: @mandiwise\r\n\r\n// Learn how to create a personal access token for GitHub here:\r\n// https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\r\n\r\nlet { Octokit } = await npm(\"octokit\");\r\n\r\nconst GH_PERSONAL_ACCESS_TOKEN = await env(\"GH_PERSONAL_ACCESS_TOKEN\");\r\nconst octokit = new Octokit({ auth: GH_PERSONAL_ACCESS_TOKEN });\r\n\r\nconst ORGS_PER_PAGE = 20;\r\nconst REPOS_PER_PAGE = 100;\r\n\r\n// GraphQL operations\r\n\r\nconst GetAccounts = `query GetAccounts($first: Int) { \r\n  viewer { \r\n    organizations(first: $first) {\r\n      edges {\r\n        node {\r\n          login\r\n          name\r\n          url\r\n        }\r\n      }\r\n    }\r\n    login\r\n    name\r\n    url\r\n  }\r\n}`;\r\n\r\nconst ReposPage = `fragment ReposPage on RepositoryConnection {\r\n  edges {\r\n    node {\r\n      name\r\n      description\r\n      url\r\n    }\r\n  }\r\n  pageInfo {\r\n    endCursor\r\n    hasNextPage\r\n  }\r\n}`;\r\n\r\nconst GetOrgRepos = `query GetOrgRepos($first: Int, $after: String, $login: String!) {\r\n  viewer { \r\n    organization(login: $login) {\r\n      repositories(\r\n        first: $first\r\n        after: $after\r\n        orderBy: { field: UPDATED_AT, direction: DESC }\r\n      ) {\r\n        ...ReposPage\r\n      }\r\n    }\r\n  }\r\n}\r\n${ReposPage}\r\n`;\r\n\r\nconst GetUserRepos = `query GetUserRepos($first: Int, $after: String) {\r\n  viewer { \r\n    repositories(\r\n      first: $first\r\n      after: $after\r\n      orderBy: {field: UPDATED_AT, direction: DESC}\r\n      affiliations: OWNER\r\n    ) {\r\n      ...ReposPage\r\n    }\r\n  }\r\n}\r\n${ReposPage}\r\n`;\r\n\r\n// Get user and their organizations in a list\r\n\r\nlet dots = 0;\r\nconst accountsPlaceholderIntervalId = setInterval(() => {\r\n  setPlaceholder(`Loading GitHub accounts`.padEnd(++dots, \".\"));\r\n}, 100);\r\n\r\nconst { viewer } = await octokit.graphql(GetAccounts, { first: ORGS_PER_PAGE });\r\n\r\nif (!viewer) {\r\n  exit(1);\r\n}\r\n\r\nconst { login, name, url, organizations } = viewer;\r\nconst accounts = [\r\n  { name, value: login, description: url, type: \"user\" },\r\n  ...organizations.edges.map(({ node: { login, name, url } }) => ({\r\n    name,\r\n    value: login,\r\n    description: url,\r\n    type: \"org\"\r\n  }))\r\n].sort((a, b) => (a.name > b.name ? 1 : -1));\r\n\r\nclearInterval(accountsPlaceholderIntervalId);\r\ndots = 0;\r\n\r\nconst accountChoice = await arg(\"Which account?\", accounts);\r\nconst { type: accountType } = accounts.find(\r\n  account => accountChoice === account.value\r\n);\r\n\r\n// Get repo list for the user or organization\r\n\r\nlet repositoriesAndLoadMore = [];\r\n\r\nasync function fetchRepositories(variables) {\r\n  const reposPlaceholderIntervalId = setInterval(() => {\r\n    setPlaceholder(`Loading repositories`.padEnd(++dots, \".\"));\r\n  }, 100);\r\n\r\n  let edges, endCursor, hasNextPage;\r\n  const oldLoadMore = repositoriesAndLoadMore.find(({ value }) =>\r\n    value.startsWith(\"load-more-after-\")\r\n  );\r\n\r\n  if (oldLoadMore) {\r\n    repositoriesAndLoadMore.pop();\r\n  }\r\n\r\n  if (accountType === \"org\") {\r\n    ({\r\n      viewer: {\r\n        organization: {\r\n          repositories: {\r\n            edges,\r\n            pageInfo: { endCursor, hasNextPage }\r\n          }\r\n        }\r\n      }\r\n    } = await octokit.graphql(GetOrgRepos, {\r\n      login: accountChoice,\r\n      ...variables\r\n    }));\r\n  } else {\r\n    ({\r\n      viewer: {\r\n        repositories: {\r\n          edges,\r\n          pageInfo: { endCursor, hasNextPage }\r\n        }\r\n      }\r\n    } = await octokit.graphql(GetUserRepos, variables));\r\n  }\r\n\r\n  repositoriesAndLoadMore = [\r\n    ...repositoriesAndLoadMore,\r\n    ...edges.map(({ node: { description, name, url } }) => ({\r\n      name,\r\n      description,\r\n      value: url\r\n    }))\r\n  ];\r\n\r\n  if (hasNextPage) {\r\n    repositoriesAndLoadMore.push({\r\n      name: \"Load more...\",\r\n      value: `load-more-after-${endCursor}`\r\n    });\r\n  }\r\n\r\n  clearInterval(reposPlaceholderIntervalId);\r\n  dots = 0;\r\n\r\n  if (!repositoriesAndLoadMore.length) {\r\n    exit(1);\r\n  }\r\n\r\n  let repoChoice = await arg(\"Which project?\", repositoriesAndLoadMore);\r\n\r\n  if (repoChoice.startsWith(\"load-more-after-\")) {\r\n    await fetchRepositories({\r\n      first: REPOS_PER_PAGE,\r\n      after: repoChoice.split(\"-\").pop()\r\n    });\r\n  } else {\r\n    exec(`open ${repoChoice}`);\r\n  }\r\n}\r\n\r\nawait fetchRepositories({ first: REPOS_PER_PAGE });\r\n```","value":"https://github.com/johnlindquist/kit/discussions/252","img":"https://avatars.githubusercontent.com/u/1518780?u=af82f867331be805d51330c3f8e1f7ab8169837b&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","author":"Jakub Olek","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/249","url":"https://github.com/johnlindquist/kit/discussions/249","title":"Snippets","name":"Snippets","extension":".md","description":"Created by hakubo","resourcePath":"/johnlindquist/kit/discussions/249","createdAt":"2021-05-07T08:35:22Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzU1MTQz","body":"Small snippets manager with builtin support for variables.\r\nVariables are defined as an array of function so they can be anything, arg, getSelectedText etc.\r\nSnippet can also be a simple string if it has no variables\r\n\r\n[Install Snippets](https://scriptkit.com/api/new?name=snippets&url=https://gist.githubusercontent.com/hakubo/3ce0072320188e189025548bdb460b5e/raw/d3aff955e0442c8ed20d1ca7a3c03ac9f945eae2/snippets.js)\r\n\r\n```js\r\n// Menu: Snippets\r\n// Description: Snippets collection\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n// Shortcut: opt -\r\n\r\nconst { setSelectedText } = await kit(\"text\");\r\n\r\nfunction capitalizeFirstLetter(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nconst snippetMap = {\r\n  useState: {\r\n    args: [() => arg(\"variable name\"), () => arg(\"variable value\")],\r\n    template: (name, value) =>\r\n      `const [${name}, set${capitalizeFirstLetter(name)}] = useState(${value})`,\r\n  },\r\n  name: \"Jakub Olek\",\r\n  date: new Date().toLocaleDateString(\"en-GB\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  }),\r\n  test: {\r\n    args: [() => arg(\"should\")],\r\n    template: (testName) => `test(\"should ${testName}\", function() {\r\n\r\n  })`,\r\n  },\r\n  component: {\r\n    args: [() => arg(\"component name\")],\r\n    template: (componentName) => `function ${capitalizeFirstLetter(\r\n      componentName\r\n    )}() {\r\n      return\r\n    }`,\r\n  },\r\n};\r\n\r\nconst snippetName = await arg(\"Snippet\", Object.keys(snippetMap));\r\n\r\nlet result = snippetMap[snippetName];\r\nconst { args, template } = result;\r\n\r\nif (template) {\r\n  const variables = [];\r\n\r\n  if (args) {\r\n    for (let i = 0; i < args.length; i++) {\r\n      const variable = args[i];\r\n\r\n      if (typeof variable !== \"string\") {\r\n        variables.push(await variable());\r\n      }\r\n    }\r\n  }\r\n\r\n  setSelectedText(template(...variables));\r\n} else {\r\n  setSelectedText(result);\r\n}\r\n\r\n```","value":"https://github.com/johnlindquist/kit/discussions/249","img":"https://avatars.githubusercontent.com/u/1018759?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/39992?u=1ee38610bb2d8a082b3e84db7ecacf78149d061b&v=4","user":"gr2m","author":"Gregor Martynus","twitter":"gr2m","discussion":"https://github.com/johnlindquist/kit/discussions/246","url":"https://github.com/johnlindquist/kit/discussions/246","title":"Set GitHub profile status","name":"Set GitHub profile status","extension":".md","description":"Created by gr2m","resourcePath":"/johnlindquist/kit/discussions/246","createdAt":"2021-05-06T20:31:36Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzU0NTA1","body":"[Install set-github-status](https://scriptkit.com/api/new?name=set-github-status&url=https://gist.githubusercontent.com/gr2m/b336c3c76de58a7b65299b9e224564c5/raw/187c618b70b943b117e452bd63799a2be7785b95/set-github-status.js)\r\n\r\n```js\r\n//Shortcut: command shift -\r\n// Menu: Set GitHub Status\r\n// Description: Sets the status text on your GitHub Profile\r\n\r\nconst message = await arg(\"What would you like to say?\");\r\nconst token = await env(\"GITHUB_STATUS_TOKEN\", {\r\n  secret: true,\r\n  ignoreBlur: true,\r\n  hint: md(\r\n    `Create a token [on GitHub](https://github.com/settings/tokens/new?scopes=user&description=kit%20script)`\r\n  ),\r\n});\r\n\r\nconst response = await post(\r\n  \"https://api.github.com/graphql\",\r\n  {\r\n    query: `mutation ($text:String) {\r\n      changeUserStatus(input:{message:$text}) {\r\n        status {\r\n          message\r\n        }\r\n      }\r\n    }`,\r\n    variables: {\r\n      text: message,\r\n    },\r\n  },\r\n  {\r\n    headers: {\r\n      authorization: `token ${token}`,\r\n    },\r\n  }\r\n);\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/246","img":"https://avatars.githubusercontent.com/u/39992?u=1ee38610bb2d8a082b3e84db7ecacf78149d061b&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/245","url":"https://github.com/johnlindquist/kit/discussions/245","title":"✨ NEW ✨ // Background: true","name":"✨ NEW ✨ // Background: true","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/245","createdAt":"2021-05-06T19:36:22Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzU0NDQ0","body":"`beta.12` brings in the ability to start/stop background tasks.\r\n\r\n\r\nUsing `// Background :true` at the top of your script will change the behavior in the main menu:\r\n```js\r\n// Background: true\r\n\r\nsetInterval(() => {}, 1000) //Some long-running process\r\n```\r\n\r\n<img width=\"702\" alt=\"Screen Shot 2021-05-06 at 1 30 53 PM\" src=\"https://user-images.githubusercontent.com/36073/117355039-4b212b80-ae6f-11eb-952e-4ee28c65ded4.png\">\r\n\r\n<img width=\"681\" alt=\"Screen Shot 2021-05-06 at 1 31 13 PM\" src=\"https://user-images.githubusercontent.com/36073/117355094-5b390b00-ae6f-11eb-817a-86be66cabe18.png\">\r\n\r\n\r\n<img width=\"679\" alt=\"Screen Shot 2021-05-06 at 1 33 02 PM\" src=\"https://user-images.githubusercontent.com/36073/117355276-9a675c00-ae6f-11eb-82b4-fa069e53b143.png\">\r\n\r\n\r\n## Auto (like nodemon)\r\n```js\r\n// Background: auto\r\n\r\nsetInterval(() => {}, 1000) //Some long-running process\r\n```\r\n\r\nUsing `auto`, after you start the script, editing will stop/restart the script.\r\n","value":"https://github.com/johnlindquist/kit/discussions/245","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/5779832?u=42c63031fea8d5774f5011caf5b92ac5e61c346b&v=4","user":"zzeleznick","author":"Z Zeleznick","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/237","url":"https://github.com/johnlindquist/kit/discussions/237","title":"Low-Fi Finder Image Grid View 🖼️","name":"Low-Fi Finder Image Grid View 🖼️","extension":".md","description":"Created by zzeleznick","resourcePath":"/johnlindquist/kit/discussions/237","createdAt":"2021-05-04T00:50:22Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQ5NDIy","body":"## Low-Fi Finder Image Grid View 🖼️\r\n\r\nWhile list views are nice, sometimes you just want a grid 😄. Here, I played around with displaying images in a grid layout.\r\n\r\nI'd even say that grids feel like a natural extension to the layouts in #231 🤓 \r\n\r\nI started this project a little while back, and am currently using the html panel as opposed to `choice.html`. To support custom actions on selection (e.g. copy image filepath to clipboard on choice selection) within a grid context, I think that there is at least one missing piece.\r\n\r\n> Enable setting `className` / styles of choice button parent container\r\n\r\nIn my example, I'm doing a self-described css injection to add new styles (e.g. `.grid-cols-3 {grid-template-columns: repeat(3, minmax(0, 1fr))}`), but the styles probably could be done in-line.\r\n\r\n## Demo\r\n\r\n![image_grid](https://user-images.githubusercontent.com/5779832/116947457-acf45200-ac31-11eb-8982-f1445d1aaf52.gif)\r\n\r\n## Code\r\n\r\n<details>\r\n<summary>\r\n<code>lib/image-grid.js</code>\r\n</summary>\r\n\r\n```js\r\n// lib/image-grid.js\r\n\r\nconst DEFAULT_LIMIT = 10000; // 1000; // 100;\r\nconst DEBUG = { ENABLED: false };\r\n\r\nconst debug = (...args) => DEBUG.ENABLED && console.log(...args)\r\nconst info = (...args) => console.log(...args)\r\n\r\nexport const enableDebugMode = () => { DEBUG.ENABLED = true }\r\n\r\nconst getImages = (filepath, maxdepth) => {\r\n  // NOTE: options to use \"-ctime -90d\" / \"-atime -90d\" to filter more results\r\n  const findCommand = `find -E ${filepath} -iregex '.*\\.(jpg|jpeg|png|gif)' -maxdepth ${maxdepth}`\r\n  const findSortedCommand = `${findCommand} -print0 | xargs -0 ls -at`\r\n  debug(\"findSortedCommand\", findSortedCommand)\r\n  return exec(findSortedCommand, { silent: true }).toString().split(\"\\n\").filter(v => v)\r\n}\r\n\r\nconst buildImageModal = (payload) => {\r\n  let {file} = payload;\r\n  const img = `<img src=\"${file}\">`\r\n  return `<div class=\"imgContainer\">${img}</div>`\r\n}\r\n\r\nconst injectCss = (html) => {\r\n  // our tailwind build doesn't include grid css\r\n  // we add some custom styles as well\r\n  const css = `\r\n    /* Mimic tailwind grid css */\r\n    .grid {display:grid}\r\n    .grid-cols-3 {grid-template-columns: repeat(3, minmax(0, 1fr))}\r\n    .grid-cols-4 {grid-template-columns: repeat(4, minmax(0, 1fr))}\r\n    .grid-cols-5 {grid-template-columns: repeat(5, minmax(0, 1fr))}\r\n    /* custom css to center images in grid */\r\n    .grid div {place-items: center; padding: clamp(1px, 4%, 25px);}\r\n    .imgContainer {display: flex;}\r\n  `\r\n  const style = `<style type=\"text/css\">${css}</style>`\r\n  return `${style}${html}`\r\n}\r\n\r\n\r\nconst buildPage = (imageObjects, limit = DEFAULT_LIMIT) => {\r\n  const subset = imageObjects\r\n      .slice(0, limit)\r\n      .map(file => { return { file } })\r\n\r\n  const columns = subset.length > 32 ? (subset.length > 64 ? 5 : 4) : 3\r\n  const modals = subset.map(buildImageModal).join('\\n')\r\n\r\n  const html = `<div class=\"grid grid-cols-${columns} pt-1 m-1\">${modals}</div>`\r\n  const page = injectCss(html)\r\n  debug(page);\r\n  info('buildPage: Done')\r\n  return page\r\n}\r\n\r\nexport const buildImagesPanel = async (filepath, maxdepth, limit) => {\r\n  const images = getImages(filepath, maxdepth);\r\n  info(`Found ${images.length} images`);\r\n  await arg({\r\n    input: \" \",\r\n  }, buildPage(images, limit));\r\n}\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\n<code>view-desktop.js</code>\r\n</summary>\r\n\r\n```js\r\n// Menu: View Desktop\r\n// Description: View Desktop Attachments\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n// Shortcut: cmd shift d\r\n\r\nconst {buildImagesPanel} = await lib(\"image-grid\")\r\n\r\nconst filepath = \"~/Desktop\"\r\nconst depth = \"3\"\r\n\r\nawait buildImagesPanel(filepath, depth)\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\n<code>view-attachments.js</code>\r\n</summary>\r\n\r\n```js\r\n// Menu: View Attachment\r\n// Description: View iMessage Attachments\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n// Shortcut: cmd shift l\r\n\r\nconst {buildImagesPanel} = await lib(\"image-grid\")\r\n\r\n// NOTE: Need to grant Kit app full disk access in Security and Privacy or find will return 0 results \r\nconst filepath = \"~/Library/Messages/Attachments\"\r\nconst depth = \"4\"\r\n\r\nawait buildImagesPanel(filepath, depth)\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\n<code>view-downloads.js</code>\r\n</summary>\r\n\r\n```js\r\n// Menu: View Download\r\n// Description: View Download Attachments\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n// Shortcut: cmd shift 0\r\n\r\nconst {buildImagesPanel, enableDebugMode} = await lib(\"image-grid\")\r\n\r\nconst filepath = \"~/Downloads\"\r\nconst depth = \"2\"\r\nconst limit = 42\r\n\r\nenableDebugMode()\r\n\r\nawait buildImagesPanel(filepath, depth, limit)\r\n```\r\n</details>\r\n\r\n\r\n### Reference\r\n\r\nHere are a few screenshots of the native Finder window on macOS 10.14 that I intended to recreate in low-fidelity.\r\n<table>\r\n<tr>\r\n<td><img width=\"863\" alt=\"Native View\" src=\"https://user-images.githubusercontent.com/5779832/116947788-7a972480-ac32-11eb-9e22-10dfb1fa3dff.png\"></td>\r\n<td><img width=\"490\" alt=\"Sorting Options\" src=\"https://user-images.githubusercontent.com/5779832/116947778-779c3400-ac32-11eb-9378-4bb8c97012d6.png\"></td>\r\n</tr>\r\n<tr>\r\n<td>Example search for `png` files on my Desktop</td>\r\n<td>Sorting options</td>\r\n</tr>\r\n</table>\r\n\r\n\r\n\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/237","img":"https://avatars.githubusercontent.com/u/5779832?u=42c63031fea8d5774f5011caf5b92ac5e61c346b&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/6188161?v=4","user":"zacjones93","author":"Zac Jones","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/236","url":"https://github.com/johnlindquist/kit/discussions/236","title":"Drag and Drop Files for Data Entry and Syncing","name":"Drag and Drop Files for Data Entry and Syncing","extension":".md","description":"Created by zacjones93","resourcePath":"/johnlindquist/kit/discussions/236","createdAt":"2021-05-03T18:57:42Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQ5MDgw","body":"My fiancé does product shots for a local plant shop in the area. She will have dozens of plants to shoot that result in hundreds of photos.\r\n\r\nPart of the job is organizing and uploading them to google photos. This means she has been renaming hundreds of files individually. 😭  \r\n\r\nThe system they have down is: `{PLANT_NAME}{DETAIL?}{POT_SIZE}_{number}`. So for any given plant it will have several 'product' shots and several 'detail' shots taken for it.\r\n\r\nA simple script but going to save hours of data entry!\r\n\r\n\r\nhttps://user-images.githubusercontent.com/6188161/116919398-377f8600-ac1f-11eb-8f1c-94dc083501e8.mp4\r\n\r\n\r\n[Download Link](https://scriptkit.com/api/new?name=upload-photos&url=https://gist.githubusercontent.com/zacjones93/d9b153917062eb7da1a520deef4b54e4/raw/e87e3e4f98cc0b7b395a7f0b3961e05dc559cddc/upload-photos.js)\r\n\r\n<details>\r\n<summary>code</summary>\r\n<br>\r\n\r\n```js\r\nconst fs = await npm(\"fs\"); \r\nconst plantName = await arg(\"Enter a plant name:\");\r\nconst potSize = await arg(\"Enter pot size: \");\r\nconst shotType = await arg(\"Is this product or detail?\", [\"product\", \"detail\"]);\r\n\r\nconst photos = await drop(\"Drop your images\");\r\nconsole.log(photos);\r\n\r\n\r\nlet renamePhotoToDirectory = (path, plantName) => {\r\n // going to be a env variable\r\n  let targetDirectory = \"/Users/zac/Desktop/photops/photos\";\r\n\r\n  let photoPath = `${targetDirectory}/${plantName}`;\r\n\r\n  fs.rename(path, photoPath, (err) => {\r\n    if (err) return console.log(\"there was an error: \", err);\r\n\r\n    console.log(\"selectedFiles renamed\");\r\n  });\r\n};\r\n\r\nphotos.map((plant, index) => {\r\n  if (shotType === \"detail\") {\r\n    renamePhotoToDirectory(\r\n      plant.path,\r\n      `${plantName}Detail${potSize}_${index + 1}.png`\r\n    );\r\n  } else {\r\n    renamePhotoToDirectory(plant.path, `${plantName}${potSize}_${index + 1}.png`);\r\n  }\r\n});\r\n```\r\n\r\n</details>","value":"https://github.com/johnlindquist/kit/discussions/236","img":"https://avatars.githubusercontent.com/u/6188161?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/495517?u=12a5fbe7d6e91d3ba2bcb9a603fca020e62912fb&v=4","user":"chrislaughlin","author":"Chris Laughlin","twitter":"chrislaughlin","discussion":"https://github.com/johnlindquist/kit/discussions/235","url":"https://github.com/johnlindquist/kit/discussions/235","title":"Tweet Script","name":"Tweet Script","extension":".md","description":"Created by chrislaughlin","resourcePath":"/johnlindquist/kit/discussions/235","createdAt":"2021-05-03T14:58:26Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQ4NzM4","body":"Send Tweet from Kit, provides a way to send a tweet directly from Kit. When the script is run it will ask you to enter a tweet then it will run sentiment analysis on the tweet. If the tweet is positive it will be posted, if it's negative you will be prompted to confirm the send. \r\n\r\n```javascript \r\n// Shortcut: opt t\r\nlet Twitter = await npm('twitter-lite');\r\nlet Sent = await npm('sentiment');\r\n\r\nlet envOptions = {\r\n    hint: md(\r\n      `You need to [create an app](https://developer.twitter.com/en/apps) to get these keys/tokens`,\r\n    ),\r\n    ignoreBlur: true,\r\n    secret: true,\r\n  }\r\n  \r\n\r\nlet client = new Twitter({\r\n    consumer_key: await env('TWITTER_CONSUMER_KEY', envOptions),\r\n    consumer_secret: await env('TWITTER_CONSUMER_SECRET', envOptions),\r\n    access_token_key: await env('TWITTER_ACCESS_TOKEN_KEY', envOptions),\r\n    access_token_secret: await env('TWITTER_ACCESS_TOKEN_SECRET', envOptions),\r\n});\r\n\r\nconst sentiment = new Sent();\r\n\r\nlet tweet = await arg(\"what's on your mind?\");\r\n\r\nconst { score } = sentiment.analyze(tweet);\r\n\r\nconst isNeg = score < 0;\r\n\r\nlet shouldPost = await arg(\"Thats a little 🧂y\", [\r\n    { name: \"yeah I know sean anyway\", value: true },\r\n    {name: \"oh yeah don't post that\", value: false },\r\n])\r\n\r\nif (shouldPost) {\r\n    await client.post('statuses/update', {\r\n        status: `Random thought: ${tweet}`,\r\n    }).catch(error => console.log(error));\r\n}\r\n```","value":"https://github.com/johnlindquist/kit/discussions/235","img":"https://avatars.githubusercontent.com/u/495517?u=12a5fbe7d6e91d3ba2bcb9a603fca020e62912fb&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/234","url":"https://github.com/johnlindquist/kit/discussions/234","title":"My IP","name":"My IP","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/234","createdAt":"2021-05-03T14:57:28Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQ4NzM2","body":"\r\n[Install my-ip](https://scriptkit.com/api/new?name=my-ip&url=https://gist.githubusercontent.com/johnlindquist/47637881382e39f2bf738354f57ac7d7/raw/e9d1ff50a9d5bc03ca4c1af880a6c50f7a6c1ce6/my-ip.js)\r\n\r\n```js\r\n// Menu: My IP\r\n// Description: Displays and copies IP to clipboard\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet network = await npm(\"network\")\r\nlet { promisify } = await npm(\"es6-promisify\")\r\n\r\nlet ip = await promisify(network.get_public_ip)()\r\n\r\ncopy(ip)\r\nawait arg(ip)\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/234","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/233","url":"https://github.com/johnlindquist/kit/discussions/233","title":"Google Home Speak Text","name":"Google Home Speak Text","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/233","createdAt":"2021-05-03T14:27:28Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQ4Njc1","body":"\r\n[Install google-home-speak](https://scriptkit.com/api/new?name=google-home-speak&url=https://gist.githubusercontent.com/johnlindquist/995c76d4d3999568241ab0eb22760c98/raw/f11eeddd2ae73522543ab596fd775992dbe9600a/google-home-speak.js)\r\n\r\n```js\r\n// Menu: Google Home Speak Text\r\n// Description: Tell Google Home to speak a message\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet GoogleHome = await npm(\"google-home-push\")\r\n// Find your device IP on your router or\r\n// Home App -> Device -> Settings Gear -> Device Information\r\nlet home = new GoogleHome(\"10.0.0.3\")\r\n\r\nhome.speak(await arg(\"Speak:\"))\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/233","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/6443408?v=4","user":"udondan","author":"Daniel Schroeder","twitter":"udondan","discussion":"https://github.com/johnlindquist/kit/discussions/232","url":"https://github.com/johnlindquist/kit/discussions/232","title":"AWS Select profile","name":"AWS Select profile","extension":".md","description":"Created by udondan","resourcePath":"/johnlindquist/kit/discussions/232","createdAt":"2021-05-03T08:26:23Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQ4MjYx","body":"This is a helper to switch AWS profiles, which then can be used by other scripts.\r\n\r\nThe script parses the `~/.aws/config` file and let's the user select one of the configured profiles. The current active profile is marked with a star.\r\n\r\n![Preview](https://user-images.githubusercontent.com/6443408/116851958-bbbc1400-abf3-11eb-9149-361c4e3a5553.png)\r\n\r\nThe selected value then will be stored as `AWS_PROFILE` in the env file.\r\n\r\nTo use the profile name in another script, you can get the value via:\r\n\r\n```js\r\nconst region = await env('AWS_PROFILE');\r\n```\r\n\r\n```js\r\n// Menu: AWS Select Profile\r\n// Description: Select AWS profile from you AWS config\r\n// Author: Daniel Schroeder\r\n// Twitter: @udondan\r\nimport { readFileSync } from 'fs';\r\n\r\nconst ini = await npm('ini');\r\nconst awsConf = `${process.env.HOME}/.aws/config`;\r\n\r\nconst config = ini.parse(readFileSync(awsConf, 'utf-8'));\r\n\r\nconst currentMarker = ' ★';\r\nconst currentProfile = env['AWS_PROFILE'];\r\n\r\nconst sections = Object.keys(config).reduce(function (filtered, section) {\r\n  if (section.startsWith('profile ')) {\r\n    let profileName = section.replace('profile ', '');\r\n    if (profileName == currentProfile) {\r\n      profileName += currentMarker;\r\n    }\r\n    filtered.push(profileName);\r\n  }\r\n  return filtered;\r\n}, []);\r\n\r\nconst profile = await arg(\r\n  {\r\n    placeholder: 'Select profile',\r\n    hint: `parsed from ${awsConf}`,\r\n  },\r\n  sections.sort()\r\n);\r\nawait cli('set-env-var', 'AWS_PROFILE', profile.replace(currentMarker, ''));\r\n```","value":"https://github.com/johnlindquist/kit/discussions/232","img":"https://avatars.githubusercontent.com/u/6443408?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/3685876?u=3cccf0d3d3a3c6be079bb4115e78e4750a869387&v=4","user":"lannonbr","author":"Benjamin Lannon","twitter":"lannonbr","discussion":"https://github.com/johnlindquist/kit/discussions/228","url":"https://github.com/johnlindquist/kit/discussions/228","title":"View GitHub Trending Repos","name":"View GitHub Trending Repos","extension":".md","description":"Created by lannonbr","resourcePath":"/johnlindquist/kit/discussions/228","createdAt":"2021-05-02T14:31:44Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQ3NTEz","body":"This was a fun one to build. So GitHub does not have an API endpoint for their [trending](https://github.com/trending) page. So to work around this I used playwright to scrape the pages for various languages. Then I'd create a tab for a variety of language. What I ran into though was given the data likely doesn't change too often, going and scraping on every tab change was slow. To resolve this, I wrote a second script that runs on an hourly cron and then saves the data to a `lowdb` database with the preloaded `db` function. This now makes the main script run instantly as the entries are cached on my system.\r\n\r\n![Screen Shot 2021-05-02 at 10 25 49 AM](https://user-images.githubusercontent.com/3685876/116816783-61f31580-ab31-11eb-99ff-71b21070ef40.png)\r\n\r\n## Scripts\r\n\r\nMain Script:\r\n\r\n```js\r\n// Menu: GitHub Trending\r\n// Description: Show today's Trending GitHub Repos for various languages\r\n\r\nconst trendingDB = db(\"github-trending\");\r\n\r\nconst langs = [\"rust\", \"javascript\", \"typescript\", \"go\", \"python\", \"ruby\"];\r\nfor (const lang of langs) {\r\n  onTab(lang, async () => {\r\n    const repo = await arg(\"Select a repo to open it\", trendingDB.get(lang));\r\n    exec(`open ${repo}`);\r\n  });\r\n}\r\n```\r\n\r\nBackground puller script:\r\n\r\n```js\r\n// Description: Pulls down trending repos from github and save to database\r\n// Schedule: 0 * * * *\r\n// Exclude: true\r\n\r\n/** @type typeof import('playwright') */\r\nconst playwright = await npm(\"playwright\");\r\n\r\nlet dbDefaults = {};\r\n\r\nconst langs = [\"rust\", \"javascript\", \"typescript\", \"go\", \"python\", \"ruby\"];\r\n\r\nfor (const lang of langs) {\r\n  dbDefaults[lang] = [];\r\n}\r\n\r\nconst trendingDB = db(\"github-trending\", dbDefaults);\r\n\r\nconst browser = await playwright.chromium.launch();\r\n\r\nfor (const lang of langs) {\r\n  const context = await browser.newContext();\r\n\r\n  const page = await context.newPage();\r\n\r\n  await page.goto(`https://github.com/trending/${lang}`);\r\n\r\n  const repos = await page.evaluate(() => {\r\n    const repos = document.querySelectorAll(\".Box-row\");\r\n\r\n    const results = [];\r\n\r\n    for (let repo of repos) {\r\n      const repoName = repo.querySelector(\"h1 a\").getAttribute(\"href\").slice(1);\r\n      let description = repo.querySelector(\"p\")?.textContent.trim();\r\n      const starCount = repo\r\n        .querySelector(\"div span.d-inline-block.float-sm-right\")\r\n        ?.textContent.trim();\r\n\r\n      if (!description) {\r\n        description = starCount;\r\n      } else {\r\n        description = `${starCount} | ${description}`;\r\n      }\r\n\r\n      results.push({\r\n        name: repoName,\r\n        value: `https://github.com/${repoName}`,\r\n        description,\r\n      });\r\n    }\r\n\r\n    return results;\r\n  });\r\n\r\n  trendingDB.set(lang, repos).write();\r\n}\r\nawait browser.close();\r\n```","value":"https://github.com/johnlindquist/kit/discussions/228","img":"https://avatars.githubusercontent.com/u/3685876?u=3cccf0d3d3a3c6be079bb4115e78e4750a869387&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/81244?v=4","user":"letanure","author":"luiz tanure","twitter":"tanure","discussion":"https://github.com/johnlindquist/kit/discussions/227","url":"https://github.com/johnlindquist/kit/discussions/227","title":"First one, simple text / string transformations","name":"First one, simple text / string transformations","extension":".md","description":"Created by letanure","resourcePath":"/johnlindquist/kit/discussions/227","createdAt":"2021-05-01T16:54:09Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQ2NzA3","body":"Just created a simple one, no deps, for simple text transformations\r\n\r\n- Remove duplicated spaces\r\n- Uppercase [AAA BBB]\r\n- Lowercase [aaa bbb]\r\n- Capitalize words [Aaa Bbb]\r\n- Snake case [aaa_bbb]\r\n- kebab-case [aaa-bbb]\r\n- camelCase [aaaBbb]\r\n- PascalCase [AaaBbb]\r\n- Remove numbers [aa1aBb2b => aaaBbb]\r\n- Keep only numbers [aa1aBb2b => 12]\r\n- Remove HTML tags\r\n- Remove HTML attributes\r\n- Remove accents & diacritics [âêì => aei]\r\n- URL slugfy\r\n\r\nhttps://codesandbox.io/s/funny-sun-zt1ur?file=/src/index.js\r\n\r\nhttps://gist.github.com/letanure/ee7db17b3b381966f61aab9812862870\r\n\r\n\r\n\r\nhttps://user-images.githubusercontent.com/81244/116789299-7cd07600-aaae-11eb-9fa2-3bbfa58ff053.mp4\r\n\r\n\r\n","value":"https://github.com/johnlindquist/kit/discussions/227","img":"https://avatars.githubusercontent.com/u/81244?v=4"},{"avatar":"https://avatars.githubusercontent.com/u/3685876?u=3cccf0d3d3a3c6be079bb4115e78e4750a869387&v=4","user":"lannonbr","author":"Benjamin Lannon","twitter":"lannonbr","discussion":"https://github.com/johnlindquist/kit/discussions/223","url":"https://github.com/johnlindquist/kit/discussions/223","title":"View supported versions of node","name":"View supported versions of node","extension":".md","description":"Created by lannonbr","resourcePath":"/johnlindquist/kit/discussions/223","createdAt":"2021-05-01T02:46:42Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQ2MTkw","body":"The NodeJS core team provides a JSON file in [nodejs/release](https://github.com/nodejs/Release/): https://github.com/nodejs/Release/blob/main/schedule.json which details all of the major versions of Node, their initial release date, EOL, maintenance mode date, as well as LTS date.\r\n\r\nI wanted to do a test run with this document of parsing it and getting some initial results. As Node 10 went EOL at the end of today, I thought it could be neat to use this to track node versions in projects you work on and if you're using a node version that is no longer supported, it could inform you of such and tell you to upgrade to the latest LTS. As a test run, I pull down the JSON file and parse it out to list the versions of Node which are still being supported.\r\n\r\n![Screen Shot 2021-04-30 at 10 33 07 PM](https://user-images.githubusercontent.com/3685876/116768468-c6648680-aa04-11eb-8eb2-02ed6fef0cd0.png)\r\n\r\n(Also as a fun aside, I am tending more and more of using `arg()` to display a list of content even if I don't then select one & go further with it. I enjoy the way it presents the data & it is filterable by default. I know of the `img` and `html` fields are around but I have yet to find neat ways of using them.)\r\n\r\n## Code:\r\n\r\n```js\r\n// Menu: Available Node versions\r\n// Description: View all supported versions of NodeJS\r\n// Author: Benjamin Lannon\r\n// Twitter: @lannonbr\r\n\r\nlet resp = await get(\r\n  \"https://raw.githubusercontent.com/nodejs/Release/main/schedule.json\"\r\n);\r\nconst data = Object.entries(resp.data);\r\n\r\n/** @type typeof import('dayjs') */\r\nlet dayjs = await npm(\"dayjs\");\r\n\r\nlet opts = [];\r\n\r\nfor (let [version, info] of data) {\r\n  let isSupported =\r\n    dayjs(info.start).diff(dayjs(), \"days\") < 0 &&\r\n    dayjs(info.end).diff(dayjs(), \"days\") > 0;\r\n\r\n  if (isSupported) {\r\n    opts.push({\r\n      name: `Node ${version}`,\r\n      description: `Maintainence ends on ${dayjs(info.end).format(\r\n        \"MMMM DD, YYYY\"\r\n      )}`,\r\n      endDate: info.end,\r\n    });\r\n  }\r\n}\r\n\r\nopts = opts.sort((a, b) => {\r\n  return dayjs(a.endDate).unix() - dayjs(b.endDate).unix();\r\n});\r\n\r\nawait arg(\"These versions of NodeJS are currently maintained\", opts);\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/223","img":"https://avatars.githubusercontent.com/u/3685876?u=3cccf0d3d3a3c6be079bb4115e78e4750a869387&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/32459922?u=effc229900dd0378b29724b8a7d8e7ca9fa3e0b2&v=4","user":"austincrim","author":"Austin Crim","twitter":"crim_codes","discussion":"https://github.com/johnlindquist/kit/discussions/222","url":"https://github.com/johnlindquist/kit/discussions/222","title":"Vite Scaffolder","name":"Vite Scaffolder","extension":".md","description":"Created by austincrim","resourcePath":"/johnlindquist/kit/discussions/222","createdAt":"2021-04-30T21:05:04Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQ1OTc3","body":"Put together a quick script to scaffold Vite projects using a variety of my common choices. I've got plans to expand beyond Vite to include Next.js, SvelteKit, etc. as well as setting up individual libraries like Tailwind.\r\n\r\n```javascript\r\n// Menu: project-scaffolder 👷‍♂️\r\n// Description: Step by step project scaffolding with Vite\r\n\r\nconst projectsDirectory = '/Users/austin/repos';\r\nconst folder = await arg({\r\n    placeholder: 'Enter project name 📁',\r\n    validate: (choice) => (choice ? true : 'Please enter a folder name.')\r\n});\r\nconst framework = await arg('Pick a framework 👨‍💻', [\r\n    'react',\r\n    'svelte',\r\n    'preact',\r\n    'vanilla'\r\n]);\r\nconst useTypescript =\r\n    framework === 'vanilla'\r\n        ? 'false'\r\n        : await arg('Pick a flavor 🍦', [\r\n              { name: 'TypeScript', value: true },\r\n              { name: 'JavaScript', value: false }\r\n          ]);\r\nconst packageManager = await arg('Package Manager?', ['npm', 'yarn', 'pnpm']);\r\nsetPlaceholder('building...🔨');\r\nconst command = `${packageManager} ${\r\n    packageManager === 'yarn' ? 'create' : 'init'\r\n} @vitejs/app ${folder} -- --template ${framework}${useTypescript ? '-ts' : ''}`;\r\n\r\ncd(projectsDirectory);\r\nexec(command);\r\nedit(`${projectsDirectory}/${folder}`);\r\n```","value":"https://github.com/johnlindquist/kit/discussions/222","img":"https://avatars.githubusercontent.com/u/32459922?u=effc229900dd0378b29724b8a7d8e7ca9fa3e0b2&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/39992?u=1ee38610bb2d8a082b3e84db7ecacf78149d061b&v=4","user":"gr2m","author":"Gregor Martynus","twitter":"gr2m","discussion":"https://github.com/johnlindquist/kit/discussions/221","url":"https://github.com/johnlindquist/kit/discussions/221","title":"Copy GitHub name","name":"Copy GitHub name","extension":".md","description":"Created by gr2m","resourcePath":"/johnlindquist/kit/discussions/221","createdAt":"2021-04-30T20:24:10Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQ1OTMw","body":"[install](https://gist.githubusercontent.com/gr2m/89b659fc885062a5d22221d62fe9655f/raw/3cb845257ed17a03aae8364ce7d17a43833e21d9/copy-github-name.js)\r\n\r\n```js\r\n// Menu: Copy GitHub user name\r\n// Description: Copies a GitHub user's first name, fallback to @login\r\n// Author: Gregor Martynus\r\n// Twitter: @gr2m\r\n\r\nconst { Octokit } = await npm(\"octokit\");\r\n\r\nconst { createOAuthDeviceAuth } = await npm(\"@octokit/auth-oauth-device\");\r\n\r\n// set GitHub Token unless it's already set\r\nlet octokit;\r\nif (env.GITHUB_TOKEN_NO_SCOPES) {\r\n  octokit = new Octokit({\r\n    auth: env.GITHUB_TOKEN_NO_SCOPES,\r\n  });\r\n} else {\r\n  const auth = createOAuthDeviceAuth({\r\n    clientType: \"oauth-app\",\r\n    clientId: \"34e4eac44e03b0daa82b\",\r\n    onVerification(verification) {\r\n      copy(verification.user_code);\r\n      arg({\r\n        placeholder: `Press <enter> after granting permissions`,\r\n        ignoreBlur: true,\r\n        hint: `\r\n          Open <a href=\"${verification.verification_uri}\">${verification.verification_uri}</a>, paste code from clipboard\r\n        `,\r\n      });\r\n    },\r\n  });\r\n\r\n  const { token } = await auth({\r\n    type: \"oauth\",\r\n  });\r\n\r\n  octokit = new Octokit({\r\n    auth: token,\r\n  });\r\n\r\n  await cli(\"set-env-var\", \"GITHUB_TOKEN_NO_SCOPES\", token);\r\n}\r\n\r\nconst { data: me } = await octokit.rest.users.getAuthenticated();\r\n\r\nconst username = await arg(\"Enter a GitHub username:\");\r\n\r\nlet { data: user } = await octokit.rest.users.getByUsername({ username });\r\n\r\nconst userFirstNameOrUsername = user.name.trim()\r\n  ? user.name.trim().split(/\\s+/)[0]\r\n  : `@${user.login}`;\r\n\r\ncopy(userFirstNameOrUsername);\r\nsetPlaceholder(`\"${userFirstNameOrUsername}\" copied to your clipboard`);\r\nsetIgnoreBlur(false);\r\nsetHint(`Press esc to close this prompt`);\r\n```\r\n\r\n---\r\n\r\nPS: I tried to publish via the built-in publish feature, but it doesn't work for me: https://github.com/johnlindquist/kit/issues/219. I created the install link above manually based on your link here: https://github.com/johnlindquist/kit/discussions/217","value":"https://github.com/johnlindquist/kit/discussions/221","img":"https://avatars.githubusercontent.com/u/39992?u=1ee38610bb2d8a082b3e84db7ecacf78149d061b&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/217","url":"https://github.com/johnlindquist/kit/discussions/217","title":"Open Graph Image Grabber","name":"Open Graph Image Grabber","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/217","createdAt":"2021-04-30T18:25:40Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQ1Nzgw","body":"Here's a script I talked about on @bdougie 's stream today. Someone in chat asked me to share, so I dug it up:\r\n\r\n[Install open-graph-image-grabber](https://scriptkit.com/api/new?name=open-graph-image-grabber&url=https://gist.githubusercontent.com/johnlindquist/812bc470edcdb277fc532a3ae4d51fcc/raw/fb6b7638b99fc876b8105da216679ccc832267c6/open-graph-image-grabber.js)\r\n\r\n```js\r\n// Menu: Open Graph Image Grabber\r\n// Description: Attempts to scrape the Open Graph image from the focused chrome tab\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\n//📣 Note: Playwright takes ~20 seconds or so to install...\r\n\r\nlet { getActiveTab } = await kit(\"chrome\")\r\nlet { attribute } = await kit(\"playwright\")\r\nlet { copyPathAsPicture } = await kit(\"file\")\r\nlet download = await npm(\"image-downloader\")\r\nlet sharp = await npm(\"sharp\")\r\n\r\nlet tab = await getActiveTab()\r\nconsole.log({ tab })\r\nsetPlaceholder(`og:image of ${tab}`)\r\n\r\nlet url = \"\"\r\ntry {\r\n  url = await attribute(\r\n    tab,\r\n    'head meta[property=\"og:image\"]',\r\n    \"content\"\r\n  )\r\n} catch (error) {\r\n  setPlaceholder(\r\n    `og:image not found. Checking twitter:image`\r\n  )\r\n  try {\r\n    url = await attribute(\r\n      tab,\r\n      'head meta[name=\"twitter:image\"]',\r\n      \"content\"\r\n    )\r\n  } catch (error) {\r\n    console.log(error)\r\n    setPlaceholder(`Sorry, giving up`)\r\n    await wait(1000)\r\n    exit()\r\n  }\r\n}\r\n\r\nconsole.log({ url })\r\n\r\nsetPlaceholder(`Found ${url}`)\r\nconsole.log({ url })\r\n\r\nlet checkRedirects = await get(url)\r\nurl = checkRedirects.request.res.responseUrl\r\n\r\nconsole.log({ redirectedUrl: url })\r\n\r\nlet imageName = tab.split(\"/\").pop()\r\nif (!imageName)\r\n  imageName = tab.split(\"//\").pop().replace(\"/\", \"\")\r\nif (!imageName.endsWith(\".png\"))\r\n  imageName = `${imageName}.png`\r\n\r\nconsole.log({ imageName })\r\n\r\nlet dest = kenvPath(\"tmp\", imageName)\r\n\r\nlet { filename: image } = await download\r\n  .image({\r\n    url,\r\n    dest,\r\n  })\r\n  .catch(error => {\r\n    console.log(error)\r\n  })\r\n\r\nconsole.log({ image })\r\n\r\nlet width = parseInt(await arg(\"Enter width:\"), 10)\r\n\r\nsetPlaceholder(`Resizing to ${width}`)\r\nlet metadata = await sharp(image).metadata()\r\n\r\nlet newHeight = Math.floor(\r\n  metadata.height * (width / metadata.width)\r\n)\r\n\r\nlet lastDot = /.(?!.*\\.)/\r\nlet resizedImageName = image.replace(lastDot, `-${width}.`)\r\n\r\nawait sharp(image)\r\n  .resize(width, newHeight)\r\n  .toFile(resizedImageName)\r\n\r\nconsole.log({ resizedImageName })\r\n\r\nawait copyPathAsPicture(resizedImageName)\r\n\r\nsetPlaceholder(`Copied to clipboard`)\r\nawait wait(500)\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/217","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/213","url":"https://github.com/johnlindquist/kit/discussions/213","title":"// Watch: metadata 👀","name":"// Watch: metadata 👀","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/213","createdAt":"2021-04-29T14:31:31Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzQzODM2","body":"Script Kit now supports `// Watch:` metadata\r\n\r\n```js\r\n// Watch: ~/projects/thoughts/**/*.md\r\n\r\nlet { say } = await kit(\"speech\")\r\n\r\nsay(\"journal updated\")\r\n```\r\n\r\n* `// Watch: ` supports any file name, glob, or array (Kit will `JSON.parse` the array).\r\n* Scripts will run on the \"change\" event\r\n* Read more about supported [globbing](https://github.com/micromatch/picomatch#globbing-features)\r\n\r\n> Read about the [other metadata](https://github.com/johnlindquist/kit/discussions/185)\r\n\r\nI would _LOVE_ to hear about scenarios you would use this for or if you run into any issues 🙏","value":"https://github.com/johnlindquist/kit/discussions/213","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/5556114?u=0882c6d15ed47b6804d0eb6ed216d73828dd8c6f&v=4","user":"rvisharma","author":"Ravi Sharma","twitter":"life_of_rvi","discussion":"https://github.com/johnlindquist/kit/discussions/208","url":"https://github.com/johnlindquist/kit/discussions/208","title":"Decode JWT","name":"Decode JWT","extension":".md","description":"Created by rvisharma","resourcePath":"/johnlindquist/kit/discussions/208","createdAt":"2021-04-28T20:23:48Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"id":"MDEwOkRpc2N1c3Npb24zMzQyNjYy","body":"\r\n[Gist](https://gist.githubusercontent.com/rvisharma/13e86edfdef3094924a702f64645ade6/raw/aac968af82b34eb9cc530f2e9c1a6416fa8d49d5/jwt-decode.js) | [Install Decode JWT](https://scriptkit.app/api/new?name=jwt-decode&url=https://gist.githubusercontent.com/rvisharma/13e86edfdef3094924a702f64645ade6/raw/aac968af82b34eb9cc530f2e9c1a6416fa8d49d5/jwt-decode.js)\r\n\r\njwt.io is too slow to load for me. This is instant!\r\n\r\n- Extracts out the token from the entered string and then decodes it.\r\n- Provides live hint of entered string if contains valid token or not.\r\n\r\nhttps://user-images.githubusercontent.com/5556114/116467402-4071ff80-a88d-11eb-86b4-ad58771d7bd6.mov\r\n\r\n```js\r\n// Menu: Decode JWT\r\n// Description: Enter any string which contains valid jwt.\r\n// Author: Ravi Sharma\r\n// Twitter: @irvisharma\r\n\r\n/** @type typeof import(\"jsonwebtoken\") */\r\nconst jwt = await npm('jsonwebtoken');\r\n\r\ntry {\r\n  const dirtyEncodedToken = await arg('Paste token here', generateLiveHint);\r\n  const decoded = decodeToken(dirtyEncodedToken)\r\n\r\n  if (decoded === null) {\r\n    throw 'cannot parse, invalid token'\r\n  }\r\n\r\n  showOutput(decoded);\r\n  console.log(decoded);\r\n\r\n} catch (e) {\r\n  showError(e)\r\n}\r\n\r\nfunction decodeToken(dirtyEncodedToken){\r\n  try{\r\n    const extractedToken = dirtyEncodedToken.match(/[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*/)[0]\r\n    return jwt.decode(extractedToken);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function generateLiveHint(userInput){\r\n  const tokenValidHint = decodeToken(userInput) !== null ? '✅ Found valid token' : `❌ Could not parse <br><br> ${userInput}`;\r\n  return md(`\r\n  _Press enter after entering to token show details_\r\n  <br/><br/>\r\n  ${userInput && tokenValidHint}\r\n  `)\r\n}\r\n\r\nfunction showOutput(value) {\r\n  return show(`\r\n<pre style=\"font-family: Menlo; background: darkslategray; color: navajowhite; font-size: 1.2rem; padding: 1.5em;\">\r\n${JSON.stringify(value, null, 2)}\r\n</pre>\r\n`);\r\n}\r\n\r\nfunction showError(e){\r\n  show(`\r\n<h1 style=\"background: darkslategray; color: white; font-family: Menlo;\">Could not decode, Did you entered valid token? <br/><br/> ${e}</h1>\r\n`);\r\n}\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/208","img":"https://avatars.githubusercontent.com/u/5556114?u=0882c6d15ed47b6804d0eb6ed216d73828dd8c6f&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/150","url":"https://github.com/johnlindquist/kit/discussions/150","title":"beta.96 - Design, Drop, and Hotkeys! Oh my!","name":"beta.96 - Design, Drop, and Hotkeys! Oh my!","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/150","createdAt":"2021-04-16T20:32:44Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzI1MDcy","body":"\r\nhttps://user-images.githubusercontent.com/36073/115079813-fc5f2200-9ebe-11eb-8e7c-74c8a1d2aee3.mp4\r\n\r\nCan't wait to see what you build! Happy Scripting this weekend! 😇","value":"https://github.com/johnlindquist/kit/discussions/150","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/119","url":"https://github.com/johnlindquist/kit/discussions/119","title":"*New* Choice Preview","name":"*New* Choice Preview","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/119","createdAt":"2021-04-09T21:43:36Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzE0MTM5","body":"\r\nhttps://user-images.githubusercontent.com/36073/114220248-fc907800-9928-11eb-8096-61a5debbdc0d.mp4\r\n\r\n\r\n[Install google-image-search](https://scriptkit.app/api/new?name=google-image-search&url=https://gist.githubusercontent.com/johnlindquist/99756d4e1a54c737dc534c4edb5f6c9d/raw/55c440503a8a653c3ef3dafb9ba1bd567fc0b14a/google-image-search.js)\r\n\r\n```js\r\n// Menu: Google Image Search\r\n// Description: Searches Google Images\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet gis = await npm(\"g-i-s\")\r\n\r\nlet selectedImageUrl = await arg(\r\n  \"Image search:\",\r\n  async input => {\r\n    if (input.length < 3) return []\r\n\r\n    let searchResults = await new Promise(res => {\r\n      gis(input, (_, results) => {\r\n        res(results)\r\n      })\r\n    })\r\n\r\n    return searchResults.map(({ url }) => {\r\n      return {\r\n        name: url.split(\"/\").pop().replace(/\\?.*/g, \"\"),\r\n        value: url,\r\n        preview: `<img src=\"${url}\" />`,\r\n      }\r\n    })\r\n  }\r\n)\r\n\r\ncopy(selectedImageUrl)\r\n\r\n```\r\n\r\n\r\n\r\n[Install giphy-search](https://scriptkit.app/api/new?name=giphy-search&url=https://gist.githubusercontent.com/johnlindquist/dc17a3f07fb41b855e742a0f995cb0ed/raw/109831f9d40a8293b7d8741b44081fddcb024cda/giphy-search.js)\r\n\r\n```js\r\n// Menu: Giphy\r\n// Description: Search giphy. Paste markdown link.\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\nlet download = await npm(\"image-downloader\")\r\nlet queryString = await npm(\"query-string\")\r\nlet { setSelectedText } = await kit(\"text\")\r\n\r\nif (!env.GIPHY_API_KEY) {\r\n  show(\r\n    `<div class=\"p-4\">\r\n      <div>\r\n        Grab an API Key from the Giphy dev dashboard:\r\n      </div>\r\n      <a href=\"https://developers.giphy.com/dashboard/\">Here</a>\r\n    </div>`\r\n  )\r\n}\r\nlet GIPHY_API_KEY = await env(\"GIPHY_API_KEY\")\r\n\r\nlet search = q =>\r\n  `https://api.giphy.com/v1/gifs/search?api_key=${GIPHY_API_KEY}&q=${q}&limit=10&offset=0&rating=g&lang=en`\r\n\r\nlet { input, url } = await arg(\r\n  \"Search giphy:\",\r\n  async input => {\r\n    if (!input) return []\r\n    let query = search(input)\r\n    let { data } = await get(query)\r\n\r\n    return data.data.map(gif => {\r\n      return {\r\n        name: gif.title.trim() || gif.slug,\r\n        value: {\r\n          input,\r\n          url: gif.images.downsized_medium.url,\r\n        },\r\n        preview: `<img src=\"${gif.images.downsized_medium.url}\" alt=\"\">`,\r\n      }\r\n    })\r\n  }\r\n)\r\n\r\nlet formattedLink = await arg(\"Format to paste\", [\r\n  {\r\n    name: \"URL Only\",\r\n    value: url,\r\n  },\r\n  {\r\n    name: \"Markdown Image Link\",\r\n    value: `![${input}](${url})`,\r\n  },\r\n  {\r\n    name: \"HTML <img>\",\r\n    value: `<img src=\"${url}\" alt=\"${input}\">`,\r\n  },\r\n])\r\n\r\nsetSelectedText(formattedLink)\r\n\r\n```\r\n","value":"https://github.com/johnlindquist/kit/discussions/119","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"},{"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/112","url":"https://github.com/johnlindquist/kit/discussions/112","title":"Types are here!","name":"Types are here!","extension":".md","description":"Created by johnlindquist","resourcePath":"/johnlindquist/kit/discussions/112","createdAt":"2021-04-03T18:08:24Z","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"id":"MDEwOkRpc2N1c3Npb24zMzA1MzEx","body":"Update (1.1.0-beta.86) adds a [`~/.kit/kit.d.ts`](https://github.com/johnlindquist/kit/blob/main/kit.d.ts) to allow better code hinting and completion.\r\n\r\n❗️After updating, you will need to manually \"link\" your `~/.kenv` to your `~/.kit` for the benefits (This will happen automatically for new users during install)\r\n\r\nMethod 1 - Install and run this script\r\n\r\n[Click to install link-kit](https://scriptkit.app/api/new?name=link-kit&url=https://gist.githubusercontent.com/johnlindquist/f238cb1b3a3ed97890657ccf154d12b1/raw/a488a8b6c331d527bb0433a6b8df9428263b85a0/link-kit.js)\r\n\r\n```js\r\nawait cli(\"install\", \"~/.kit\")\r\n```\r\n\r\nMethod  2 - In your terminal\r\n```bash\r\nPATH=~/.kit/node/bin ~/.kit/node/bin/npm --prefix ~/.kenv i ~/.kit\r\n```\r\n\r\nNow your scripts in your `~/.kenv/scripts` should have completion/hinting for globals included in the \"preloaded\" scripts.\r\n\r\n> I still need to add types for the helpers that load scripts from dirs `kit()`, `cli()`, etc.\r\n\r\nPlease let me know how it goes and if you have any questions. Thanks!","value":"https://github.com/johnlindquist/kit/discussions/112","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4"}]
