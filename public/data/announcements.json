[
  {
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/457",
    "title": "TypeScript support! üöÄ",
    "command": "typescript-support",
    "content": "beta.62 brings with it a long-awaited, much-requested feature: TypeScript support!\r\n\r\n![CleanShot 2021-09-27 at 10 42 38](https://user-images.githubusercontent.com/36073/134951810-31754840-85c3-4ad3-a493-59c757fdda07.png)\r\n\r\n## TypeScript Support üöÄ\r\n\r\n### 1. But, how?\r\n\r\nEach time your run a TS script, Script Kit will compile the TS script using `esbuild` to a JS script in a `.scripts` dir (notice the \"dot\"). The compiled JS script is then imported from there. Using `.scripts` as a sibling dir will help avoid any `import`/path issues. You can also write TS \"library\" files in your `~/.kenv/lib` dir and import them into your script just fine.\r\n\r\nIf you're experienced with `esbuild` and curious about the settings, they look like this:\r\n\r\n```js\r\nlet { build } = await import(\"esbuild\")\r\n\r\nawait build({\r\n  entryPoints: [scriptPath],\r\n  outfile,\r\n  bundle: true,\r\n  platform: \"node\",\r\n  format: \"esm\",\r\n  external: [\"@johnlindquist/kit\"],\r\n})\r\n```\r\n\r\nThis also opens the door to exporting/building/bundling scripts and libs as individual shippable tools which I'll investigate more in the future.\r\n\r\n### 2. Can I still run my JS scripts if I switch to TS?\r\n\r\nYes! Both your TS and JS scripts will show up in the UI.\r\n\r\n### 3. Why the `import \"@johnlindquist/kit\"`?\r\n\r\nWhen you create a new TS script, the generated script will start with the line: `import \"@johnlindquist/kit\"`\r\n\r\nThis is mostly to make your editor stop complaining by forcing it to load the type definition files and forcing it to treat the file as an \"es module\" so support \"top-level `await`\". It's not technically required since it's not technically importing anything, but your editor will certainly complain very loudly if you leave it out.\r\n\r\n### 4. Where is the setting stored?\r\n\r\nLook in your `~/.kenv/.env` for `KIT_MODE=ts`.\r\n\r\n## fs-extra's added to global\r\n\r\nThe [fs-extra methods](https://www.npmjs.com/package/fs-extra#methods) are now added on the global space. I found myself using `outputFile`, `write/readJson`, etc too often and found them to be a great addition. The only one missing is `copy` since we're already using that to \"copy to clipboard\". You can bring it in with the normal import/alias process if needed, e.g., `let {copy:fsCopy} = await import(\"fs-extra\")`\r\n\r\n## Sync Path\r\n\r\n![CleanShot 2021-09-27 at 11 10 26](https://user-images.githubusercontent.com/36073/134954703-7c9d779f-268a-4f8b-973a-59ac71eebaf0.png)\r\n\r\nYou may notice running scripts from the Script Kit app that some commands you can run in your terminal might be missing, like \"yarn\", etc.\r\n\r\nRun the following command in your terminal to copy the $PATH var from your terminal to your `~/.kenv/.env`. This will help \"sync\" up which commands are available between your terminal and running scripts from the app.\r\n\r\n```bash\r\n~/.kit/bin/kit sync-path\r\n```\r\n",
    "extension": ".md"
  },
  {
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/442",
    "title": "Scripts in GitHub actions (preview)",
    "command": "scripts-in-github-actions-preview",
    "content": "## tl;dr Here's an example repo\r\n\r\nThe example script creates a release, downloads an image, and uploads it to the release.\r\n\r\nhttps://github.com/johnlindquist/kit-action-example\r\n\r\n## Template Repo\r\n\r\nThis page has a \"one-click\" clone so you can add/play with your own script.\r\n\r\nhttps://github.com/johnlindquist/kit-action-template\r\n\r\n## What is it?\r\n\r\nUse any of your scripts in a GitHub action. `use` the `kit-action` and point it to a scripts in your `scripts` dir:\r\n\r\n```yml\r\nname: \"example\"\r\non:\r\n  workflow_dispatch:\r\n  pull_request:\r\n  push:\r\n    branches:\r\n      - main\r\n\r\njobs:\r\n  example:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Script Kit\r\n        uses: johnlindquist/kit-action@main\r\n        with:\r\n          script: \"example-script\" # The name of a script in your ./scripts dir\r\n```\r\n\r\n## Add env vars:\r\n\r\nYou most likely add [\"secrets\" to GitHub actions](https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-an-environment), so you'll want to pass them to your scripts as environment variables:\r\n\r\n```yml\r\njobs:\r\n  example:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Script Kit\r\n        uses: johnlindquist/kit-action@main\r\n        with:\r\n          script: \"example-script\"\r\n        env:\r\n          REPO_TOKEN: \"${{ secrets.REPO_TOKEN }}\" # load in your script with await env(\"REPO_TOKEN\")\r\n```\r\n\r\n## Works with your existing repos\r\n\r\nFeel free to add this action and a `scripts` dir to your existing repos. It automatically loads in your repo so you can parse `package.json`, compress assets, or whatever it is you're looking to add to your CI.\r\n\r\n## What does \"preview\" mean?\r\n\r\nEverything is working, but it's pointing to the \"main\" branch rather than a tagged version. Once I get some feedback, I'll tag a \"1.0\" version so you can `uses: @johlindquist/kit-action@v1`\r\n\r\n## Please ask for help! üòá\r\n\r\nI'd ‚ù§Ô∏è to help you script something for a github action! Please let me know whatever I can do to help.",
    "extension": ".md"
  },
  {
    "menu": "Drag demo",
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/405",
    "title": "beta.55 Improved Search, Drag, and Happiness üòä",
    "command": "beta55-improved-search-drag-and-happiness",
    "content": "## Search Improvements\r\n\r\nbeta.55 has a vastly improved search:\r\n\r\nSearch descriptions üéâ\r\n\r\n![CleanShot 2021-08-20 at 13 37 44](https://user-images.githubusercontent.com/36073/130285547-24f111d7-a706-4be2-b0d6-b425afbe6683.png)\r\n\r\nSearch shortcuts\r\n\r\n![CleanShot 2021-08-20 at 13 51 49](https://user-images.githubusercontent.com/36073/130286634-4797c029-c2ed-4071-9e1d-285d6bf1a15f.png)\r\n\r\nSearch by kenv\r\n\r\n![CleanShot 2021-08-20 at 13 51 18](https://user-images.githubusercontent.com/36073/130286567-4fd0a155-43a7-4af5-bd3f-c0a9db9ae8dc.png)\r\n\r\nSear by \"command-name\" (if you can't think of // Menu: name)\r\n\r\n![CleanShot 2021-08-20 at 13 54 45](https://user-images.githubusercontent.com/36073/130286878-62b2a139-b3b7-4c34-904f-40d7b03a7e1c.png)\r\n\r\nSorts by \"score\" (rather than alphabetically)\r\n\r\n## Drag\r\n\r\nChoices can now take a `drag` property. This will make list items \"draggable\" and allow you to drag/drop to copy files from your machine (or even from URLs!) into any app. When using remote URLs, their will be a bit of \"delay\" while the file downloads (depending on the file size) between \"drag start\" and \"drop enabled\", so just be aware. I'll add some sort of download progress indicator sometime in the future, just not high priority üòÖ\r\n\r\n```js\r\n// Menu: Drag demo\r\n\r\nawait arg(\r\n  {\r\n    placeholder: \"Drag something from below\",\r\n    ignoreBlur: true,\r\n  },\r\n  [\r\n    {\r\n      name: \"Heart Eyes (local)\",\r\n      drag: \"/Users/johnlindquist/Downloads/john-hearts@2x.png\",\r\n      img: \"/Users/johnlindquist/Downloads/john-hearts@2x.png\",\r\n    },\r\n    {\r\n      name: \"React logo svg (wikipedia)\",\r\n      drag: \"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\",\r\n      img: \"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\",\r\n    },\r\n  ]\r\n)\r\n```\r\n\r\n![CleanShot 2021-08-20 at 15 26 07](https://user-images.githubusercontent.com/36073/130294979-c45aabe2-6c30-41ad-94b4-64a85a2c34eb.gif)\r\n\r\nYou can use the `drag` object syntax to define a `format` and `data`\r\n\r\n> `text/html`: Renders the HTML payload in contentEditable elements and rich text (WYSIWYG) editors like Google Docs, Microsoft Word, and others.\r\n> `text/plain`: Sets the value of input elements, content of code editors, and the fallback from text/html.\r\n> `text/uri-list`: Navigates to the URL when dropping on the URL bar or browser page. A URL shortcut will be created when dropping on a directory or the desktop.\r\n\r\n```js\r\n// Menu: Drag demo\r\n\r\nawait arg(\r\n  {\r\n    placeholder: \"Drag something from below\",\r\n    ignoreBlur: true,\r\n  },\r\n  [\r\n    {\r\n      name: \"Padding 4\",\r\n      drag: {\r\n        format: \"text/plain\",\r\n        data: `className=\"p-4\"`,\r\n      },\r\n    },\r\n    {\r\n      name: \"I love code\",\r\n      drag: {\r\n        format: \"text/html\",\r\n        data: `<span style=\"background-color:yellow;font-family:Roboto Mono\">I ‚ù§Ô∏è code</span>`,\r\n      },\r\n    },\r\n  ]\r\n)\r\n```\r\n\r\n![CleanShot 2021-08-20 at 15 48 00](https://user-images.githubusercontent.com/36073/130296713-6249d5c2-c01f-42d1-b2c2-ea86d2e4c29b.gif)\r\n\r\n## Happiness\r\n\r\nI'm _very_ happy with the state of Script Kit. When I started almost a year ago, I had no idea I could push the concept of creating/sharing/managing custom scripts so far. I think it looks great, feels speedy, and is flexible enough to handle so, so many scenarios.\r\n\r\nWith everything in place, next week I'm starting on creating lessons, demos, and docs. It's time to show you what Script Kit can really do üòâ \r\n\r\nP.S. - Thanks for all the beta-testing and feedback. It's been tremendously helpful!\r\n",
    "extension": ".md"
  },
  {
    "menu": "Notify Demo",
    "hit \"enter\" to continue, escape to exit\r\nawait div(`<img src=\"https": "//placekitten.com/320\"/>`)",
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/397",
    "title": "beta.46 Design, ‚öê Flags, div, fixed notify",
    "command": "beta46-design-flags-div-fixed-notify",
    "content": "## Design/theme\r\n\r\nPut a lot of work into tightening up pixels and made progress towards custom themes:\r\n\r\n![CleanShot 2021-08-13 at 09 35 40](https://user-images.githubusercontent.com/36073/129383567-ae628c68-3c96-463f-a47e-4800186ea7ac.png)\r\n\r\nHere's a silly demo of me playing with theme generation:\r\n\r\nhttps://user-images.githubusercontent.com/36073/129384214-2af744ab-8165-4e3f-825d-42fadbf86aec.mp4\r\n\r\n## Flags ‚öê\r\n\r\nAn astute observer would notice that the `Edit` and `Share` tabs are now gone. They've been consolidated into a \"flag menu\".\r\n\r\nWhen you press the `right` key from the main menu of script, the flag menu now opens up. This shows the selected script and gives you some options. It also exposes the keyboard shortcuts associated with those options that you can use to :\r\n\r\n![CleanShot 2021-08-13 at 09 42 52](https://user-images.githubusercontent.com/36073/129384559-bff59ebf-88d9-4b95-b9b5-640ce755fe8f.png)\r\n\r\nI've found I use `cmd+o` and `cmd+n` all the time to tweak scripts of quickly create a new one to play around with.\r\n\r\n### Custom Flags\r\n\r\nYou can pass your own custom flags like so:\r\n\r\n[Install flags-demo](https://scriptkit.com/api/new?name=flags-demo&url=https://gist.githubusercontent.com/johnlindquist/b96c8f8de9c256f909ae0f6ab0adda39/raw/9f049cf454f0766fb278e5ee7a24c6b6776df889/flags-demo.js)\r\n\r\n```js\r\n//Menu: Flags demo\r\n\r\nlet urls = [\r\n  \"https://scriptkit.com\",\r\n  \"https://egghead.io\",\r\n  \"https://johnlindquist.com\",\r\n]\r\n\r\nlet flags = {\r\n  open: {\r\n    name: \"Open\",\r\n    shortcut: \"cmd+o\",\r\n  },\r\n  copy: {\r\n    name: \"Copy\",\r\n    shortcut: \"cmd+c\",\r\n  },\r\n}\r\n\r\nlet url = await arg(\r\n  { placeholder: `Press 'right' to see menu`, flags },\r\n  urls\r\n)\r\n\r\nif (flag?.open) {\r\n  $`open ${url}`\r\n} else if (flag?.copy) {\r\n  copy(url)\r\n} else {\r\n  console.log(url)\r\n}\r\n```\r\n\r\nNotice that `flag` is a global while `flags` is an object you pass to `arg`. This is to help keep it consistent with terminal usage:\r\n\r\nFrom the terminal\r\n```bash\r\nflags-demo --open\r\n```\r\n\r\nWill set the global `flag.open` to `true`\r\n\r\n![CleanShot 2021-08-13 at 10 08 30](https://user-images.githubusercontent.com/36073/129388037-3f27a12d-9e44-4402-a51f-bac39eead54d.png)\r\n\r\n\r\nYou could also run this and pass in all the args:\r\n\r\n```bash\r\nflags-demo https://egghead.io --copy\r\n```\r\n\r\nIn the app, you could create a second script to pass flags to the first with. This is required if you need to pass multiple flags since the `arg` helper can only \"submit\" one per `arg`.\r\n\r\n```js\r\nawait run(`flags-demo https://egghead.io --copy`)\r\n```\r\n\r\nI'll put together some more demos soon. There are plenty of existing CLI tools out there using flags heavily, so lots of inspiration to pull from.\r\n\r\n## `await div()`\r\n\r\nThere's a new `div` \"component\". You can pass in arbitrary HTML. This works well with the `md()` helper which generates `html` from markdown.\r\n\r\n[Install div-demo](https://scriptkit.com/api/new?name=div-demo&url=https://gist.githubusercontent.com/johnlindquist/0ad790953f7101d313abfd48182356b0/raw/c70e17649317986707d2ac714c31afe6f7850015/div-demo.js)\r\n\r\n```js\r\n// Menu: Div Demo\r\n\r\n// Hit \"enter\" to continue, escape to exit\r\nawait div(`<img src=\"https://placekitten.com/320\"/>`)\r\n\r\nawait div(\r\n  md(\r\n    `\r\n    # Some header\r\n\r\n    ## You guessed it, an h2\r\n\r\n    * I\r\n    * love\r\n    * lists\r\n    `\r\n  )\r\n)\r\n\r\n```\r\n\r\n## Fixed `notify`\r\n\r\n`notify` is now fixed so that it doesn't open a prompt\r\n\r\nThe most basic usage is:\r\n\r\n```js\r\nnotify(\"Hello world\")\r\n```\r\n\r\n`notify` leverages [https://www.npmjs.com/package/node-notifier](https://www.npmjs.com/package/node-notifier)\r\n\r\nSo the entire API should be available. Here's an example of using the \"type inside a notification\":\r\n\r\n[Install notify-demo](https://scriptkit.com/api/new?name=notify-demo&url=https://gist.githubusercontent.com/johnlindquist/44387dc5b0c170e4146b061162c33532/raw/1bce77fb778a45cf9052a63d02dcab94a9cf7ef0/notify-demo.js)\r\n\r\n```js\r\n// Menu: Notify Demo\r\nlet notifier = notify({\r\n  title: \"Notifications\",\r\n  message: \"Write a reply?\",\r\n  reply: true,\r\n})\r\n\r\nnotifier.on(\"replied\", async (obj, options, metadata) => {\r\n  await arg(metadata.activationValue)\r\n})\r\n\r\n```\r\n\r\n\r\n",
    "extension": ".md"
  },
  {
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/365",
    "title": "beta.33 `console.log` component, cmd+o to Open, `className`",
    "command": "beta33-consolelog-component-cmdo-to-open-classname",
    "content": "## `console.log` Component\r\n\r\nThe follow code will create the below prompt (üëÄ notice the black background logging component):\r\n```js\r\nlet { stdout } = await $`ls ~/projects | grep kit`\r\n\r\nawait arg(`Select a kit dir`, stdout.split(\"\\n\"))\r\n\r\n```\r\n<img width=\"402\" alt=\"CleanShot 2021-07-22 at 16 13 10@2x\" src=\"https://user-images.githubusercontent.com/36073/126716080-db8e1361-7972-488c-8873-2996a7c03064.png\">\r\n\r\n```js\r\nconsole.log(chalk`{green.bold The current date is:}`)\r\nconsole.log(new Date().toLocaleDateString())\r\nawait arg()\r\n```\r\n\r\n<img width=\"416\" alt=\"CleanShot 2021-07-22 at 16 12 24@2x\" src=\"https://user-images.githubusercontent.com/36073/126716010-b38c8d28-af68-4f1f-aefd-93de186a03d2.png\">\r\n\r\nThe log even persists between prompts:\r\n\r\n```js\r\nlet first = await arg(\"First name\")\r\nconsole.log(first)\r\nlet last = await arg(\"Last name\")\r\nconsole.log(`${first} ${last}`)\r\nlet age = await arg(\"Age\")\r\nconsole.log(`${first} ${last} ${age}`)\r\nlet emotion = await arg(\"Emotion\")\r\nconsole.log(`${first} ${last} ${age} ${emotion}`)\r\nawait arg()\r\n```\r\n<img width=\"415\" alt=\"CleanShot 2021-07-22 at 16 19 36@2x\" src=\"https://user-images.githubusercontent.com/36073/126716651-bb7b539a-2314-4d95-bcd9-5104c8d18ec5.png\">\r\n\r\nClick the \"edit\" icon to open the full log in your editor:\r\n![CleanShot 2021-07-22 at 16 20 57@2x](https://user-images.githubusercontent.com/36073/126716749-4eda367a-4e55-424f-915a-30207583cd3f.png)\r\n\r\n## cmd+o to Open\r\n\r\nFrom the main menu, hitting `cmd+o` will open:\r\n\r\n1. The currently selected script from the main menu\r\n2. The currently running script\r\n3.  Any \"choice\" that provides a \"filePath\" prop:\r\n\r\n```js\r\nawait arg(`cmd+o to open file`, [\r\n  {\r\n    name: \"Karabiner config\",\r\n    filePath: \"~/.dotfiles/karabiner/karabiner.edn\",\r\n  },\r\n  {\r\n    name: \"zshrc\",\r\n    filePath: \"~/.zshrc\",\r\n  },\r\n])\r\n```\r\n\r\nI've found this really useful when I want to tweak the running script, but I don't want to go back through the process of finding it.\r\n\r\n## Experimental `className`\r\n\r\nYou can pass `className` into the arg options to affect the container for the list items or panel. Most classes from Tailwind should be available. Feel free to play around with it and let me know how it goes üòá:\r\n\r\n```js\r\nawait arg(\r\n  {\r\n    className: \"p-4 bg-black font-mono text-xl text-white\",\r\n  },\r\n  `\r\n  <p>Working on Script Kit today</p>\r\n  <img src=\"https://i.imgflip.com/5hc0v4.jpg\" title=\"made at imgflip.com\"/>`\r\n)\r\n\r\n```\r\n\r\n<img width=\"428\" alt=\"CleanShot 2021-07-22 at 16 38 40@2x\" src=\"https://user-images.githubusercontent.com/36073/126717978-2bf8d0e4-24a4-47ad-948a-97fde38a83e0.png\">\r\n\r\n\r\n```js\r\nawait arg(\r\n  {\r\n    className: \"p-4 bg-black font-mono text-xl text-white\",\r\n  },\r\n  [\"Eat\", \"more\", \"tacos üåÆ\"]\r\n)\r\n```\r\n\r\n<img width=\"420\" alt=\"CleanShot 2021-07-22 at 16 41 19@2x\" src=\"https://user-images.githubusercontent.com/36073/126718146-c3c94b10-0e5a-4e9d-8bab-a6b7c3b6f1d3.png\">\r\n\r\n",
    "extension": ".md"
  },
  {
    "image": "logo.png",
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/353",
    "title": "beta.29 M1 build, install remote kenvs, polish, upcoming lessons",
    "command": "beta29-m1-build-install-remote-kenvs-polish-upcoming-lessons",
    "content": "I'm starting on lessons/docs on Monday. If you have anything specific you want me to cover, please reply below!\r\n\r\n## M1 Build\r\n If you're on an M1 mac, you can download the new M1 build from https://www.scriptkit.com/\r\n\r\n1. Download https://www.scriptkit.com/\r\n2. Quit Kit. *note - typing `kit quit` or `k q` in the app is the fastest way to quit.\r\n3. Drag/drop to overwrite your previous build\r\n4. Kit should now auto-update from the M1 channel\r\n5. Open Kit\r\n\r\n## Kenv Management\r\nThere are a lot of tools to help manage other kenvs. They're in the `Kit` menu and once you've installed a remote kenv (which is really just a git repo with a scripts dir), then more options show up in the `Edit` menu to move scripts between kenvs, etc. I'll cover this in detail in the docs/lessons\r\n\r\n## Polish\r\nLots of UI work:\r\n* Remembering position - Each script with a `//Shortcut` will remember its last individual prompt position. For example, if you have a script that uses `textarea`, then drag it to the upper right, the next time you launch that script, it will launch in that position.\r\n* `//Image` metadata - Scripts can now have images:\r\n```js\r\n//Image: https://placekitten.com/64\r\n```\r\nor\r\n```js\r\n//Image: logo.png\r\n```\r\nwill load from `~/.kenv/assets/logo.png`\r\n\r\n\r\n* Spinner - added a spinner for when you submit a prompt and the process needs to do some work before opening the next prompt\r\n\r\n![CleanShot 2021-07-16 at 12 22 58](https://user-images.githubusercontent.com/36073/125992326-7b6f0034-00e8-41df-9ca7-f0e33becf0b2.gif)\r\n\r\n\r\n* Resizing - *Lots* of work on getting window resizing behavior consistent between different UIs. This was a huge pain, but you'll probably never appreciate it üòÖ\r\n* Lots more - many more small things\r\n\r\n## Lessons!\r\n\r\nI'm starting to work on lessons next week and getting back into streaming schedule. I would ‚ô•Ô∏è to hear any specific questions or lessons you would like to see to help you remove some friction from your day. I'll be posting the lessons over on [egghead.io](egghead.io) for your viewing pleasure. Please ask questions in the replies!\r\n\r\n",
    "extension": ".md"
  },
  {
    "defaults to markdown\r\nlet value = await editor()\r\n```\r\n\r\n> ‚ö†Ô∏è API is subject to change!\r\n```js\r\nlet value = await editor(\"markdown\", `\r\n## Preloaded content\r\n\r\n* nice\r\n`)\r\n```\r\n\r\n```js\r\nlet value = await editor(\"javascript\", `\r\nconsole.log(\"Support other languages\")\r\n`)\r\n```\r\n\r\n### A note on paid features\r\n\r\nEverything you've used so far in the Script Kit app will stay free. The core `kit` is open-source MIT. \r\n\r\nThe paid features will be add-ons to the core experience": "Themes, Editor, Widgets, Screenshots, Record Audio, and many more fun ideas. These will roll out experimentally in the free version first then move exclusively to the paid version. Expect the paid versions later this year.",
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/330",
    "title": "Beta.20 MOAR SPEED! ‚ö°Ô∏è",
    "command": "beta20-moar-speed",
    "content": "## Process Pools and Virtualized Lists\r\n\r\nhttps://user-images.githubusercontent.com/36073/123519955-7fdd8200-d66b-11eb-8167-09b9daed1c9f.mp4\r\n\r\n\r\n## Experimental `textarea`\r\n\r\nFeel free to play around with the `textarea` for multiline input.\r\n\r\n```js\r\nlet value = await textarea()\r\n```\r\n\r\nThe API of textarea will change (it currently just sets the placeholder), but it will always return the string value of the textarea, so there won't be any breaking changes if you just keep the default behavior. `cmd+s` submits. `cmd+w` cancels.\r\n\r\n## Experimental `editor` (this will become a _paid_  üíµ feature later this year)\r\n\r\nAs an upgrade to `textarea`, `await editor()` will give you a full editor experience. Same as the textarea, the API will also change, but will always return a string of the content.\r\n\r\n\r\n```js\r\n// Defaults to markdown\r\nlet value = await editor()\r\n```\r\n\r\n> ‚ö†Ô∏è API is subject to change!\r\n```js\r\nlet value = await editor(\"markdown\", `\r\n## Preloaded content\r\n\r\n* nice\r\n`)\r\n```\r\n\r\n```js\r\nlet value = await editor(\"javascript\", `\r\nconsole.log(\"Support other languages\")\r\n`)\r\n```\r\n\r\n### A note on paid features\r\n\r\nEverything you've used so far in the Script Kit app will stay free. The core `kit` is open-source MIT. \r\n\r\nThe paid features will be add-ons to the core experience: Themes, Editor, Widgets, Screenshots, Record Audio, and many more fun ideas. These will roll out experimentally in the free version first then move exclusively to the paid version. Expect the paid versions later this year.\r\n",
    "extension": ".md"
  },
  {
    "shortcut": "option 5",
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/312",
    "title": "Beta.19 New Features - Gotta go fast! üèéüí®",
    "command": "beta19-new-features-gotta-go-fast",
    "content": "Beta.19 is all about _speed_! I've finally landed on an approach I love to get the prompt moving waaaay faster.\r\n\r\nCouple videos below:\r\n\r\n## Instant Prompts\r\n\r\nhttps://user-images.githubusercontent.com/36073/121084054-6d270a00-c79d-11eb-8b37-96473de7e0e4.mp4\r\n\r\n```js\r\n// Shortcut: option 5\r\n\r\nlet { items } = await db(async () => {\r\n  let response = await get(\r\n    `https://api.github.com/users/johnlindquist/repos`\r\n  )\r\n\r\n  return response.data\r\n})\r\n\r\nawait arg(\"Select repo\", items)\r\n\r\n```\r\n\r\n## Instant Tabs\r\n\r\nhttps://user-images.githubusercontent.com/36073/121084134-85972480-c79d-11eb-9e18-94e5a2efa5d1.mp4\r\n\r\n## Instant Main Menu\r\n\r\nThe main menu now also leverages the concepts behind Instant Prompts listed above.\r\n\r\n## Faster in the future\r\n\r\nThese conventions laid the groundwork for caching prompt data, but I still have plenty ideas to speed things, especially around how the app launches the process. I'm looking forward to making this even faster for you!\r\n\r\nI'm also starting the work on an \"Instant Textarea\" because I know popping open a little textarea to take/save notes/ideas is something many people would use. üìù\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "extension": ".md"
  },
  {
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/305",
    "title": "How to Get Your Scripts Featured on ScriptKit.com üòé",
    "command": "how-to-get-your-scripts-featured-on-scriptkitcom",
    "content": "TL;DR\r\n\r\n- Help -> Create kenv\r\n- Git init new kenv, push to github\r\n- Reply, dm, contact me somehow with the repo üòá\r\n\r\nHere's a video walking you through it:\r\n\r\nhttps://user-images.githubusercontent.com/36073/120856653-6732ee00-c53d-11eb-9dfb-04907b036361.mp4\r\n\r\n",
    "extension": ".md"
  },
  {
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/304",
    "title": "Beta.18 Changes/Features (`db` has a breaking change)",
    "command": "beta18-changesfeatures-db-has-a-breaking-change",
    "content": "## ‚ö†Ô∏èBreaking: New `db` helper\r\n\r\n[lowdb](https://github.com/typicode/lowdb) updated to 2.0, so I updated the `db` helper to support it.\r\n\r\n* access/mutate the objects in the db directly. Then `.write()` to save your changes to the file.\r\n* `await db()` and `await myDb.write()`\r\n\r\nExample with a simple object:\r\n```js\r\nlet shoppingListDb = await db(\"shopping-list\", {\r\n  list: [\"apples\", \"bananas\"],\r\n})\r\n\r\nlet item = await arg(\"Add to list\")\r\nshoppingListDb.list.push(item)\r\nawait shoppingListDb.write()\r\n\r\nawait arg(\"Shopping list\", shoppingListDb.list)\r\n```\r\n\r\n\r\nYou can also use an `async` function to store the initial data:\r\n```js\r\nlet reposDb = await db(\"repos\", async () => {\r\n  let response = await get(\r\n    \"https://api.github.com/users/johnlindquist/repos\"\r\n  )\r\n\r\n  return {\r\n    repos: response.data,\r\n  }\r\n})\r\n\r\nawait arg(\"Select repo\", reposDb.repos)\r\n```\r\n\r\n## Text Area prompt\r\n\r\n```js\r\nlet text = await textarea()\r\n\r\ninspect(text)\r\n```\r\n![CleanShot 2021-06-04 at 14 25 12](https://user-images.githubusercontent.com/36073/120858988-cf370380-c540-11eb-8b79-5483ec090dd8.gif)\r\n\r\n\r\n## Optional `value`\r\n\r\n`arg` choice objects used to require a `value`. Now if you don't provide a value, it will simply return the entire object:\r\n\r\n```js\r\nlet person = await arg(\"Select\", [\r\n  { name: \"John\", location: \"Chair\" },\r\n  { name: \"Mindy\", location: \"Couch\" },\r\n])\r\n\r\nawait arg(person.location)\r\n```\r\n\r\n## ‚öóÔ∏è Experimental \"Multiple kenvs\"\r\n\r\nThere was a _ton_ üèãÔ∏è‚Äç‚ôÄÔ∏è of internal work over the past couple weeks to get this working. The \"big idea\" is supporting multiple kit environments. For example:\r\n\r\n* private/personal kenv\r\n* shared kenv\r\n* company kenv\r\n* product kenv\r\n\r\n### Future plans\r\nIn an upcoming release: \r\n* you'll be able to \"click to install kenv from repo\" (just like we do with individual scripts)\r\n* update a git-controlled kenv (like a company kenv)\r\n* the main prompt will be able to search for all scripts across kenvs. \r\n* If multiple kenvs exist, creating a new script will ask you which kenv to create it in.\r\n\r\nFor now, you can try adding/creating/switching the help menu. It should all work fine, but will be _waaaay_ cooler in the future üòé\r\n\r\n![CleanShot 2021-06-04 at 11 50 32](https://user-images.githubusercontent.com/36073/120843227-16b29500-c52b-11eb-974c-a81c260b9ae2.png)\r\n\r\n## Improved Error Prompt\r\n\r\nNow when an error occurs, it takes the error data, shuts down the script, then prompts you on what to do. For example, trying to use the old `db` would result in this:\r\n\r\n![CleanShot 2021-06-04 at 12 03 04](https://user-images.githubusercontent.com/36073/120844575-d6541680-c52c-11eb-8d12-c7c3117e132e.png)\r\n\r\n## Improved Tab Switching\r\nSwitching tabs will now cancel the previous tabs' script. Previously, if you quickly switched tabs on the main menu, the \"Hot\" tab results might show up in a different tab because the loaded _after_ the tab switched. The internals around message passing between the script and the app now have a cancellation mechanism so you only get the latest result that matches the prompt/tab. (This was also a ton of internals refactoring work üòÖ)\r\n\r\n\r\n",
    "extension": ".md"
  },
  {
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/282",
    "title": "‚ú®NEW FEATURES‚ú® beta.17",
    "command": "new-features-beta17",
    "content": "New features are separated into the comments below:\r\n\r\n",
    "extension": ".md"
  },
  {
    "background": "auto",
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/245",
    "title": "‚ú® NEW ‚ú® // Background: true",
    "command": "new-background-true",
    "content": "`beta.12` brings in the ability to start/stop background tasks.\r\n\r\n\r\nUsing `// Background :true` at the top of your script will change the behavior in the main menu:\r\n```js\r\n// Background: true\r\n\r\nsetInterval(() => {}, 1000) //Some long-running process\r\n```\r\n\r\n<img width=\"702\" alt=\"Screen Shot 2021-05-06 at 1 30 53 PM\" src=\"https://user-images.githubusercontent.com/36073/117355039-4b212b80-ae6f-11eb-952e-4ee28c65ded4.png\">\r\n\r\n<img width=\"681\" alt=\"Screen Shot 2021-05-06 at 1 31 13 PM\" src=\"https://user-images.githubusercontent.com/36073/117355094-5b390b00-ae6f-11eb-817a-86be66cabe18.png\">\r\n\r\n\r\n<img width=\"679\" alt=\"Screen Shot 2021-05-06 at 1 33 02 PM\" src=\"https://user-images.githubusercontent.com/36073/117355276-9a675c00-ae6f-11eb-82b4-fa069e53b143.png\">\r\n\r\n\r\n## Auto (like nodemon)\r\n```js\r\n// Background: auto\r\n\r\nsetInterval(() => {}, 1000) //Some long-running process\r\n```\r\n\r\nUsing `auto`, after you start the script, editing will stop/restart the script.\r\n",
    "extension": ".md"
  },
  {
    "watch": "~/projects/thoughts/**/*.md",
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/213",
    "title": "// Watch: metadata üëÄ",
    "command": "watch-metadata",
    "content": "Script Kit now supports `// Watch:` metadata\r\n\r\n```js\r\n// Watch: ~/projects/thoughts/**/*.md\r\n\r\nlet { say } = await kit(\"speech\")\r\n\r\nsay(\"journal updated\")\r\n```\r\n\r\n* `// Watch: ` supports any file name, glob, or array (Kit will `JSON.parse` the array).\r\n* Scripts will run on the \"change\" event\r\n* Read more about supported [globbing](https://github.com/micromatch/picomatch#globbing-features)\r\n\r\n> Read about the [other metadata](https://github.com/johnlindquist/kit/discussions/185)\r\n\r\nI would _LOVE_ to hear about scenarios you would use this for or if you run into any issues üôè",
    "extension": ".md"
  },
  {
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/150",
    "title": "beta.96 - Design, Drop, and Hotkeys! Oh my!",
    "command": "beta96-design-drop-and-hotkeys-oh-my",
    "content": "\r\nhttps://user-images.githubusercontent.com/36073/115079813-fc5f2200-9ebe-11eb-8e7c-74c8a1d2aee3.mp4\r\n\r\nCan't wait to see what you build! Happy Scripting this weekend! üòá",
    "extension": ".md"
  },
  {
    "menu": "Giphy",
    "description": "Search giphy. Paste markdown link.",
    "author": "John Lindquist",
    "twitter": null,
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "url": "https://github.com/johnlindquist/kit/discussions/119",
    "title": "*New* Choice Preview",
    "command": "new-choice-preview",
    "content": "\r\nhttps://user-images.githubusercontent.com/36073/114220248-fc907800-9928-11eb-8096-61a5debbdc0d.mp4\r\n\r\n\r\n[Install google-image-search](https://scriptkit.app/api/new?name=google-image-search&url=https://gist.githubusercontent.com/johnlindquist/99756d4e1a54c737dc534c4edb5f6c9d/raw/55c440503a8a653c3ef3dafb9ba1bd567fc0b14a/google-image-search.js)\r\n\r\n```js\r\n// Menu: Google Image Search\r\n// Description: Searches Google Images\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet gis = await npm(\"g-i-s\")\r\n\r\nlet selectedImageUrl = await arg(\r\n  \"Image search:\",\r\n  async input => {\r\n    if (input.length < 3) return []\r\n\r\n    let searchResults = await new Promise(res => {\r\n      gis(input, (_, results) => {\r\n        res(results)\r\n      })\r\n    })\r\n\r\n    return searchResults.map(({ url }) => {\r\n      return {\r\n        name: url.split(\"/\").pop().replace(/\\?.*/g, \"\"),\r\n        value: url,\r\n        preview: `<img src=\"${url}\" />`,\r\n      }\r\n    })\r\n  }\r\n)\r\n\r\ncopy(selectedImageUrl)\r\n\r\n```\r\n\r\n\r\n\r\n[Install giphy-search](https://scriptkit.app/api/new?name=giphy-search&url=https://gist.githubusercontent.com/johnlindquist/dc17a3f07fb41b855e742a0f995cb0ed/raw/109831f9d40a8293b7d8741b44081fddcb024cda/giphy-search.js)\r\n\r\n```js\r\n// Menu: Giphy\r\n// Description: Search giphy. Paste markdown link.\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\nlet download = await npm(\"image-downloader\")\r\nlet queryString = await npm(\"query-string\")\r\nlet { setSelectedText } = await kit(\"text\")\r\n\r\nif (!env.GIPHY_API_KEY) {\r\n  show(\r\n    `<div class=\"p-4\">\r\n      <div>\r\n        Grab an API Key from the Giphy dev dashboard:\r\n      </div>\r\n      <a href=\"https://developers.giphy.com/dashboard/\">Here</a>\r\n    </div>`\r\n  )\r\n}\r\nlet GIPHY_API_KEY = await env(\"GIPHY_API_KEY\")\r\n\r\nlet search = q =>\r\n  `https://api.giphy.com/v1/gifs/search?api_key=${GIPHY_API_KEY}&q=${q}&limit=10&offset=0&rating=g&lang=en`\r\n\r\nlet { input, url } = await arg(\r\n  \"Search giphy:\",\r\n  async input => {\r\n    if (!input) return []\r\n    let query = search(input)\r\n    let { data } = await get(query)\r\n\r\n    return data.data.map(gif => {\r\n      return {\r\n        name: gif.title.trim() || gif.slug,\r\n        value: {\r\n          input,\r\n          url: gif.images.downsized_medium.url,\r\n        },\r\n        preview: `<img src=\"${gif.images.downsized_medium.url}\" alt=\"\">`,\r\n      }\r\n    })\r\n  }\r\n)\r\n\r\nlet formattedLink = await arg(\"Format to paste\", [\r\n  {\r\n    name: \"URL Only\",\r\n    value: url,\r\n  },\r\n  {\r\n    name: \"Markdown Image Link\",\r\n    value: `![${input}](${url})`,\r\n  },\r\n  {\r\n    name: \"HTML <img>\",\r\n    value: `<img src=\"${url}\" alt=\"${input}\">`,\r\n  },\r\n])\r\n\r\nsetSelectedText(formattedLink)\r\n\r\n```\r\n",
    "extension": ".md"
  },
  {
    "avatar": "https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4",
    "user": "johnlindquist",
    "author": "John Lindquist",
    "twitter": null,
    "url": "https://github.com/johnlindquist/kit/discussions/112",
    "title": "Types are here!",
    "command": "types-are-here",
    "content": "Update (1.1.0-beta.86) adds a [`~/.kit/kit.d.ts`](https://github.com/johnlindquist/kit/blob/main/kit.d.ts) to allow better code hinting and completion.\r\n\r\n‚ùóÔ∏èAfter updating, you will need to manually \"link\" your `~/.kenv` to your `~/.kit` for the benefits (This will happen automatically for new users during install)\r\n\r\nMethod 1 - Install and run this script\r\n\r\n[Click to install link-kit](https://scriptkit.app/api/new?name=link-kit&url=https://gist.githubusercontent.com/johnlindquist/f238cb1b3a3ed97890657ccf154d12b1/raw/a488a8b6c331d527bb0433a6b8df9428263b85a0/link-kit.js)\r\n\r\n```js\r\nawait cli(\"install\", \"~/.kit\")\r\n```\r\n\r\nMethod  2 - In your terminal\r\n```bash\r\nPATH=~/.kit/node/bin ~/.kit/node/bin/npm --prefix ~/.kenv i ~/.kit\r\n```\r\n\r\nNow your scripts in your `~/.kenv/scripts` should have completion/hinting for globals included in the \"preloaded\" scripts.\r\n\r\n> I still need to add types for the helpers that load scripts from dirs `kit()`, `cli()`, etc.\r\n\r\nPlease let me know how it goes and if you have any questions. Thanks!",
    "extension": ".md"
  }
]
