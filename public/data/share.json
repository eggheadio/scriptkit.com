[{"name":"Midjourney Prompt","description":"","author":"John Lindquist","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","discussion":"https://github.com/johnlindquist/kit/discussions/854","url":"https://gist.githubusercontent.com/johnlindquist/ce9f7378b80ade93f63fef2586ce7289/raw/2036e5970c77fc510e9535d0d2e0f968552024ef/imagine-prompt.js","title":"Midjourney Prompt Generator","command":"midjourney-prompt-generator","content":"Feel free to tweak the script to use the built-in functions however you want. It's currently generating prompts using _all_ so you'll get absolutely wild results like this:\r\n\r\n![](https://cdn.discordapp.com/attachments/957308102238167120/1002275900471128124/johnlindquist__Studio_photoshoot_of_Brad_Pitt_Hedgehog_Huntress_aac9c6f5-4f34-41b0-a286-6fae1af9c292.png)\r\n\r\n![](https://cdn.discordapp.com/attachments/957308102238167120/1002275121517572177/johnlindquist__Studio_photoshoot_of_Chris_Pratt_Hawk_Mr._Freeze_c2de77d5-1a43-4082-b62e-55e484fba631.png)\r\n\r\n![](https://cdn.discordapp.com/attachments/957308102238167120/1002266728367136838/johnlindquist__Studio_photoshoot_of_Meryl_Streep_Hyena_Swamp_Th_302384dc-9cf8-48bd-b570-85a9c589c994.png)\r\n\r\n> ⚠️ Note: You need to have Discord focused for this script to generate and paste a prompt\r\n\r\n[Open imagine-prompt in Script Kit](https://scriptkit.com/api/new?name=imagine-prompt&url=https://gist.githubusercontent.com/johnlindquist/ce9f7378b80ade93f63fef2586ce7289/raw/2036e5970c77fc510e9535d0d2e0f968552024ef/imagine-prompt.js\")\r\n\r\n```js\r\n// Name: Midjourney Prompt\r\n// Description: Generate a Random Midjourney Prompt\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet count = parseInt(\r\n  await arg({\r\n    placeholder: \"How many prompts to generate and paste?\",\r\n    onInput: input => {\r\n      submit(input) //auto submit the number on press\r\n    },\r\n  }),\r\n  10\r\n)\r\n\r\nlet frontmost = await npm(\"frontmost-app\")\r\n\r\nlet exitIfNotDiscord = async () => {\r\n  let { localizedName: name } = await frontmost()\r\n  if (name !== \"Discord\") {\r\n    exit()\r\n  }\r\n}\r\n\r\nawait exitIfNotDiscord()\r\n\r\nlet n = (x = 0) =>\r\n  `::${Number(_.random(0.2, 2.2) + x).toPrecision(1)}`\r\n\r\nlet iw = (x = 0) =>\r\n  `${Number(_.random(0.2, 2.2) + x).toPrecision(1)}`\r\n\r\nlet parentDir = await env(\r\n  \"MIDJOURNEY_PARENT_DIR\",\r\n  async () => {\r\n    return await path({\r\n      hint: `Select a parent dir to clone the repo: https://github.com/johnlindquist/midjourney`,\r\n    })\r\n  }\r\n)\r\n\r\nlet mjDir = path.resolve(parentDir, \"midjourney\")\r\n\r\nlet mjExists = await isDir(mjDir)\r\n\r\nif (!mjExists) {\r\n  cd(parentDir)\r\n  await exec(\r\n    `git clone https://github.com/johnlindquist/midjourney`\r\n  )\r\n  cd(mjDir)\r\n} else {\r\n  cd(mjDir)\r\n  await exec(`git pull`)\r\n}\r\n\r\n// await wiki() will pull a random wikipedia title\r\nlet wiki = await npm(\"random-word-wikipedia\")\r\n\r\n// Generate functions based on .md files in the repo\r\nlet files = await readdir(mjDir)\r\nfiles = files.filter(file => file.endsWith(\".md\"))\r\n\r\nfor await (let file of files) {\r\n  let filePath = path.resolve(mjDir, file)\r\n  let list = await readFile(filePath, \"utf-8\")\r\n  let { name } = path.parse(filePath)\r\n  global[name] = () => _.sample(list.trim().split(\"\\n\"))\r\n}\r\n\r\nhide()\r\n\r\nlet go = async () => {\r\n  await exitIfNotDiscord()\r\n\r\n  // Customize however you want. More old \"maybe working\" examples here: https://github.com/johnlindquist/midjourney/blob/main/prompts.md\r\n  let fnsPrompt = `/imagine prompt: ${image()} ${myimage()} Studio photoshoot of ${celeb()} ${animal()} ${hero()}::4 ${await wiki()}${n()} in a ${color()} ${climate()}${n()} in the style of ${game()}${n()} taken by ${photographer()}${n()} by ${artist()}${n()} stylized like ${style()} and ${rank()}${n()} --stylize ${_.random(\r\n    1000,\r\n    3000\r\n  )} --uplight --aspect 16:9 --iw ${iw()}`\r\n\r\n  let prompt = _.sample([fnsPrompt])\r\n\r\n  await exitIfNotDiscord()\r\n\r\n  await setSelectedText(prompt)\r\n  log(prompt)\r\n\r\n  await wait(1000)\r\n\r\n  await exitIfNotDiscord() //I try to be extra careful when scripting the `Enter` key\r\n\r\n  await keyboard.pressKey(Key.Enter)\r\n  await keyboard.releaseKey(Key.Enter)\r\n  await wait(250) // Discord needs a sec after paste+enter to recorgnize it as a command\r\n\r\n  await exitIfNotDiscord()\r\n\r\n  await keyboard.pressKey(Key.Enter)\r\n  await keyboard.releaseKey(Key.Enter)\r\n}\r\n\r\nlet i = 0\r\n\r\nwhile (i < count) {\r\n  i++\r\n  await go()\r\n  await wait(1000)\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"download-youtube-video","description":"","author":"Lucas Sierota","twitter":"lucasemanuelss","avatar":"https://avatars.githubusercontent.com/u/29212286?u=e2d92c3d4ea166511bb6030108664f7513cf2e31&v=4","user":"kseikyo","discussion":"https://github.com/johnlindquist/kit/discussions/852","url":"","title":"Download an youtube video","command":"download-an-youtube-video","content":"This script lets you download an youtube video into your Downloads folder using [youtube-dl-exec](https://www.npmjs.com/package/youtube-dl-exec).\r\n\r\nAll you have to do is grab the url and paste that into the script.\r\n\r\nAlso, if anyone knows of a better way to provide feedback other than the widgets, let me know 😄 \r\n\r\n```javascript\r\n// Name: download-youtube-video\r\n// Description: Downloads an youtube video using the url\r\n// Author: Lucas Sierota\r\n// Twitter: @lucasemanuelss\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport youtubeDlExec from \"youtube-dl-exec\";\r\n\r\nconst response = await widget(\r\n  `\r\n  <div class=\"w-full h-full text-center flex items-center justify-center\">\r\n    <h1 :class=\"responseClass\">{{ content }}</h1>\r\n  <div>\r\n  `\r\n);\r\nasync function downloadVideo() {\r\n  try {\r\n    const videoSrc = await arg(\"Video url:\");\r\n    const videoName = await arg(\"File name: (don't include extension)\");\r\n    const videoPath = \"Downloads\"\r\n\r\n    const fileName = videoName !== \"\" ? videoName : videoSrc;\r\n    // setting path to be downloaded and including file extension\r\n    const path = home(videoPath, path.basename(fileName) + \".mp4\");\r\n\r\n    // set loading state on widget\r\n    response.setState({\r\n      content: `Downloading...`,\r\n      responseClass: \"text-yellow-600\",\r\n    });\r\n\r\n    const res = await youtubeDlExec(videoSrc, { output: path });\r\n    console.log(res);\r\n    response.setState({\r\n      content: `✅ ${fileName} downloaded at ${path} ✅`,\r\n      responseClass: \"text-green-600\",\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n    if (\r\n      err.stderr.includes(\"'NoneType' object has no attribute 'decompress'\") ||\r\n      err.stderr.includes(\"is not a valid URL\")\r\n    ) {\r\n      response.setState({\r\n        content: `🔴 Error: The url provided is not an youtube video 🔴`,\r\n        responseClass: \"text-red-600\",\r\n      });\r\n    } else {\r\n      response.setState({\r\n        content: `🔴 Error ${err} 🔴`,\r\n        responseClass: \"w-full h-full text-red-600\",\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nawait downloadVideo();\r\n\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Translate with DeepL","author":"Jon E. Eguiluz","twitter":"viroide","avatar":"https://avatars.githubusercontent.com/u/713362?u=a7f6a7564b0aac91fd29ef2ae338d9e390c936fb&v=4","user":"Viroide","discussion":"https://github.com/johnlindquist/kit/discussions/851","url":"https://gist.githubusercontent.com/Viroide/0b1c7653b49c7fd05831d3f306611a7b/raw/08a438d0d45a2519ad133262be4e34cb652e1534/translate.js","title":"Translate using DeepL","command":"translate-using-deepl","content":"A simple script to use [DeepL](https://www.deepl.com/translator) to do translations.\r\n\r\nIt will ask you for a token the DeepL and from which language to which language you want to translate. I have added the function to choose between different translations but as far as I can see it is always returning only one,\r\n\r\n[link to install 🔥](https://scriptkit.com/api/new?name=translate&url=https://gist.githubusercontent.com/Viroide/0b1c7653b49c7fd05831d3f306611a7b/raw/08a438d0d45a2519ad133262be4e34cb652e1534/translate.js)\r\n\r\n```js\r\n// Name: Translate with DeepL\r\n// Author: Jon E. Eguiluz\r\n// Twitter: @viroide\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\n\r\nlet DEEPL_API_KEY = await env(\"DEEPL_API_KEY\", {\r\n    hint: md(\r\n        `Get a [DEEPL_API_KEY API Key](https://www.deepl.com/account/summary)`\r\n    ),\r\n    ignoreBlur: true,\r\n    secret: true,\r\n});\r\n\r\nlet SOURCE_LANG = await env(\"SOURCE_LANG\", {\r\n    hint: md(\r\n        `What language do you write in? (EN, ES... [Full list](https://www.deepl.com/es/docs-api/translating-text/request/))`\r\n    ),\r\n});\r\n\r\nlet TARGET_LANG = await env(\"TARGET_LANG\", {\r\n    hint: md(\r\n        `What language do you want to translate into? (EN, ES... [Full list](https://www.deepl.com/es/docs-api/translating-text/request/))`\r\n    ),\r\n});\r\n\r\nconst query = (input) => \r\n    `https://api-free.deepl.com/v2/translate?text=${encodeURIComponent(input)}&source_lang=${SOURCE_LANG}&target_lang=${TARGET_LANG}&auth_key=${DEEPL_API_KEY}`;\r\n\r\nlet lastTimestamp = null;\r\n\r\nlet selectedTranslation = await arg(\r\n    \"Translate with DeepL\",\r\n    async input => {\r\n        // input check\r\n        if (!input || input.length < 4) return []\r\n\r\n        // delay check\r\n        if (lastTimestamp && Date.now() - lastTimestamp < 200) return []\r\n        lastTimestamp = Date.now()\r\n\r\n        const query_url = query(input);\r\n        let { data } = await get(query_url);\r\n\r\n        return data.translations.map(translation => {\r\n            return {\r\n                name: translation.text,\r\n                preview: md(`${translation.text}`),\r\n                value: translation.text\r\n            }\r\n        })\r\n    }\r\n);\r\n\r\nawait setSelectedText(selectedTranslation);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"avatar":"https://avatars.githubusercontent.com/u/17277419?u=47eab23e934a39e580b892ae2af00a5ab7c056b1&v=4","user":"eminvergil","author":"eminvergil","twitter":"eminvergil","discussion":"https://github.com/johnlindquist/kit/discussions/847","url":"","title":"Verify phone number","command":"verify-phone-number","content":"Hi, i created new script for phone verification.\r\n\r\nHere is the implementation\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet envOptions = {\r\n  hint: md(\r\n    `You need to [sign up](https://rapidapi.com/Veriphone/api/veriphone/) to get cridential key`\r\n  ),\r\n  ignoreBlur: true,\r\n  secret: true,\r\n};\r\n\r\nlet rapid_api_key =  await env(\"RAPID_API_KEY\", envOptions);\r\n\r\nconst options = {\r\n  method: \"GET\",\r\n  headers: {\r\n    \"X-RapidAPI-Key\": rapid_api_key,\r\n    \"X-RapidAPI-Host\": \"veriphone.p.rapidapi.com\",\r\n  },\r\n};\r\n\r\nlet phone_number = await arg(\"type your phone number\")\r\n\r\nlet verify_response = await fetch(`https://veriphone.p.rapidapi.com/verify?phone=${phone_number}`, options);\r\nlet response = await verify_response.json();\r\nlet isSuccessfull = response.status_code === 200;\r\n\r\n{isSuccessfull && await div(\r\n`<h1 class=\"p-10 text-4xl text-center\">${response.status === \"success\" ? \"verified\" : \"not verified\"}</h1>`\r\n)}\r\n\r\n{!isSuccessfull && await div(\r\n`<h1 class=\"p-10 text-4xl text-center\">some error occurred.</h1>`\r\n)}\r\n\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"avatar":"https://avatars.githubusercontent.com/u/17277419?u=47eab23e934a39e580b892ae2af00a5ab7c056b1&v=4","user":"eminvergil","author":"eminvergil","twitter":"eminvergil","discussion":"https://github.com/johnlindquist/kit/discussions/846","url":"","title":"Spotify api albums search script","command":"spotify-api-albums-search-script","content":"Hi, i created a script for searching albums by artist name.\r\nHere is the implementation\r\n\r\n```js\r\n\r\nlet envOptions = {\r\n  hint: md(\r\n    `You need to [create an app](https://developer.spotify.com/dashboard/applications) to client_id and client_secret`\r\n  ),\r\n  ignoreBlur: true,\r\n  secret: true,\r\n};\r\n\r\nlet client_id =  await env(\"SPOTIFY_CLIENT_ID\", envOptions);\r\nlet client_secret = await env(\"SPOTIFY_CLIENT_SECRET\", envOptions);\r\n\r\nvar token = await fetch(\"https://accounts.spotify.com/api/token\", {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n    Accept: \"application/json\",\r\n    Authorization:\r\n      \"Basic \" + new Buffer(client_id + \":\" + client_secret).toString(\"base64\"),\r\n  },\r\n\r\n  body: \"grant_type=client_credentials\",\r\n}).then((res) => res.json());\r\n\r\n\r\nlet GetAlbums = async (artist_name) => {\r\n\r\n  let tokenResponse = await token.json();\r\n\r\n  let response = await fetch(\r\n    `https://api.spotify.com/v1/search?type=album&include_external=audio&q=${artist_name}`,\r\n    {\r\n      headers: {\r\n        Authorization: \"Bearer \" + tokenResponse.res.access_token,\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    }\r\n  );\r\n  let data = await response.json();\r\n};\r\n\r\nlet artist_name = await args(\"artist name...\");\r\nlet albums = await GetAlbums(artist_name);\r\n\r\nawait div(\r\n\t`\r\n\t<div className=\"grid lg:grid-cols-4 md:grid-cols-2 grid-cols-1 gap-10  p-5 justify-center items-center mx-auto\">\r\n      {albums.map((album: any) => (\r\n        <div className=\"flex flex-col gap-10  p-5 justify-center items-center mx-auto shadow-sm hover:shadow-2xl transition-shadow duration-500 ease-in-out\">\r\n          <img src={album.images[0].url} alt=\"album\" />\r\n          <h3>{album.name}</h3>\r\n          <p>{album.artists[0].name}</p>\r\n        </div>\r\n      ))}\r\n    </div>\t\r\n\t`\r\n\t)\r\n\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Toggle Reduced Motion","description":"","author":"ollie w","twitter":"pxlprfct","avatar":"https://avatars.githubusercontent.com/u/3811773?u=c71763512bbf356be5d11ec540d9ca08f8ba70c0&v=4","user":"pxlprfct","discussion":"https://github.com/johnlindquist/kit/discussions/842","url":"","title":"Toggle prefers reduced motion","command":"toggle-prefers-reduced-motion","content":"\r\n[Open toggle-prefers-reduced-motion in Script Kit](https://scriptkit.com/api/new?name=toggle-prefers-reduced-motion&url=https://gist.githubusercontent.com/pxlprfct/aaa4c05ae0a101c69d6c3558514abe72/raw/d9639afb58bdc60c6bb82e6e31d0af366ef893e2/toggle-prefers-reduced-motion.ts\")\r\n\r\n```js\r\n// Menu: Toggle Reduced Motion\r\n// Description: Switches osx \"prefers reduced motion\" flag\r\n// Author: Ollie W\r\n// Twitter: @pxlprfct\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\n// Credit (https://stackoverflow.com/users/6844169/wch1zpink) -> https://stackoverflow.com/a/60571303\r\nawait applescript(`\r\ntell application \"System Events\"\r\n    repeat until exists of checkbox \"Reduce motion\" of tab group 1 of ¬\r\n        group 1 of window \"Accessibility\" of application process \"System Preferences\"\r\n        delay 0.1\r\n    end repeat\r\n    click checkbox \"Reduce motion\" of tab group 1 of ¬\r\n        group 1 of window \"Accessibility\" of application process \"System Preferences\"\r\nend tell`);\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"description":"","author":null,"avatar":"https://avatars.githubusercontent.com/u/31288986?u=bb86ac247154b334d321634636e154d5f753f920&v=4","user":"AChandel01071994","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/837","url":"https://gist.githubusercontent.com/AChandel01071994/6fe50ce583e705ac61eb6945c2356235/raw/ba66335de1f842e367f3563fbb3438f8c998ed25/google.js","title":"Easy Google Search","command":"easy-google-search","content":"\r\n[Open google in Script Kit](https://scriptkit.com/api/new?name=google&url=https://gist.githubusercontent.com/AChandel01071994/6fe50ce583e705ac61eb6945c2356235/raw/ba66335de1f842e367f3563fbb3438f8c998ed25/google.js\")\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n //Name: Google   \r\n// Description: Put your query and  switch to chrome with google search results\r\n// Author: Abhishek Chandel \r\n\r\nlet text = await arg(\"search...\")\r\nbrowse(`https://www.google.com/search?q=${encodeURI(text)}`)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"caniuse","description":"","author":"ollie w","twitter":"pxlprfct","avatar":"https://avatars.githubusercontent.com/u/3811773?u=c71763512bbf356be5d11ec540d9ca08f8ba70c0&v=4","user":"pxlprfct","discussion":"https://github.com/johnlindquist/kit/discussions/834","url":"","title":"Search caniuse.com","command":"search-caniusecom","content":"\r\n[Open caniuse in Script Kit](https://scriptkit.com/api/new?name=caniuse&url=https://gist.githubusercontent.com/pxlprfct/0e4d0a94e985ba43b364bca340330409/raw/f7de68241e94639f1d8d381086efb4e18e36b7ae/caniuse.ts\")\r\n\r\n```js\r\n// Menu: caniuse\r\n// Description: Search caniuse.com for browser feature support\r\n// Author: Ollie W\r\n// Twitter: @pxlprfct\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nexport interface Agents {\r\n  [browser: string]: Agent;\r\n}\r\n\r\nexport interface Agent {\r\n  browser: string;\r\n  long_name: string;\r\n  abbr: string;\r\n  prefix: string;\r\n  type: string;\r\n  usage_global?: {\r\n    string: number;\r\n  };\r\n  versions: Array<null | string>;\r\n}\r\n\r\nexport interface Data {\r\n  [browser: string]: Feature;\r\n}\r\n\r\nexport interface Feature {\r\n  title: string;\r\n  description: string;\r\n  spec: string;\r\n  status: string;\r\n  links: Link[];\r\n  categories: string[];\r\n  stats: Stats[];\r\n  notes?: string;\r\n  notes_by_num?: { [num: string]: string };\r\n}\r\n\r\nexport interface Link {\r\n  url: string;\r\n  title: string;\r\n}\r\n\r\nexport interface Stats {\r\n  [browser: string]: null | string;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\nconst TABLE_HEADER = `\r\n| Browser (Latest version) | Can I Use? |\r\n| ------------------------ | ---------- |`;\r\n\r\nconst PRETTY_SUPPORT = new Map([\r\n  [\"y\", \"Yes\"],\r\n  [\"n\", \"No\"],\r\n]);\r\n\r\nconst GLOBAL_BROWSER_USAGE_CUT_OFF = 0.5;\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\nconst pretty_formatted_support = (caniuse: string) => {\r\n  const support = PRETTY_SUPPORT.get(caniuse);\r\n  return support ? support : \"Caveats\";\r\n};\r\n\r\nconst get_latest_browser_version = (browser_versions: Stats) => {\r\n  const latest_browser = Object.keys(browser_versions)\r\n    .sort((a, b) => Number(a) - Number(b))\r\n    .pop();\r\n  return [latest_browser, browser_versions[latest_browser]];\r\n};\r\n\r\nconst create_table_row = (browser, version, support) =>\r\n  `| ${pretty_browser_agents.get(\r\n    browser\r\n  )} *(${version})* | ${pretty_formatted_support(support)} |`;\r\n\r\nconst create_browser_support_rows = (feature: Stats[]) =>\r\n  Object.entries(feature)\r\n    .reduce((rows, [browser, browser_versions]) => {\r\n      const [version, support] = get_latest_browser_version(browser_versions);\r\n\r\n      if (pretty_browser_agents.has(browser)) {\r\n        rows.push(create_table_row(browser, version, support));\r\n      }\r\n\r\n      return rows;\r\n    }, [])\r\n    .join(\"\\n\");\r\n\r\nconst create_browser_support_table = (stats: Stats[]) =>\r\n  [TABLE_HEADER, create_browser_support_rows(stats)].join(\"\\n\");\r\n\r\nconst create_preview = (feature: Feature) =>\r\n  md(\r\n    [\r\n      `## ${feature.title}`,\r\n      \"\",\r\n      `${feature.description}`,\r\n      `${create_browser_support_table(feature.stats)}`,\r\n    ].join(\"\\n\")\r\n  );\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\nconst { agents, data } = await get<{ agents: Agents; data: Data }>(\r\n  `https://raw.githubusercontent.com/Fyrd/caniuse/master/data.json`\r\n).then((response) => response.data);\r\n\r\nconst pretty_browser_agents = new Map(\r\n  Object.entries(agents).reduce((acc, [browser, data]) => {\r\n    const total_usage = Object.values(data.usage_global).reduce(\r\n      (sum, value) => sum + value || 0,\r\n      0\r\n    );\r\n\r\n    if (total_usage >= GLOBAL_BROWSER_USAGE_CUT_OFF) {\r\n      acc.push([browser, data.browser]);\r\n    }\r\n\r\n    return acc;\r\n  }, [])\r\n);\r\n\r\nconst choices = Object.entries(data).map(([feature, feature_value]) => ({\r\n  name: feature_value.title,\r\n  description: feature_value.description,\r\n  value: feature,\r\n  preview: () => create_preview(feature_value),\r\n}));\r\n\r\nconst query = await arg(\"Search for browser feature\", choices);\r\n\r\nbrowse(`https://caniuse.com/?search=${query}`);\r\n```\r\n\r\n\r\nhttps://user-images.githubusercontent.com/3811773/179373944-2126faf3-bc4f-4995-af4d-f2084438eaa8.mp4\r\n\r\nBased on https://github.com/willfarrell/alfred-caniuse-workflow\r\n\r\nFirst thing I've made with scriptkit - very slick! \r\n\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Get Hero Icons","description":"","author":"Benjamin Modayil","twitter":"modayilme","avatar":"https://avatars.githubusercontent.com/u/12306850?u=51152dab74c9158efeb6a84a65acf2464cf84218&v=4","user":"benjaminmodayil","discussion":"https://github.com/johnlindquist/kit/discussions/832","url":"","title":"Grab Icon from TailwindLabs's HeroIcons set","command":"grab-icon-from-tailwindlabss-heroicons-set","content":"This script lets you copy a solid/outline icon variant from [TailwindLab's Hero Icons set](https://github.com/tailwindlabs/heroicons).\r\n\r\nI created this as I wanted a fast way to find a specific icon while working in Sketch without referencing the site to copy the svgs. This script uses the \"optimized\" versions of the SVGs. These are good for development, but I've had some bugs with the optimized SVGs (not script related) when pasting it in Sketch. I think if you want to have the uncompressed/less performant version of the SVGs for design programs, you just need to change the GitHub API/paths from the `optimized` folder to the `src` folder.\r\n\r\nhttps://user-images.githubusercontent.com/12306850/179084850-6702912c-7b66-4165-a6df-f878e9bd2f98.mov\r\n\r\n```JavaScript\r\n// Name: Get Hero Icons\r\n// Description: Copies a Hero Icon from TailwindLabs open-sourced repository.\r\n// Author: Benjamin Modayil\r\n// Twitter: @modayilme\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nconst baseRoute = 'https://api.github.com/repos/tailwindlabs/heroicons/contents/optimized';\r\nlet outlineFolderPath = `${baseRoute}/outline`;\r\nlet solidFolderPath = `${baseRoute}/solid`;\r\n\r\nlet outlineFiles;\r\nlet solidFiles;\r\n\r\nconst headers = {\r\n  'User-Agent': 'scriptkit/hero-icons'\r\n};\r\n\r\ntry {\r\n  let outlineResponse = await get(outlineFolderPath, headers);\r\n  let solidResponse = await get(solidFolderPath, headers);\r\n  outlineFiles = outlineResponse.data;\r\n  solidFiles = solidResponse.data;\r\n} catch (error) {\r\n  notify(error);\r\n}\r\n\r\nconst outlineRemotePath =\r\n  'https://raw.githubusercontent.com/tailwindlabs/heroicons/master/optimized/outline';\r\nconst solidRemotePath =\r\n  'https://raw.githubusercontent.com/tailwindlabs/heroicons/master/optimized/solid';\r\n\r\n// We only loop over the outline folder files as the only difference in folders is the icon style type, solid versus outline, (230 files in each folder).\r\nconst options = outlineFiles.map((file) => {\r\n  return {\r\n    name: file.name,\r\n    description: file.path,\r\n    value: file.name,\r\n    preview: `\r\n      <div class=\"bg-white flex\">\r\n        <figure class=\"flex flex-col items-center flex-auto w-40 m-0\">\r\n          <img class=\"w-40\" src=\"${outlineRemotePath}/${file.name}\" alt=\"outline \">\r\n          <figcaption class=\"center text-black\">outline</figcaption>\r\n        </figure>\r\n        <figure class=\"flex flex-col items-center flex-auto w-40 m-0\">\r\n          <img class=\"w-40\" src=\"${solidRemotePath}/${file.name}\" alt=\"solid \">\r\n          <figcaption class=\"center text-black\">solid</figcaption>\r\n        </figure>\r\n      </div>\r\n    `\r\n  };\r\n});\r\n\r\nconst fileName = await arg('Search for an icon:', options);\r\nconst typeOptions = [\r\n  {\r\n    name: 'outline',\r\n    value: `${outlineRemotePath}/${fileName}`,\r\n    preview: `\r\n      <div>\r\n        <figure class=\"bg-white flex flex-col items-center flex-auto w-40 m-0\">\r\n          <img class=\"w-40\" src=\"${outlineRemotePath}/${fileName}\" alt=\"outline ${fileName}\">\r\n          <figcaption class=\"center text-black\">outline</figcaption>\r\n        </figure>\r\n      </div>\r\n    `\r\n  },\r\n  {\r\n    name: 'solid',\r\n    value: `${solidRemotePath}/${fileName}`,\r\n    preview: () => `\r\n      <div>\r\n        <figure class=\"bg-white flex flex-col items-center flex-auto w-40 m-0\">\r\n          <img class=\"w-40\" src=\"${solidRemotePath}/${fileName}\" alt=\"solid ${fileName}\">\r\n          <figcaption class=\"center text-black\">solid</figcaption>\r\n        </figure>\r\n      </div>\r\n    `\r\n  }\r\n];\r\n\r\nconst downloadLink = await arg('Which type?', typeOptions);\r\nconst type = downloadLink.includes('outline') ? 'outline' : 'solid';\r\ntry {\r\n  let buffer = await download(downloadLink, headers);\r\n  await copy(buffer.toString());\r\n  notify(`Copied ${type} ${fileName} icon to clipboard`);\r\n} catch (error) {\r\n  notify(error);\r\n}\r\n\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"shortcut":"command option p","menu":"P.I.G","version":"1.0.0","description":"","author":"PRAMOD A JINGADE","twitter":"avj2352","avatar":"https://avatars.githubusercontent.com/u/6997529?u=3d91e8ea523b78a844f1f3974975b34684e4bc05&v=4","user":"avj2352","discussion":"https://github.com/johnlindquist/kit/discussions/780","url":"","title":"Generate PWA assets and splash screens from Logo image","command":"generate-pwa-assets-and-splash-screens-from-logo-image","content":"Handy script to generate all mobile assets and favicon related to Progressive Web Applications based on a logo image\r\n\r\n> NOTE: works best if the logo is square shaped. \r\n\r\n```typescript\r\n// Shortcut: command option p\r\n// Menu: P.I.G \r\n// version: 1.0.0\r\n// Description: 🌆 Generate favicons, assets and splash screens for Progressive Web Apps\r\n// Author: Pramod Jingade\r\n// Twitter: @avj2352\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst Jimp = await npm(\"jimp\");\r\n\r\n// allowed file extensions\r\nconst allowImageExtensions: string[] = [\".png\", \".jpg\"];\r\n\r\n// Read source icon\r\nlet imagePath: string = await getSelectedFile();\r\nif (!imagePath || imagePath === \"\")\r\n  imagePath = await selectFile(`Choose icon to generate PWA assets:`);\r\n\r\n// Check if extension is .PNG or .JPG\r\nlet extension: string = path.extname(imagePath);\r\n\r\n// guard check - extension\r\nwhile (!allowImageExtensions.includes(extension)) {\r\n  let fileName: string = path.basename(imagePath);\r\n  imagePath = await selectFile(`${fileName} wasn't an image:`);\r\n  if (!imagePath) {\r\n    exit();\r\n  }\r\n  // get file extension\r\n  extension = path.extname(imagePath);\r\n}\r\n\r\n// Create image list - android\r\nconst createAndroidImageList: Promise<string>[] = [\r\n  createImage(imagePath, 16, \"android\"),\r\n  createImage(imagePath, 32, \"android\"),\r\n  createImage(imagePath, 72, \"android\"),\r\n  createImage(imagePath, 96, \"android\"),\r\n  createImage(imagePath, 128, \"android\"),\r\n  createImage(imagePath, 144, \"android\"),\r\n  createImage(imagePath, 152, \"android\"),\r\n  createImage(imagePath, 192, \"android\"),\r\n  createImage(imagePath, 384, \"android\"),\r\n  createImage(imagePath, 512, \"android\"),\r\n];\r\n\r\n// Create image list - windows\r\nconst creaeMicrosoftImageList: Promise<string>[] = [\r\n  createImage(imagePath, 70, \"ms-icon\"),\r\n  createImage(imagePath, 150, \"ms-icon\"),\r\n  createImage(imagePath, 310, \"ms-icon\"),\r\n];\r\n\r\n// Create image list - iOS\r\nconst createiOSImageList: Promise<string>[] = [\r\n  createImage(imagePath, 120, \"ios\"),\r\n  createImage(imagePath, 152, \"ios\"),\r\n  createImage(imagePath, 167, \"ios\"),\r\n  createImage(imagePath, 180, \"ios\"),\r\n  createImage(imagePath, 192, \"ios\"),\r\n  createImage(imagePath, 512, \"ios\"),\r\n];\r\n\r\n// Create splash screens\r\nconst createSplashScreenList: Promise<string>[] = [\r\n  createSplashScreenWithLogo(imagePath, 1536, 2048),\r\n  createSplashScreenWithLogo(imagePath, 2436, 1125),\r\n  createSplashScreenWithLogo(imagePath, 1620, 2160),\r\n  createSplashScreenWithLogo(imagePath, 2532, 1170),\r\n  createSplashScreenWithLogo(imagePath, 1668, 2224),\r\n  createSplashScreenWithLogo(imagePath, 1668, 2388),\r\n  createSplashScreenWithLogo(imagePath, 2688, 1242),\r\n  createSplashScreenWithLogo(imagePath, 2732, 2048),\r\n  createSplashScreenWithLogo(imagePath, 1125, 2436),\r\n  createSplashScreenWithLogo(imagePath, 1792, 828),\r\n  createSplashScreenWithLogo(imagePath, 2778, 1284),\r\n  createSplashScreenWithLogo(imagePath, 1136, 640),\r\n  createSplashScreenWithLogo(imagePath, 2046, 1536),\r\n  createSplashScreenWithLogo(imagePath, 1170, 2532),\r\n  createSplashScreenWithLogo(imagePath, 2048, 2732),\r\n  createSplashScreenWithLogo(imagePath, 750, 1334),\r\n  createSplashScreenWithLogo(imagePath, 1242, 2208),\r\n  createSplashScreenWithLogo(imagePath, 2160, 1620),\r\n  createSplashScreenWithLogo(imagePath, 828, 1792),\r\n  createSplashScreenWithLogo(imagePath, 1242, 2688),\r\n  createSplashScreenWithLogo(imagePath, 2208, 1242),\r\n  createSplashScreenWithLogo(imagePath, 1284, 2778),\r\n  createSplashScreenWithLogo(imagePath, 2224, 1668),\r\n  createSplashScreenWithLogo(imagePath, 1334, 750),\r\n  createSplashScreenWithLogo(imagePath, 2388, 1668),\r\n];\r\n\r\n// Create favicon\r\ncreateFavicon(imagePath);\r\n// Create assets\r\nPromise.all(createAndroidImageList);\r\nPromise.all(creaeMicrosoftImageList);\r\nPromise.all(createiOSImageList);\r\nPromise.all(createSplashScreenList);\r\n\r\n/**\r\n * Reusable function to create image\r\n * @param {string} imagePath - complete file path\r\n * @param {number} width - width of image\r\n */\r\nasync function createImage(\r\n  imagePath: string,\r\n  width: number,\r\n  folder: string = \"android\"\r\n): Promise<string> {\r\n  let image = await Jimp.read(imagePath);\r\n  const dirName: string = path.parse(imagePath).dir;\r\n\r\n  const newHeight = Math.floor(\r\n    image.bitmap.height * (width / image.bitmap.width)\r\n  );\r\n\r\n  const resizedImageName = `${folder}-icon-${width}x${width}${extension}`;\r\n\r\n  await image\r\n    .resize(width, newHeight)\r\n    .write(`${dirName}/${folder}/${resizedImageName}`);\r\n  return `Created image: ${imagePath}-${width}${extension}`;\r\n}\r\n\r\n/**\r\n * Create splash screen with logo in center\r\n * @param {string} imagePath - complete file path\r\n * @param {number} canvasWidth - width of splash screen\r\n * @param {number} canvasHeight - height of splash screen\r\n */\r\nasync function createSplashScreenWithLogo(\r\n  imagePath: string,\r\n  canvasWidth: number,\r\n  canvasHeight: number,\r\n  color = \"#FFFFFF\",\r\n  folder = \"ios\"\r\n): Promise<string> {\r\n  const dirName: string = path.parse(imagePath).dir;\r\n  const resizedImageName = `${folder}-splash-${canvasWidth}x${canvasHeight}${extension}`;\r\n\r\n  let image = await Jimp.read(imagePath);\r\n  const imageCanvas = new Jimp(canvasWidth, canvasHeight, color);\r\n  // composite\r\n  imageCanvas\r\n    .composite(\r\n      image,\r\n      alignImageCenter(canvasWidth, image.bitmap.width),\r\n      alignImageCenter(canvasHeight, image.bitmap.height)\r\n    )\r\n    .write(`${dirName}/${folder}/${resizedImageName}`);\r\n  return `Created splash screen!`;\r\n}\r\n\r\n/**\r\n * util function to offset image to the center of canvas\r\n * @param {number} canvasSize\r\n * @param {number} imageSize\r\n * @returns {number} offset size\r\n */\r\nfunction alignImageCenter(canvasSize: number, imageSize: number): number {\r\n  return (canvasSize - imageSize) / 2;\r\n}\r\n\r\n/**\r\n * Create favicon.ico file at the root of the folder\r\n * @param {string} imagePath \r\n */\r\nasync function createFavicon(imagePath: string) {\r\n  const dirName: string = path.parse(imagePath).dir;  \r\n  let image = await Jimp.read(imagePath);\r\n  const resizedImageName = `favicon.ico`;\r\n  await image.resize(16, 16).write(`${dirName}/${resizedImageName}`);\r\n  return `Created Favicon!`;\r\n}\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"xstate widget","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/778","url":"","title":"XState Widget","command":"xstate-widget","content":"\r\n[Open xstate-widget in Script Kit](https://scriptkit.com/api/new?name=xstate-widget&url=https://gist.githubusercontent.com/johnlindquist/3168217af9fd93002f3b050783bb88e8/raw/af39e3534e659ceb9297413e75b5110a63c37287/xstate-widget.ts\")\r\n\r\n```js\r\n// Name: xstate widget\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet { createMachine, interpret } = await npm(\"xstate\")\r\n\r\nlet initial = 'inactive'\r\nlet toggleMachine = createMachine({\r\n    id: 'toggle',\r\n    initial,\r\n    states: {\r\n        inactive: { on: { TOGGLE: 'active' } },\r\n        active: { on: {TOGGLE: 'inactive'}}\r\n    }\r\n})\r\n\r\n// Widgets use \"petite-vue\" templating with state on the root\r\n// This allows to send a state object\r\nlet w = await widget(`\r\n<div class=\"p-4 text-4xl\">\r\n    <button>Click</button>\r\n    <div>{{ value === \"active\" ? \"💚\" : \"💔\"}}<div>\r\n</div>`, {\r\n    state: {\r\n        value: initial\r\n    }\r\n})\r\n\r\nlet toggleService = interpret(toggleMachine)\r\n    .onTransition(state => {\r\n        log(state) // ~/.kenv/logs/xstate-widget.log\r\n        w.setState(state)\r\n    })\r\n    .start()\r\n\r\nw.onClick(() => {\r\n    toggleService.send('TOGGLE')\r\n})\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Eject External Drive","avatar":"https://avatars.githubusercontent.com/u/3693735?v=4","user":"ohana54","author":"Tomer Ohana","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/772","url":"https://gist.githubusercontent.com/ohana54/ad6c3269ccc036daaec2d7036260404a/raw/32c800da6ea9871bd99f06e5867d3648118d9db6/eject-external-drive.js","title":"Eject External Drive","command":"eject-external-drive","content":"\r\n[Open eject-external-drive in Script Kit](https://scriptkit.com/api/new?name=eject-external-drive&url=https://gist.githubusercontent.com/ohana54/ad6c3269ccc036daaec2d7036260404a/raw/32c800da6ea9871bd99f06e5867d3648118d9db6/eject-external-drive.js\")\r\n\r\n```js\r\n// Name: Eject External Drive\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport os from 'os'\r\n\r\nconst {stdout} = await $`diskutil list | grep \"(external\"`\r\n\r\nconst firstDisk = stdout.split(os.EOL)[0]\r\nconst firstDiskPath = firstDisk.split(' ')[0]\r\n\r\nawait $`diskutil eject ${firstDiskPath}`\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Open Pull Requests","author":"Manan Joshi","twitter":"manan__joshi","avatar":"https://avatars.githubusercontent.com/u/12088143?u=8dfbb9a55ec09ac267e17424d3fdffc46aa3408d&v=4","user":"manan30","discussion":"https://github.com/johnlindquist/kit/discussions/763","url":"","title":"List all open PR's across all repos. Includes ones created by you as well as ones requesting your review","command":"list-all-open-prs-across-all-repos-includes-ones-created-by-you-as-well-as-ones-requesting-your-review","content":"Shows a list of all open PR's across all of your Github repos. Includes ones created by you as well as ones requesting your review. Selecting a pull request will open it directly in the browser\r\n\r\n```js\r\n// Name: Open Pull Requests\r\n// Author: Manan Joshi\r\n// Twitter: @manan__joshi\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport { Choice } from \"@johnlindquist/kit\";\r\n\r\nconst GITHUB_ACCESS_TOKEN = \"<YOUR_GITHUB_ACCESS_TOKEN>\";\r\nconst GITHUB_GRAPHQL_ENDPOINT = \"https://api.github.com/graphql\";\r\n\r\nconst myRequests = async () =>\r\n  await fetch(GITHUB_GRAPHQL_ENDPOINT, {\r\n    headers: { Authorization: `token ${GITHUB_ACCESS_TOKEN}` },\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      query: `\r\n        query {\r\n          viewer {\r\n            pullRequests(\r\n              first: 100\r\n              orderBy: { field: CREATED_AT, direction: DESC }\r\n              states: OPEN\r\n            ) {\r\n              nodes {\r\n                author {\r\n                  login\r\n                  avatarUrl\r\n                }\r\n                url\r\n                title\r\n                body\r\n                repository {\r\n                  nameWithOwner\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `,\r\n    }),\r\n  });\r\n\r\nconst reviewRequests = async () =>\r\n  await fetch(GITHUB_GRAPHQL_ENDPOINT, {\r\n    headers: { Authorization: `token ${GITHUB_ACCESS_TOKEN}` },\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      query: `\r\n        query {\r\n          search(\r\n            query: \"is:pr is:open review-requested:<your_github_username>\"\r\n            type: ISSUE\r\n            first: 100\r\n          ) {\r\n            nodes {\r\n              ... on PullRequest {\r\n                title\r\n                url\r\n                body\r\n                author {\r\n                  login\r\n                  avatarUrl\r\n                }\r\n                repository {\r\n                  nameWithOwner\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `,\r\n    }),\r\n  });\r\n\r\n[\"Mine\", \"Requested\"].forEach((type) => {\r\n  onTab(type, async () => {\r\n    const pullRequestUrl = await arg(\"Select a Pull Request\", async () => {\r\n      let requests = [];\r\n\r\n      if (type === \"Mine\") {\r\n        const data = await myRequests();\r\n        requests = (await data.json()).data.viewer.pullRequests.nodes;\r\n      } else {\r\n        const data = await reviewRequests();\r\n        requests = (await data.json()).data.search.nodes;\r\n      }\r\n\r\n      return requests.map(\r\n        (request) =>\r\n          ({\r\n            name: request.title,\r\n            description: `${request.repository.nameWithOwner} | ${request.author.login}`,\r\n            value: request.url,\r\n            icon: request.author.avatarUrl,\r\n            preview: md(`# ${request.title}`).concat(md(request.body)),\r\n          } as Choice<string>)\r\n      );\r\n    });\r\n\r\n    exec(`open ${pullRequestUrl}`);\r\n  });\r\n});\r\n```\r\n\r\n![pika-2022-05-01T09_04_11 591Z](https://user-images.githubusercontent.com/12088143/166139324-a03b6bfe-43d3-4deb-9592-5a1e60c052a2.png)","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Copy text sans brackets","description":"","shortcut":"cmd + [","author":"Ian Jones","twitter":"_jonesian","avatar":"https://avatars.githubusercontent.com/u/4407263?u=fa7f37727ea98fd7f24e8409d0fda4c451c48eae&v=4","user":"theianjones","discussion":"https://github.com/johnlindquist/kit/discussions/757","url":"","title":"Copy Logseq/Roam Research content to clipboard without `[[]]` brackets","command":"copy-logseqroam-research-content-to-clipboard-without-brackets","content":"Remove wiki links (from logseq or roam) when you want to copy paste notes our of your editor:\r\n\r\n[Install kit link](https://scriptkit.com/api/new?name=remove-brackets&url=https://gist.githubusercontent.com/theianjones/ba3457aba8dd7efeafa804f83bbcbf39/raw/9ac61e8191d56de9a4d87fb4455b2872ed0ab3a9/remove-brackets.ts)\r\n\r\n```ts\r\n// Name: Copy text sans brackets\r\n// Description: Remove wiki links from selected text\r\n// Shortcut: cmd + [\r\n// Author: Ian Jones\r\n// Twitter: @_jonesian\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst text = await getSelectedText()\r\nconst newText = text.split(\"\\n\").map(text => {\r\n    return text.split(' ').map((word, i, arr) => {\r\n        if(!word) {\r\n            return\r\n        }\r\n        const FULL_BRACES_MATCH = /\\[\\[(.*?)\\]\\]/\r\n        const LEFT_MATCH = /\\[\\[/\r\n        const RIGHT_MATCH = /\\]\\]/\r\n        const [_, fullMatch] = word.match(FULL_BRACES_MATCH) ?? []\r\n        const [leftMatch] = word.match(LEFT_MATCH) ?? []\r\n        const [rightMatch] = word.match(RIGHT_MATCH) ?? []\r\n        \r\n        if(!!fullMatch){\r\n            return fullMatch\r\n        } else if (!!leftMatch) {\r\n            const restOfArr = arr.slice(i + 1)\r\n            const restOfLink = restOfArr.reduce((acc, curr) => {\r\n                if(acc.endFound){\r\n                    return acc\r\n                }\r\n                const [rightMatch] = curr.match(RIGHT_MATCH) ?? []\r\n\r\n                return {endFound: !!rightMatch, str: acc.str + \" \" + curr}\r\n            }, {endFound: false, str: ''}).str\r\n            const [_, match] =  (word + restOfLink).match(FULL_BRACES_MATCH) ?? []\r\n            return match\r\n        } else if (rightMatch){\r\n            return\r\n        }else {\r\n            return word\r\n        }\r\n    }).join(' ')\r\n}).join(\"\\n\")\r\n\r\nif(newText){\r\n    await copy(newText)\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Get Current Weather","description":"","author":"Daniel Chapman","twitter":"ds_chapman","avatar":"https://avatars.githubusercontent.com/u/36767987?u=e03b3d34a5882f34dfb8d6e11609dd94836e3696&v=4","user":"dschapman","discussion":"https://github.com/johnlindquist/kit/discussions/752","url":"","title":"Find Current Weather","command":"find-current-weather","content":"Inspired by [this script](https://github.com/johnlindquist/kit/discussions/489) I created a script that uses https://weather.gov and the [locateme](https://formulae.brew.sh/formula/locateme) script to find the weather in your current location. You can also find the weather by City, State or Zip code.\r\n\r\nThis script requires you to install locateme (`brew install locateme`) and grant it permission to use your location in Security & Privacy.\r\n\r\n<img width=\"987\" alt=\"Screen Shot 2022-03-25 at 10 22 11 AM\" src=\"https://user-images.githubusercontent.com/36767987/160138999-fdc14c88-f90a-45c4-8e27-65e0f9e959f9.png\">\r\n\r\n```javascript\r\n// Menu: Get Current Weather\r\n// Description: Forecast provided by weather.gov\r\n// Author: Daniel Chapman\r\n// Twitter: @ds_chapman\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet input = await arg(\"Get the Weather\", [\"For My Current Location\", \"For a Different Location\"])\r\nvar location;\r\nif (input == \"For My Current Location\") {\r\n  // Requires LocateMe installed on the path \r\n  // '$ brew install locateme'\r\n  // Also make sure to allow locateme in privacy/security\r\n  location = await $`locateme -f \"lat={LAT}&lon={LON}\"`;\r\n  div(\r\n  `<iframe src=\"https://forecast.weather.gov/MapClick.php?${location}\" height=1280px width=100% />`, \r\n);\r\n} else if (input == \"For a Different Location\") {\r\n  location = await arg(\"City, State or Zip\")\r\n\r\n  div(`<iframe src=\"https://forecast.weather.gov/zipcity.php?inputstring=${location}\" height=1280px width=100% />`)\r\n\r\n\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Website Tools","description":"","author":"Daniel Chapman","twitter":"ds_chapman","avatar":"https://avatars.githubusercontent.com/u/36767987?u=e03b3d34a5882f34dfb8d6e11609dd94836e3696&v=4","user":"dschapman","discussion":"https://github.com/johnlindquist/kit/discussions/751","url":"https://gist.githubusercontent.com/dschapman/23e3121f227b827409389a4822ed91f4/raw/f6f2a8e5b979ee19353adbab691ec86b1308ee15/publish-website.js","title":"Tools for Managing a Markdown Based Website with Git Submodules","command":"tools-for-managing-a-markdown-based-website-with-git-submodules","content":"[Install Script](https://scriptkit.com/api/new?name=publish-website&url=https://gist.githubusercontent.com/dschapman/23e3121f227b827409389a4822ed91f4/raw/f6f2a8e5b979ee19353adbab691ec86b1308ee15/publish-website.js)\r\n\r\nI put together a toolbox of scripts to help me manage my website -- a Gatsby based website that includes two different submodules of markdown content (One for my public notes, and one for my website's content). Some scripts are pretty straightforward (open VSCode, open the website in the browser) but the publish scripts take care of all of the git commands necessary to publish changes for me, including updating the git submodules.\r\n\r\n<img width=\"880\" alt=\"Screen Shot 2022-03-25 at 9 54 41 AM\" src=\"https://user-images.githubusercontent.com/36767987/160134094-4bf70455-6727-407a-a0d3-ab528283fa45.png\">\r\n<img width=\"880\" alt=\"Screen Shot 2022-03-25 at 9 55 21 AM\" src=\"https://user-images.githubusercontent.com/36767987/160134204-177e87e1-0b5c-4e16-a05a-dc1fb2a7017d.png\">\r\n\r\n\r\n\r\n```javascript\r\n// Name: Website Tools\r\n// Description: Tools for maintaining my website (dschapman.com)\r\n// Author: Daniel Chapman\r\n// Twitter: @ds_chapman\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet website_content = \"/Users/danielchapman/Library/Mobile Documents/iCloud~md~obsidian/Documents/dschapman-com-content\"\r\nlet website_notes = \"/Users/danielchapman/Library/Mobile Documents/iCloud~md~obsidian/Documents/My notes\"\r\nlet website_dir = \"/Users/danielchapman/github/dschapman/dschapman-com\"\r\n\r\nlet today = Date()\r\nlet output = []\r\nlet input = await arg(\"Select an Option\", [{ name: \"Publish\", description: \"Update the git repositories necessary to publish an update to my website\", value: \"Publish\" }, { name: \"Open Website in VSCode\", description: \"Open a vscode environment for dschapman-com\", value: \"VSCode\" }, { name: \"Edit Website Content\", description: \"Open the website's content in Obsidian\", value: \"Edit Website Content\" }, { name: \"Open Website\", description: \"Open https://dschapman.com in the browser\", value: \"Open Website\" }, { name: \"View on Github\", description: \"View website code on Github\", value: \"Github\" }].sort((a, b) => { return (a.name > b.name ? 1 : -1) }))\r\n\r\nswitch (input) {\r\n    case \"Publish\":\r\n        input = await arg(\"Publish\", [{ name: \"Website Content\", description: \"Publish any changes to poems, articles or blog posts\", \"value\": \"Website Content\" }, { name: \"Website Notes\", description: \"Publish any changes to public notes\", value: \"Website Notes\" }, { name: \"All Content\", description: \"Publish it all\", value: \"All Content\" }])\r\n        // -C allows git to be run from any directory\r\n        switch (input) {\r\n            case \"Website Content\":\r\n                output.push(await exec(`git -C \"${website_content}\" add -A`))\r\n                output.push(await exec(`git -C \"${website_content}\" commit -m \"Publish content: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_content}\" push`))\r\n                output.push(await exec(`git -C \"${website_dir}\" submodule update --remote`))\r\n                output.push(await exec(`git -C \"${website_dir}\" add dschapman-com-content`))\r\n                output.push(await exec(`git -C \"${website_dir}\" commit -m \"Publish content: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_dir}\" push`))\r\n                break;\r\n            case \"Website Notes\":\r\n                output.push(await exec(`git -C \"${website_notes}\" add -A`))\r\n                output.push(await exec(`git -C \"${website_notes}\" commit -m \"Publish content: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_notes}\" push`))\r\n                output.push(await exec(`git -C \"${website_dir}\" submodule update --remote`))\r\n                output.push(await exec(`git -C \"${website_dir}\" add My-notes`))\r\n                output.push(await exec(`git -C \"${website_dir}\" commit -m \"Publish notes: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_dir}\" push`))\r\n                break;\r\n            case \"All\":\r\n                output.push(await exec(`git -C \"${website_content}\" add -A`))\r\n                output.push(await exec(`git -C \"${website_content}\" commit -m \"Publish content: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_content}\" push`))\r\n                output.push(await exec(`git -C \"${website_notes}\" add -A`))\r\n                output.push(await exec(`git -C \"${website_notes}\" commit -m \"Publish content: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_notes}\" push`))\r\n                output.push(await exec(`git -C \"${website_dir}\" submodule update --remote`))\r\n                output.push(await exec(`git -C \"${website_dir}\" add My-notes dschapman-com-content`))\r\n                output.push(await exec(`git -C \"${website_dir}\" commit -m \"Publish all content: ${today.toString()}\"`))\r\n                output.push(await exec(`git -C \"${website_dir}\" push`))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        break;\r\n    case \"VSCode\":\r\n        exec(`code \"${website_dir}\"`);\r\n        break;\r\n    case \"Edit Website Content\":\r\n        input = await arg(\"Open\", [{ name: \"Articles, Poems, and Blog Posts\", value: \"content\" }, { name: \"Digital Notes\", value: \"notes\" }])\r\n        switch (input) {\r\n            case \"content\":\r\n                console.log(\"Content\")\r\n                browse(`\"obsidian://open?vault=dschapman-com-content\"`)\r\n                break;\r\n            case \"notes\":\r\n                console.log(\"Notes\")\r\n                browse(`\"obsidian://open?vault=My%20notes\"`)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n       break;\r\n    case \"Open Website\":\r\n        browse(\"https://dschapman.com\")\r\n        break;\r\n    case \"Github\":\r\n        browse(\"https://github.com/dschapman/dschapman-com\")\r\n        break;\r\n    default:\r\n        break;\r\n}\r\noutput.forEach(item => {\r\n    if (item.stdout)\r\n        console.log(item.stdout)\r\n})\r\n\r\n\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Watch slack status","description":"","avatar":"https://avatars.githubusercontent.com/u/12891645?u=eb9ed13c1bc9eeccf0b87ddbeea8778c7c32c05a&v=4","user":"JoepKockelkorn","author":"Joep Kockelkorn","twitter":"JoepKockelkorn","discussion":"https://github.com/johnlindquist/kit/discussions/748","url":"https://gist.githubusercontent.com/JoepKockelkorn/cc1dccf0cdc03bbca494d6afe1012124/raw/a122668ebc1471c329a1987329e1a98504dfde0c/slack-status.js","title":"Slack status in a refreshing widget","command":"slack-status-in-a-refreshing-widget","content":"\r\n[Open slack-status in Script Kit](https://scriptkit.com/api/new?name=slack-status&url=https://gist.githubusercontent.com/JoepKockelkorn/cc1dccf0cdc03bbca494d6afe1012124/raw/a122668ebc1471c329a1987329e1a98504dfde0c/slack-status.js\")\r\n\r\n```js\r\n// Menu: Watch slack status\r\n// Description: Open a refreshing widget which shows any slack incidents\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nconst intervalInMinutes = 2;\r\nconst intervalInMs = 2 * 60 * 1000;\r\nconst { incidentTitle, updatedFormatted, nextUpdateFormatted } = await getData(\r\n  intervalInMs\r\n);\r\n\r\nconst w = await widget(\r\n  `\r\n    <div class=\"p-4\">\r\n        <h1>Slack status</h1>\r\n        <h2>{{ incidentTitle }}</h2>\r\n        <p>Updated at: {{ updatedFormatted }}</p>\r\n        <p>Next update: {{ nextUpdateFormatted }}</p>\r\n    </div>\r\n`,\r\n  {\r\n    alwaysOnTop: true,\r\n    state: { incidentTitle, updatedFormatted, nextUpdateFormatted },\r\n  }\r\n);\r\n\r\nconst interval = setInterval(async () => {\r\n  const state = await getData(intervalInMs);\r\n  w.setState(state);\r\n}, intervalInMs);\r\n\r\nw.onClose(() => clearInterval(interval));\r\n\r\nasync function getData(intervalInMs) {\r\n  const { active_incidents: incidents } = (\r\n    await get(\"https://status.slack.com/api/v2.0.0/current\")\r\n  ).data;\r\n  const updated = new Date();\r\n  const updatedFormatted = updated.toLocaleTimeString(\"nl-NL\");\r\n  const nextUpdate = new Date(updated);\r\n  nextUpdate.setMilliseconds(updated.getMilliseconds() + intervalInMs);\r\n  const nextUpdateFormatted = nextUpdate.toLocaleTimeString(\"nl-NL\");\r\n  const incidentTitle = incidents[0]?.title\r\n    ? `⚠️ ${incidents[0].title}`\r\n    : \"All good in the hood 🤘\";\r\n  return { incidentTitle, updatedFormatted, nextUpdateFormatted };\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Emoji picker","shortcut":"option cmd e","twitter":"vjthlk","author":"Vojta Holik","avatar":"https://avatars.githubusercontent.com/u/25487857?u=1c81cf15334c751c49f61fe7e0e84b0618eb0e0e&v=4","user":"vojtaholik","discussion":"https://github.com/johnlindquist/kit/discussions/733","url":"https://gist.githubusercontent.com/vojtaholik/f097a40be15c6b21d5f8435120fda371/raw/daa43bc4320a8f1846f4f2a18d0e99507f9f45b5/emoji.js","title":"Emoji picker","command":"emoji-picker","content":"\r\n[Open emoji picker in Script Kit](https://scriptkit.com/api/new?name=emoji&url=https://gist.githubusercontent.com/vojtaholik/f097a40be15c6b21d5f8435120fda371/raw/daa43bc4320a8f1846f4f2a18d0e99507f9f45b5/emoji.js\")\r\n\r\n```js\r\n// Menu: Emoji picker\r\n// Shortcut: option cmd e\r\n// Twitter: @vjthlk\r\n// Author: Vojta Holik\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst { emojis, write } = await db(\"emojis-db\", {\r\n  emojis: [],\r\n});\r\n\r\nlet emojiPath = tmpPath(`emoji.json`);\r\n\r\nif (!(await isFile(emojiPath))) {\r\n  await download(\r\n    `https://raw.githubusercontent.com/github/gemoji/master/db/emoji.json`,\r\n    tmpPath()\r\n  );\r\n}\r\n\r\nlet emojiJson = await readJson(emojiPath);\r\n\r\nlet emojiJsonHistory = emojis.map((e) => {\r\n  return _.find(emojiJson, { emoji: e });\r\n});\r\n\r\nconst mode = (arr) =>\r\n  arr.reduce(\r\n    (a, b, i, arr) =>\r\n      arr.filter((v) => v === a).length >= arr.filter((v) => v === b).length\r\n        ? a\r\n        : b,\r\n    null\r\n  );\r\n\r\nlet mostUsed = mode(emojiJsonHistory);\r\n\r\nlet history = _.uniq(\r\n  [...emojiJsonHistory]\r\n    .filter((e) => e.description !== mostUsed.description)\r\n    .reverse()\r\n);\r\n\r\nlet emojiList = [\r\n  ...history.slice(0, 1),\r\n  mostUsed,\r\n  ...history.slice(1, 5),\r\n  ...emojiJson.filter((e) => {\r\n    return !history.includes(e);\r\n  }),\r\n];\r\n\r\nlet selectedEmoji = await arg(\r\n  \"Search\",\r\n  emojiList.map((e) => {\r\n    return {\r\n      name: `${e.emoji} ${e.description}`,\r\n      description: `${e.category} ${!_.isEmpty(e.tags) ? \"-\" : \"\"} ${e.tags.map(\r\n        (tag) => ` ${tag}`\r\n      )}`,\r\n      value: e.emoji,\r\n      shortcode: e.tags.map((tag) => ` ${tag}`),\r\n    };\r\n  })\r\n);\r\n\r\nemojis.push(!selectedEmoji.name && selectedEmoji);\r\nawait write();\r\n\r\nawait setSelectedText(selectedEmoji);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Battery Monitor","description":"","author":"Richard Dyce","twitter":null,"schedule":"0,15,20,45 5-22 * * *","avatar":"https://avatars.githubusercontent.com/u/1810481?u=f54707fef953fe4447b6860d598793836675c027&v=4","user":"dickiedyce","discussion":"https://github.com/johnlindquist/kit/discussions/731","url":"https://gist.githubusercontent.com/johnlindquist/3c21deb6d0d9dd9d06d8268fdd4baa30/raw/5837f8365aab810906323fbd0430e32f544ee7db/monitor-battery.js","title":"Check if AC should be disconnected? (Poorman's AlDente)","command":"check-if-ac-should-be-disconnected-poormans-aldente","content":"I have a MacBook Retina, 12-inch, 2017, which makes using a tool like AlDente (for keeping the battery in good condition) impossible.\r\n\r\nThis is a scheduled script that notifies me to manually unplug when I reach 80% charge, and again manually plug it back in when the charge drops to 40%.\r\n\r\n[Open monitor-battery in Script Kit](https://scriptkit.com/api/new?name=monitor-battery&url=https://gist.githubusercontent.com/johnlindquist/3c21deb6d0d9dd9d06d8268fdd4baa30/raw/5837f8365aab810906323fbd0430e32f544ee7db/monitor-battery.js\")\r\n\r\n```js\r\n// Menu: Battery Monitor\r\n// Description: Check if AC should be disconnected? Poorman's AlDente\r\n// Author: Richard Dyce\r\n// Twitter: @dickiedyce\r\n// schedule: 0,15,20,45 5-22 * * *\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst result = await exec(`pmset -g batt`)\r\n\r\nconst charge = 1 * result.stdout.match(/(\\d+)\\%/)[1]\r\nconst state = result.stdout.match(/(discharging|charging)/)[0]\r\nconst source = result.stdout.match(/(Battery Power|AC Power)/)[0]\r\n\r\nif(charge > 80 && source == 'AC Power' ) {\r\n    notify(`UNPLUG! The laptop is ${state} from ${source}, at ${charge}%`)\r\n} else if (charge < 40 && source == 'Battery Power') {\r\n    notify(`PLUG-IN! The laptop is ${state} from ${source}, at ${charge}%`)\r\n} else {\r\n   // notify(`The laptop is ${state} from ${source}, at ${charge}%`)\r\n}\r\n```\r\n\r\n\r\n_Future plans: I have a Wemo WiFI Smart Plug on order, so if I can't stop the battery charging, I should be able to turn the charger off at the wall. ;-)_","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"simpsons","description":"","author":"Daniel O.","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/2836281?v=4","user":"denieler","discussion":"https://github.com/johnlindquist/kit/discussions/720","url":"","title":"New episode of Simpsons everyday","command":"new-episode-of-simpsons-everyday","content":"If you are fun of Simpsons you can get everyday a new episode 😃 \r\n\r\n```js\r\n// Name: simpsons\r\n// Description: Show next episode of Simpsons\r\n// Author: Daniel Ostapenko\r\n// Twitter: @denieler\r\n\r\nimport '@johnlindquist/kit'\r\n\r\nconst simpsonsDB = await db('simpsons', {\r\n    season: 7,\r\n    episode: 0,\r\n    episodesData: []\r\n})\r\n\r\nif (!simpsonsDB.episodesData.length) {\r\n    const wtf = await npm('wtf_wikipedia')\r\n    const doc = await wtf.fetch('List of The Simpsons episodes')\r\n    let episodes = doc.section('Episodes')\r\n    let episodesText = episodes.text()\r\n\r\n    const episodesRegexp = /episodes(\\d*) = (\\d*)/g\r\n    let episodesData = episodesText.match(episodesRegexp)\r\n\r\n    episodesData = episodesData.map(x => {\r\n        const [_season, _numberOfEpisodes] = x // episodes1 = 13\r\n            .replace('episodes', '') // '1 = 13'\r\n            .split(' = ') // ['1', '13']\r\n        \r\n        return {\r\n            season: parseInt(_season),\r\n            numberOfEpisodes: parseInt(_numberOfEpisodes)\r\n        }\r\n    })    \r\n\r\n    simpsonsDB.episodesData = episodesData\r\n    await simpsonsDB.write()\r\n}\r\n\r\nlet season = simpsonsDB.season\r\nlet episode = simpsonsDB.episode\r\n\r\nconst seasonEpisodes = simpsonsDB.episodesData.find(x => x.season === season)\r\n\r\nif (episode + 1 > seasonEpisodes.numberOfEpisodes) {\r\n    const seasonNumbers = simpsonsDB.episodesData\r\n        .map(x => x.season)\r\n    const maxSeason = seasonNumbers[seasonNumbers.length - 1]\r\n    if (season + 1 > maxSeason) {\r\n        season = 7\r\n        episode = 1\r\n    } else {\r\n        season = season + 1\r\n        episode = 1\r\n    }\r\n} else {\r\n    episode = episode + 1\r\n}\r\n\r\nsimpsonsDB.season = season\r\nsimpsonsDB.episode = episode\r\n\r\nawait simpsonsDB.write()\r\n\r\nconst episodeUrl = `https://www.wcofun.com/the-simpsons-season-${season}-episode-${episode}`\r\nbrowse(episodeUrl)\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Download Chrome Video","description":"","author":"John Lindquist","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","discussion":"https://github.com/johnlindquist/kit/discussions/718","url":"","title":"Download Chrome Video","command":"download-chrome-video","content":"\r\n\r\nhttps://user-images.githubusercontent.com/36073/152449075-40781148-9ad5-4b0e-a650-01d8d9b41d69.mp4\r\n\r\n\r\n\r\n\r\n[Open download-chrome-video in Script Kit](https://scriptkit.com/api/new?name=download-chrome-video&url=https://gist.githubusercontent.com/johnlindquist/b5db801d9a318a834261914067c42790/raw/a14e0f241f39ab8c20613b08b1547c92a60400e6/download-chrome-video.ts\")\r\n\r\n```js\r\n// Name: Download Chrome Video\r\n// Description: Downloads the video of the current Chrome page\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n// REQUIRES https://formulae.brew.sh/formula/youtube-dl\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport Stream from \"stream\"\r\n\r\nlet writeableStream = new Stream.Writable()\r\nwriteableStream._write = (chunk, encoding, next) => {\r\n    console.log(chunk.toString().trim())\r\n    next()\r\n}\r\n\r\ncd(await path())\r\n\r\nlet url = await getActiveTab()\r\n\r\nsetChoices(null)\r\nsetDescription(`Downloading ${url}...`)\r\nsetInput(``)\r\nsetPlaceholder(`Please wait...`)\r\n\r\nexec(`/opt/homebrew/bin/youtube-dl ${url}`, {all: true}).all.pipe(writeableStream)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Homebrew Search","description":"","author":"John Lindquist","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","discussion":"https://github.com/johnlindquist/kit/discussions/716","url":"","title":"Homebrew Search and Install","command":"homebrew-search-and-install","content":"\r\n[Open homebrew in Script Kit](https://scriptkit.com/api/new?name=homebrew&url=https://gist.githubusercontent.com/johnlindquist/a83dd7c4463ac6869666108ec2c3137b/raw/0072c2e370e91ad6968f879516985f72fea92d81/homebrew.ts\")\r\n\r\n```js\r\n// Name: Homebrew Search\r\n// Description: Search and Install Homebrew Formulae\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet response = await get(`https://formulae.brew.sh/api/formula.json`)\r\n\r\nlet homebrewChoices = response.data.map(({name, tap}) => {\r\n    return {\r\n        name,\r\n        value: name,\r\n        description: tap,\r\n        preview: async ()=> {\r\n            let response = await get(`https://formulae.brew.sh/api/formula/${name}.json`)\r\n            let {full_name, tap, desc, homepage, versions, urls} = response.data\r\n            return md(`## ${full_name}\r\n### ${tap}\r\n\r\n${desc}\r\n[${homepage}](${homepage})\r\n\r\n* Version - ${versions?.stable}\r\n* URLs - ${urls?.stable?.url}\r\n\r\n\r\n `)\r\n        }\r\n\r\n    }\r\n})\r\n\r\nlet formula = await arg(\"Search homebrew\", homebrewChoices)\r\n\r\nlet bins = await readdir(`/opt/homebrew/bin`)\r\n\r\nlet installed = bins.includes(formula)\r\n\r\nif(installed){\r\n    setDescription(`${formula} already installed`)\r\n}\r\n\r\nlet message = `${installed ? `Uninstall` : `Install`} ${formula}?`\r\n\r\nlet confirm = await arg(message, [\r\n    {name: `[y]es`, value: true},\r\n    {name: `[n]o`, value: false}\r\n])\r\n\r\nsetChoices(null)\r\nsetPlaceholder(`Please wait...`)\r\n\r\n\r\nif(confirm){\r\n    setDescription(`${installed ? `Uninstalling` : `Installing`} ${formula}`)\r\n    await exec(`/opt/homebrew/bin/brew ${installed ? `uninstall` : `install`} ${formula}`)\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Heroku Status","description":"","author":"Jacob Swain","twitter":"jacobswain","avatar":"https://avatars.githubusercontent.com/u/1879320?u=072338233a3b35207379493f17593a09a77548c8&v=4","user":"jacobswain","discussion":"https://github.com/johnlindquist/kit/discussions/712","url":"","title":"Heroku Status","command":"heroku-status","content":"## Display the details and status of Heroku Apps. \r\n\r\nInstall [heroku-status](\r\nhttps://scriptkit.com/api/new?name=heroku-status&url=https://gist.githubusercontent.com/jacobswain/967b469fa164ad4ba5e97669a8e1f007/raw/978ac0f82b367fd5619628b253bd3822d3bb507f/heroku-status.js\r\n)\r\n\r\n\r\n### Generate a Heroku API Key: \r\n\r\n- Install the [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli#download-and-install) \r\n- Run `heroku login`\r\n- Run `heroku authorizations:create`\r\n- Enter the token into [ScriptKit](https://www.scriptkit.com/) when prompted\r\n\r\n### Script\r\n\r\n```javascript \r\n// Name: Heroku Status\r\n// Description: Displays the status of Heroku apps\r\n// Author: Jacob  Swain\r\n// Twitter: @jacobswain\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst Heroku = await npm(\"heroku-client\");\r\nlet token = await env(\"HEROKU_API_TOKEN\");\r\n\r\nconst heroku = new Heroku({ token });\r\n\r\nconst preview = ({ name, stack, web_url, git_url, updated_at, status }) =>\r\n  md(`\r\n## ${name}\r\n- Updated: ${updated_at}\r\n- Status: ${status}  \r\n- Stack: ${stack}\r\n\r\n### Links\r\n${git_url ? `- [git](${git_url})` : \"\"}\r\n${web_url ? `- [web](${web_url})` : \"\"}\r\n    `);\r\n\r\nconst byDateDesc = (a, b) => {\r\n  if (a.created_at < b.created_at) {\r\n    return 1;\r\n  }\r\n  if (a.created_at > b.created_at) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst apps = await heroku.get(\"/apps\").then((apps) =>\r\n  apps.map(({ id, name, web_url, git_url, updated_at }) => ({\r\n    name,\r\n    description: web_url,\r\n    value: `https://dashboard.heroku.com/apps/${name}`,\r\n    preview: async () => {\r\n      const setups = await heroku\r\n        .get(`/apps/${id}/builds`)\r\n        .then((builds) => builds.sort(byDateDesc));\r\n\r\n      if (!setups || !setups.length) return md(`No builds found`);\r\n\r\n      return preview({ ...setups[0], name, web_url, git_url });\r\n    },\r\n  }))\r\n);\r\n\r\nlet url = await arg(\"Select Heroku App:\", apps);\r\n\r\nawait $`open ${url}`;\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Hex Elixir Package Search","description":"","author":"Joe Martinez","twitter":"capitalist","originalAuthor":"Jacob A. Swain","originalTwitter":"@jacobswain","avatar":"https://avatars.githubusercontent.com/u/1639?v=4","user":"capitalist","discussion":"https://github.com/johnlindquist/kit/discussions/709","url":"","title":"Hex Elixir Package Search","command":"hex-elixir-package-search","content":"I modified Jacob Swain's NPM Search to search for elixir packages on Hex. I'm not sure the proper way to do that attributution so I added `OriginalAuthor`\r\n\r\n```js\r\n// Menu: Hex Elixir Package Search\r\n// Description: Search Hex for Elixir packages\r\n// Author: Joe Martinez\r\n// Twitter: @capitalist\r\n// I based this script on the NPM search done by Jacob Swain\r\n// OriginalAuthor: Jacob A. Swain\r\n// OriginalTwitter: @jacobswain\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst baseUrl = \"https://hex.pm/api/packages?sort=downloads&search=\";\r\nconst toData = (res) => res.data;\r\n\r\nconst term = await arg(\"Package name:\");\r\n\r\nlet preview = async ({ name, description, version, links }) =>\r\n  await md(`\r\n  ## ${name}\r\n  - Description: ${description}  \r\n  - Version: ${version}  \r\n\r\n  #### Links\r\n  ${links.docs ? `- [Docs](${links.docs})` : \"\"}\r\n  ${links.Changelog ? `- [Changelog](${links.Changelog})` : \"\"}\r\n  ${links.GitHub ? `- [GitHub](${links.GitHub})` : \"\"}\r\n`);\r\n\r\nconst results = await get(`${baseUrl}${term}`)\r\n  .then(toData)\r\n  .then((results) =>\r\n    results.map(({ name, meta, latest_version, html_url, docs_html_url }) => ({\r\n      name,\r\n      description: meta.description,\r\n      value: html_url,\r\n      preview: async () =>\r\n        preview({\r\n          name,\r\n          description: meta.description,\r\n          version: latest_version,\r\n          links: { docs: docs_html_url, ...meta.links },\r\n        }),\r\n    }))\r\n  );\r\n\r\nlet url = await arg(\"Select package:\", results);\r\n\r\nawait $`open ${url}`;\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"NPM Search","description":"","author":"Jacob Swain","twitter":"jacobswain","email":"jacobswain@gmail.com","avatar":"https://avatars.githubusercontent.com/u/1879320?u=072338233a3b35207379493f17593a09a77548c8&v=4","user":"jacobswain","discussion":"https://github.com/johnlindquist/kit/discussions/707","url":"https://gist.githubusercontent.com/jacobswain/5f111af4d0d2684d4873702340b4f42a/raw/9abb698673b9ed68399014fcda0f5436f2f26fa6/search-npm.js","title":"NPM Search Script with Preview","command":"npm-search-script-with-preview","content":"Here's a script to display search results from [npm](https://www.npmjs.com/) along with a preview of the package details and associated links. \r\n\r\n[Install search-npm](https://scriptkit.com/api/new?name=search-npm&url=https://gist.githubusercontent.com/jacobswain/5f111af4d0d2684d4873702340b4f42a/raw/9abb698673b9ed68399014fcda0f5436f2f26fa6/search-npm.js)\r\n\r\n\r\n\r\n```javascript\r\n// Menu: NPM Search\r\n// Description: Search NPM for packages\r\n// Author: Jacob A. Swain\r\n// Twitter: @jacobswain\r\n// Email: jacobswain@gmail.com\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst baseUrl = \"https://www.npmjs.com/search/suggestions?q=\";\r\nconst toData = (res) => res.data;\r\n\r\nconst term = await arg(\"Package name:\");\r\n\r\nlet preview = async ({ name, description, version, links }) =>\r\n  await md(`\r\n  ## ${name}\r\n  - Description: ${description}  \r\n  - Version: ${version}  \r\n\r\n  #### Links\r\n  ${links.npm ? `- [npm](${links.npm})` : \"\"}\r\n  ${links.repository ? `- [repository](${links.repository})` : \"\"}\r\n  ${links.repository ? `- [homepage](${links.homepage})` : \"\"}\r\n`);\r\n\r\nconst results = await get(`${baseUrl}${term}`)\r\n  .then(toData)\r\n  .then((results) =>\r\n    results.map(({ name, description, version, links }) => ({\r\n      name,\r\n      description,\r\n      value: links.npm,\r\n      preview: async () => preview({ name, description, version, links }),\r\n    }))\r\n  );\r\n\r\nlet url = await arg(\"Select package:\", results);\r\n\r\nawait $`open ${url}`;\r\n```\r\n\r\n\r\nHere's a screenshot:\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/1879320/151686953-66bf90b5-850d-45c9-96cf-68c688c7cd80.png)\r\n\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Toggle Desktop Icons","author":"John Lindquist","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","discussion":"https://github.com/johnlindquist/kit/discussions/699","url":"","title":"Toggle Desktop Icons","command":"toggle-desktop-icons","content":"\r\n[Open toggle-desktop-icons in Script Kit](https://scriptkit.com/api/new?name=toggle-desktop-icons&url=https://gist.githubusercontent.com/johnlindquist/d6887def27a998c1facd9430b725f32b/raw/af1f6a97e347270f4ae49661738aaa58052bce22/toggle-desktop-icons.ts\")\r\n\r\n```js\r\n// Name: Toggle Desktop Icons\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet visible = true\r\n\r\ntry{\r\n    // This command fails if icons are hidden\r\n    let {stdout} = await exec(`defaults read com.apple.finder CreateDesktop`)\r\n    visible = stdout === 1\r\n}catch{}\r\n\r\nlet command = `defaults ${visible ? \"write\" : \"delete\"} com.apple.finder CreateDesktop ${visible ? \"-bool FALSE\" : \"\"};killall Finder`\r\n\r\nawait exec(command)\r\n\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"shortcut":"command option b","menu":"Bible Search 🔍","description":"","author":"PRAMOD A JINGADE","twitter":"avj2352","avatar":"https://avatars.githubusercontent.com/u/6997529?u=3d91e8ea523b78a844f1f3974975b34684e4bc05&v=4","user":"avj2352","discussion":"https://github.com/johnlindquist/kit/discussions/698","url":"","title":"Search Scriptures from the Bible","command":"search-scriptures-from-the-bible","content":"Use Bible API to search for a scripture and copy it to clipboard\r\n\r\n```javascript\r\n// Shortcut: command option b\r\n// Menu: Bible Search 🔍\r\n// Description: 📖 Launch scripture based on input book, chapter, verse\r\n// Author: Pramod Jingade\r\n// Twitter: @avj2352\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\n/**\r\n * Bible API key credentials.\r\n */\r\nconst bibleAPIHeaders = {\r\n    'x-rapidapi-host': 'ajith-holy-bible.p.rapidapi.com',\r\n    'x-rapidapi-key': '08fb250872msh61199006cfd5075p1455c9jsn3e783f6773e5'\r\n};\r\n\r\n/**\r\n * Async API call to fetch bible Verse\r\n * @param {*} verses \r\n * @returns \r\n */\r\nasync function getBibleVerse(book, chapter, verse) {\r\n    const query = `https://ajith-holy-bible.p.rapidapi.com/GetVerseOfaChapter?Book=${book}&Chapter=${chapter}&Verse=${verse}`;\r\n    return await get(query, {\r\n        headers: {\r\n            ...bibleAPIHeaders\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Function to validate verses\r\n * @param {string} verses \r\n * @returns [] numbers\r\n */\r\nfunction parseVerses(verses) {\r\n    if (Boolean(verses) && verses.includes('-')) {\r\n        const list = [];\r\n        const lowEnd = Number(verses.split('-')[0]);\r\n        const highEnd = Number(verses.split('-')[1]);\r\n        for (let i = lowEnd; i <= highEnd; i++) {\r\n            list.push(i);\r\n        }\r\n        return list;\r\n    } else if (Boolean(verses) && verses.includes(',')) {\r\n        const list = verses.split(',').map(item => Number(item));\r\n        return list;\r\n    } else if (Boolean(verses)) {\r\n        return [Number(verses)];\r\n    } else {\r\n        throw new Error;\r\n    }\r\n}\r\n\r\n/**\r\n * Function to validate input string\r\n * @param {string} input\r\n * @returns [{chapter: string, verse: string}]\r\n */\r\nfunction parseScripture(input) {\r\n    // Validate edge cases\r\n    const text = input.trim();\r\n    if (text === '') throw new Error;\r\n    else if (!text.includes(':')) throw new Error;\r\n    let chapter = text.split(':')[0];\r\n    const verses = text.split(':')[1];\r\n    if (!chapter || !verses || chapter === ' ' || verses === '') throw new Error;\r\n    // Parse Verses\r\n    chapter = Number(chapter);\r\n    const verseList = parseVerses(verses);\r\n    // return object\r\n    if (Boolean(verseList.length > 0)) {\r\n        return verseList.map(item => ({\r\n            chapter,\r\n            verse: item\r\n        }));\r\n    } else return [];\r\n}\r\n\r\n/**\r\n * Return a list of scripture response with End Search or Copy to clipboard option\r\n * @param {string} book \r\n * @param {Object} versObj \r\n * @param {string} chapterVerseString \r\n * @returns [{name, description, preview, value}]\r\n */\r\nasync function getScriptureResponseList(book, versObj, chapterVerseString) {\r\n    // Promise.all(apiCallList).then(response => inspect(response));\r\n    // doesn't work\r\n    // inspect(versObj);\r\n    let textList = [];\r\n    for (let i = 0; i < versObj.length; i++) {\r\n        const api = await getBibleVerse(book, versObj[i].chapter, versObj[i].verse);\r\n        textList.push(`${versObj[i].verse}.${api.data.Output}`);\r\n    }\r\n    const textString = textList.join('\\n');\r\n    return [{\r\n            name: `${book} ${chapterVerseString}`,\r\n            description: `${textString.substring(0,100)}...`,\r\n            preview: textString,\r\n            value: `# ${book} ${chapterVerseString}\\n\\n${textString}`\r\n        },        \r\n        {\r\n            name: `End Search ?`,\r\n            description: ``,\r\n            value: 'n'\r\n        }\r\n    ];\r\n}\r\n\r\n/**\r\n * Main Function\r\n * Repeatedly execute\r\n */\r\nwhile (true) {\r\n    try {\r\n        const book = await arg(\"Which Book?\", prepBookList());\r\n        const chapterVerseString = await arg(\"Enter chapter verse [ch:verse]\");\r\n        if (chapterVerseString === '') throw new Error;\r\n        // get scripture verseinput list\r\n        const versObj = parseScripture(chapterVerseString);\r\n        // call api and get bible text\r\n        const textResponse = await arg(\r\n                        `Scripture (NIV)...`, await getScriptureResponseList(book, versObj, chapterVerseString));\r\n        if (textResponse === \"n\") break;        \r\n        else copy(textResponse);\r\n    } catch (err) {\r\n        const yesOrNo = await arg(`📖 Unable to find scripture, try again [y/n]?`);\r\n        if (yesOrNo !== \"y\") break;\r\n    }\r\n}\r\n\r\n/**\r\n * Prepopulate Books in the Bible: 66 books\r\n * @returns [{name: Book, value: Book description, with API book param value}]\r\n */\r\nfunction prepBookList() {\r\n    return [{\r\n            name: \"📜 Genesis\",\r\n            description: `Old Testament - Frist book of the Pentateuch. \r\n                          Describes the creation; history of the old world`,\r\n            value: \"Genesis\"\r\n        },\r\n        {\r\n            name: \"📜 Exodus\",\r\n            description: `Old Testament - Second book of the Pentateuch. \r\n                          Israel's departure from Egypt; the giving of the law; the tabernacle.`,\r\n            value: \"Exodus\"\r\n        },\r\n        {\r\n            name: \"📜 Leviticus\",\r\n            description: `Old Testament - Third book of the Pentateuch.\r\n                          The ceremonial law.`,\r\n            value: \"Leviticus\"\r\n        },\r\n        {\r\n            name: \"📜 Numbers\",\r\n            description: `Old Testament - Fourth book of the Pentateuch.\r\n                          The census of the people; the story of the wanderings in the wilderness.`,\r\n            value: \"Numbers\"\r\n        },\r\n        {\r\n            name: \"📜 Deuteronomy\",\r\n            description: `Old Testament - Fifth book of the Pentateuch.\r\n                          The law rehearsed; the death of Moses.`,\r\n            value: \"Deuteronomy\"\r\n        },\r\n        {\r\n            name: \"📜 Joshua\",\r\n            description: `Old Testament - The story of the conquest and partition of Canaan.`,\r\n            value: \"Joshua\"\r\n        },\r\n        {\r\n            name: \"📜 Judges\",\r\n            description: `Old Testament - The history of the nation from Joshua to Samson.`,\r\n            value: \"Judges\"\r\n        },\r\n        {\r\n            name: \"📜 Ruth\",\r\n            description: `Old Testament - The story of the ancestors of the royal family of Judah.`,\r\n            value: \"Ruth\"\r\n        },\r\n        {\r\n            name: \"📜 1 Samuel\",\r\n            description: `Old Testament - The story of the nation during the \r\n                            judgeship of Samuel and the reign of Saul.`,\r\n            value: \"1 Samuel\"\r\n        },\r\n        {\r\n            name: \"📜 2 Samuel\",\r\n            description: `Old Testament - Story of the reign of David.`,\r\n            value: \"2 Samuel\"\r\n        },\r\n        {\r\n            name: \"📜 1 Kings\",\r\n            description: `Old Testament - exclusive of the reigns of Saul and David.`,\r\n            value: \"1 Kings\"\r\n        },\r\n        {\r\n            name: \"📜 2 Kings\",\r\n            description: `Old Testament - they comprehend the whole time of the Israelitish monarchy.`,\r\n            value: \"2 Kings\"\r\n        },\r\n        {\r\n            name: \"📜 1 Chronicles\",\r\n            description: `Old Testament - they are the official histories of the kingdoms of Judah & Israel.`,\r\n            value: \"1 Chronicles\"\r\n        },\r\n        {\r\n            name: \"📜 2 Chronicles\",\r\n            description: `Old Testament - they are the official histories of the kingdoms of Judah & Israel.`,\r\n            value: \"2 Chronicles\"\r\n        },\r\n        {\r\n            name: \"📜 Ezra\",\r\n            description: `Old Testament - The story of the return of the Jews from the Babylonish captivity, \r\n                            and of the rebuilding of the temple.`,\r\n            value: \"Ezra\"\r\n        },\r\n        {\r\n            name: \"📜 Nehemiah\",\r\n            description: `Old Testament - A further account of the rebuilding of the temple and city, \r\n                            and of the obstacles encountered and overcome.`,\r\n            value: \"Nehemiah\"\r\n        },\r\n        {\r\n            name: \"📜 Esther\",\r\n            description: `Old Testament - The story of a Jewess who becomes queen of Persia.`,\r\n            value: \"Esther\"\r\n        },\r\n        {\r\n            name: \"📜 Job\",\r\n            description: `Old Testament - The story of the trials and patience of a holy man of Edom.`,\r\n            value: \"Job\"\r\n        },\r\n        {\r\n            name: \"📜 Psalms\",\r\n            description: `Old Testament - A collection of sacred poems intended \r\n                            for use in the worship of Jehovah. \r\n                            Chiefly the productions of David.`,\r\n            value: \"Psalms\"\r\n        },\r\n        {\r\n            name: \"📜 Proverbs\",\r\n            description: `Old Testament - The wise sayings of Solomon.`,\r\n            value: \"Proverbs\"\r\n        },\r\n        {\r\n            name: \"📜 Ecclesiastes\",\r\n            description: `Old Testament - A poem respecting the vanity of earthly things.`,\r\n            value: \"Ecclesiastes\"\r\n        },\r\n        {\r\n            name: \"📜 Song of Solomon\",\r\n            description: `Old Testament - An allegory relating to the church.`,\r\n            value: \"Song of Solomon\"\r\n        },\r\n        {\r\n            name: \"📜 Isaiah\",\r\n            description: `Old Testament - Prophecies respecting Christ and his kingdom.`,\r\n            value: \"Isaiah\"\r\n        },\r\n        {\r\n            name: \"📜 Jeremiah\",\r\n            description: `Old Testament - Prophecies announcing the captivity of Judah, its sufferings, \r\n                            and the final overthrow of its enemies.`,\r\n            value: \"Jeremiah\"\r\n        },\r\n        {\r\n            name: \"📜 Lamentations\",\r\n            description: `Old Testament - The utterance of Jeremiah's sorrow upon the capture of \r\n                            Jerusalem and the destruction of the temple.`,\r\n            value: \"Lamentations\"\r\n        },\r\n        {\r\n            name: \"📜 Ezekiel\",\r\n            description: `Old Testament - Messages of warning and comfort to the Jews in their captivity.`,\r\n            value: \"Ezekiel\"\r\n        },\r\n        {\r\n            name: \"📜 Daniel\",\r\n            description: `Old Testament - A narrative of some of the occurrences of \r\n                            the captivity, and a series of prophecies concerning Christ.`,\r\n            value: \"Daniel\"\r\n        },\r\n        {\r\n            name: \"📜 Hosea\",\r\n            description: `Old Testament - Prophecies relating to Christ and the latter days.`,\r\n            value: \"Hosea\"\r\n        },\r\n        {\r\n            name: \"📜 Joel\",\r\n            description: `Old Testament - Prediction of woes upon Judah,`,\r\n            value: \"Joel\"\r\n        },\r\n        {\r\n            name: \"📜 Amos\",\r\n            description: `Old Testament - Prediction that Israel and other neighboring \r\n                        nations will be punished by conquerors from the north`,\r\n            value: \"Amos\"\r\n        },\r\n        {\r\n            name: \"📜 Obadiah\",\r\n            description: `Old Testament - Prediction of the desolation of Edom.`,\r\n            value: \"Obadiah\"\r\n        },\r\n        {\r\n            name: \"📜 Jonah\",\r\n            description: `Old Testament - Prophecies relating to Nineveh.`,\r\n            value: \"Jonah\"\r\n        },\r\n        {\r\n            name: \"📜 Micah\",\r\n            description: `Old Testament - Predictions relating to the invasions of \r\n                            Shalmaneser and Sennacherib, the Babylonish captivity.`,\r\n            value: \"Micah\"\r\n        },\r\n        {\r\n            name: \"📜 Nahum\",\r\n            description: `Old Testament - Prediction of the downfall of Assyria.`,\r\n            value: \"Nahum\"\r\n        },\r\n        {\r\n            name: \"📜 Habakkuk\",\r\n            description: `Old Testament - A prediction of the doom of the Chaldeans.`,\r\n            value: \"Habakkuk\"\r\n        },\r\n        {\r\n            name: \"📜 Zephaniah\",\r\n            description: `Old Testament - A prediction of the overthrow of Judah for \r\n                            its idolatry and wickedness.`,\r\n            value: \"Zephaniah\"\r\n        },\r\n        {\r\n            name: \"📜 Haggai\",\r\n            description: `Old Testament - Prophecies concerning the rebuilding of the temple.`,\r\n            value: \"Haggai\"\r\n        },\r\n        {\r\n            name: \"📜 Zechariah\",\r\n            description: `Old Testament - Prophecies relating to the rebuilding of the temple and the Messiah.`,\r\n            value: \"Zechariah\"\r\n        },\r\n        {\r\n            name: \"📜 Malachi\",\r\n            description: `Old Testament - Prophecies relating to the calling of the Gentiles \r\n                                and the coming of Christ.`,\r\n            value: \"Malachi\"\r\n        },\r\n        {\r\n            name: \"📜 Matthew\",\r\n            description: `New Testament - First of the four gospels, A brief history of the life of Christ.`,\r\n            value: \"Matthew\"\r\n        },\r\n        {\r\n            name: \"📜 Mark\",\r\n            description: `New Testament - Second of the four gospels, incluses incidents omitted by St. Matthew.`,\r\n            value: \"Mark\"\r\n        },\r\n        {\r\n            name: \"📜 Luke\",\r\n            description: `New Testament - Third of the four gospels, especial reference \r\n                        to His most important acts and discourses.`,\r\n            value: \"Luke\"\r\n        },\r\n        {\r\n            name: \"📜 John\",\r\n            description: `New Testament - Fourth of the four gospels, The life of Christ, \r\n                            giving important discourses not related by the other evangelists.`,\r\n            value: \"John\"\r\n        },\r\n        {\r\n            name: \"📜 Acts (of the Apostles)\",\r\n            description: `New Testament - The history of the labors of the apostles and \r\n                                of the foundation of the Christian Church.`,\r\n            value: \"Acts\"\r\n        },\r\n        {\r\n            name: \"📜 Romans\",\r\n            description: `New Testament - A treatise by St. Paul on the doctrine of justification by Christ.`,\r\n            value: \"Romans\"\r\n        },\r\n        {\r\n            name: \"📜 1 Corinthians\",\r\n            description: `New Testament - A letter from St. Paul to the Corinthians, correcting \r\n                                errors into which they had fallen.`,\r\n            value: \"1 Corinthians\"\r\n        },\r\n        {\r\n            name: \"📜 2 Corinthians\",\r\n            description: `New Testament - St. Paul confirms his disciples in their faith, \r\n                                and vindicates his own character.`,\r\n            value: \"2 Corinthians\"\r\n        },\r\n        {\r\n            name: \"📜 Galatians\",\r\n            description: `New Testament - St. Paul maintains that we are justified by faith, and not by rites.`,\r\n            value: \"Galatians\"\r\n        },\r\n        {\r\n            name: \"📜 Ephesians\",\r\n            description: `New Testament - A treatise by St. Paul on the power of divine grace.`,\r\n            value: \"Ephesians\"\r\n        },\r\n        {\r\n            name: \"📜 Philippians\",\r\n            description: `New Testament - St. Paul sets forth the beauty of Christian kindness.`,\r\n            value: \"Philippians\"\r\n        },\r\n        {\r\n            name: \"📜 Colossians\",\r\n            description: `New Testament - St. Paul warns his disciples against errors, and exhorts to certain duties.`,\r\n            value: \"Colossians\"\r\n        },\r\n        {\r\n            name: \"📜 1 Thessalonians\",\r\n            description: `New Testament - St. Paul exhorts his disciples to continue in \r\n                            the faith and in holy conversation.`,\r\n            value: \"1 Thessalonians\"\r\n        },\r\n        {\r\n            name: \"📜 2 Thessalonians\",\r\n            description: `New Testament - St. Paul corrects an error concerning the speedy \r\n                            coming of Christ the second time.`,\r\n            value: \"2 Thessalonians\"\r\n        },\r\n        {\r\n            name: \"📜 1 Timothy\",\r\n            description: `New Testament - St. Paul instructs Timothy in the duty of a pastor, \r\n                            and encourages him in the work of the ministry.`,\r\n            value: \"1 Timothy\"\r\n        },\r\n        {\r\n            name: \"📜 2 Timothy\",\r\n            description: `New Testament - St. Paul instructs Timothy in the duty of a pastor, \r\n                            and encourages him in the work of the ministry.`,\r\n            value: \"2 Timothy\"\r\n        },\r\n        {\r\n            name: \"📜 Titus\",\r\n            description: `New Testament - Epistle to Titus. St. Paul encourages Titus in the \r\n                            performance of his ministerial duties.`,\r\n            value: \"Titus\"\r\n        },\r\n        {\r\n            name: \"📜 Philemon\",\r\n            description: `New Testament - An appeal to a converted master to receive a converted \r\n                            escaped slave with kindness.`,\r\n            value: \"Philemon\"\r\n        },\r\n        {\r\n            name: \"📜 Hebrews\",\r\n            description: `New Testament - St. Paul maintains that Christ is the substance of the ceremonial law.`,\r\n            value: \"Hebrews\"\r\n        },\r\n        {\r\n            name: \"📜 James\",\r\n            description: `New Testament - A treatise on the efficacy of faith united with good works.`,\r\n            value: \"James\"\r\n        },\r\n        {\r\n            name: \"📜 1 Peter\",\r\n            description: `New Testament - Exhortations to a Christian life, with various warnings and predictions.`,\r\n            value: \"1 Peter\"\r\n        },\r\n        {\r\n            name: \"📜 2 Peter\",\r\n            description: `New Testament - Exhortations to a Christian life, with various warnings and predictions.`,\r\n            value: \"2 Peter\"\r\n        },\r\n        {\r\n            name: \"📜 1 John\",\r\n            description: `New Testament - Respecting the person of our Lord, and an \r\n                            exhortation to Christian love and conduct.`,\r\n            value: \"1 John\"\r\n        },\r\n        {\r\n            name: \"📜 2 John\",\r\n            description: `New Testament - St. John warns a converted lady against false teachers.`,\r\n            value: \"2 John\"\r\n        },\r\n        {\r\n            name: \"📜 3 John\",\r\n            description: `New Testament - A letter to Gaius, praising him for his hospitality.`,\r\n            value: \"3 John\"\r\n        },\r\n        {\r\n            name: \"📜 Jude\",\r\n            description: `New Testament - Epistle of St. Jude.\r\n                          Warnings against deceivers.`,\r\n            value: \"Jude\"\r\n        },\r\n        {\r\n            name: \"📜 Revelation\",\r\n            description: `New Testament - Final book in the Bible.\r\n                          The future of the Church foretold.`,\r\n            value: \"Revelation\"\r\n        }\r\n    ];\r\n}\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Grab Caption","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/695","url":"","title":"Grab Captions from Disney+","command":"grab-captions-from-disney","content":"> 📝 Requires \"Allow JavaScript From Apple Events\" (see image at bottom)\r\n\r\nhttps://user-images.githubusercontent.com/36073/150913892-7fb80f2d-8ea9-4835-ad60-2bfe39f9916b.mp4\r\n\r\n\r\n[Open grab-caption in Script Kit](https://scriptkit.com/api/new?name=grab-caption&url=https://gist.githubusercontent.com/johnlindquist/b1d146e0308089002e2a48377af0e59d/raw/0697ca4ea5f67a5302279214b3dda002f9889a5c/grab-caption.ts\")\r\n\r\n```js\r\n// Name: Grab Caption\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\n// This query selector is specific to Disney plus\r\nlet js = `\r\n\r\nArray.from(document.querySelectorAll('.dss-subtitle-renderer-line')).map(el => el.innerText)\r\n\r\n`\r\n\r\nlet value = await applescript(`\r\ntell application \"Google Chrome\" to tell window 1\r\n\tset str to execute active tab javascript \"${js}\"\r\n\treturn str\r\nend tell\r\n`)\r\n\r\nawait div(md(`## ${value}`))\r\n\r\n// To copy to clipboard, use:\r\n// copy(value)\r\n```\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/36073/150914006-5f64c3e1-194a-48aa-807e-1c8370044c1f.png)\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"What time is it","description":"","author":"Francois","github":"fbuys","avatar":"https://avatars.githubusercontent.com/u/3785596?u=da2515e92addbd3bd0ba679952401b4a49c61d09&v=4","user":"fbuys","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/694","url":"","title":"What time is it","command":"what-time-is-it","content":"Here is my very first kit script.\r\n\r\nI made it in less than an hour.\r\n\r\nAny improvement ideas will be greatly appreciated.\r\n\r\n```\r\n// Name: What time is it\r\n// Description: View current time in a few timezones that I care about\r\n// Author: Francois Buys\r\n// Github: fbuys\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet estTime = await get(\"https://timeapi.io/api/Time/current/zone?timeZone=America/New_York\")\r\nlet baTime = await get(\"https://timeapi.io/api/Time/current/zone?timeZone=America/Argentina/Buenos_Aires\")\r\nlet brTime = await get(\"https://timeapi.io/api/Time/current/zone?timeZone=America/Sao_Paulo\")\r\n\r\nlet { format } = await npm(\"date-fns\")\r\n\r\nconst formatString = \"eeee, h:mm aaa\"\r\nconst local = format(new Date(), formatString)\r\nconst est = format(new Date(estTime.data[\"dateTime\"]), formatString)\r\nconst ba = format(new Date(baTime.data[\"dateTime\"]), formatString)\r\nconst br = format(new Date(brTime.data[\"dateTime\"]), formatString)\r\n\r\nawait div(`\r\n  <p>🇿🇦    &nbsp; My Time is <strong>${local}</strong></p>\r\n  <p>🇺🇸    &nbsp; Time in EST zone is <strong>${est}</strong></p>\r\n  <p>🇦🇷    &nbsp; Time in Argentina is <strong>${ba}</strong></p>\r\n  <p>🇧🇷    &nbsp; Time in Brazil is <strong>${br}</strong></p>\r\n`, 'p-10')\r\n\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Gitlab","menu":"Gitlab Boilerplate Repository","description":"","shortcut":"command option g","author":"Joël Grimberg","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/2995294?u=b757330296df6c0482bedf7d8000adaab4a24894&v=4","user":"joelgrimberg","discussion":"https://github.com/johnlindquist/kit/discussions/692","url":"https://gist.githubusercontent.com/joelgrimberg/4839ac89860519d965eebeaf1b798e94/raw/66c618730a8c238d66058d574eaae1e157c0d206/boilerplate-gitlab.js","title":"Create Gitlab Boilerplate Repository","command":"create-gitlab-boilerplate-repository","content":"[Open boilerplate-gitlab in Script Kit](https://scriptkit.com/api/new?name=boilerplate-gitlab&url=https://gist.githubusercontent.com/joelgrimberg/4839ac89860519d965eebeaf1b798e94/raw/66c618730a8c238d66058d574eaae1e157c0d206/boilerplate-gitlab.js\")\r\n\r\n```js\r\n// Name: Gitlab\r\n// Menu: Gitlab Boilerplate Repository\r\n// Description: Create a new Gitlab repository\r\n// Shortcut: command option g\r\n// Author: Joël Grimberg\r\n// Twitter: @joelgrimberg\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport fs from \"fs\";\r\n\r\nconst filenamify = await npm(\"filenamify\");\r\n/** @type {typeof import(\"filenamify\")} */\r\n\r\nconst GITLAB_USER = await env(\r\n  \"GITLAB_USER\",\r\n  \"please enter your Gitlab username\"\r\n);\r\n\r\nconst GITLAB_AUTH_TOKEN = await env(\r\n  \"GITLAB_AUTH_TOKEN\",\r\n  \"please enter your Gitlab Auth token\"\r\n);\r\n\r\nconst GITLAB_BOILERPLATE_FOLDER = await env(\r\n  \"gitlabBoilerplateFolder\",\r\n  \"please enter the location you want to save your boilerplate folder\"\r\n);\r\n\r\nconst NPM_AUTHOR_NAME = await env(\r\n  \"NPM_AUTHOR_NAME\",\r\n  \"please enter your NPM author name\"\r\n);\r\n\r\nconst boilerplateProject = await arg({\r\n  pleaceholder: \"please enter the name of your project\",\r\n  hint: \"name of repository\",\r\n});\r\n\r\nconst project = filenamify(boilerplateProject);\r\n\r\nconst boilerplateDescription = await arg({\r\n  placeholder: `project description`,\r\n  hint: \"a description oneliner\",\r\n});\r\n\r\nconst pwd = `${GITLAB_BOILERPLATE_FOLDER}/${project}`;\r\n//TODO\r\nfs.mkdirSync(pwd);\r\ncd(pwd);\r\n\r\nawait $`npm init -y -init-author-name='${NPM_AUTHOR_NAME}'`;\r\n\r\nawait $`git init`;\r\n\r\nawait $`echo \"/node_modules\" > .gitignore`;\r\n\r\nawait $`npm install cypress --save-dev`;\r\n\r\nawait $`echo '\r\n  <h1 align=\"center\"><a href=\"https://blog.joelgrimberg.dev\">🚀 ${project}</a></h1>' > README.md`;\r\n\r\nawait $`git add .`;\r\n\r\nawait $`git commit -m 'initial commit'`;\r\n\r\nawait $`git remote add origin git@gitlab.com:${GITLAB_USER}/${project}.git`;\r\n\r\nawait $`curl --silent --header \"PRIVATE-TOKEN: ${GITLAB_AUTH_TOKEN}\" \\\r\n-XPOST \"https://gitlab.com/api/v4/projects?name=${project}&visibility=private&initialize_with_readme=false\" | jq '.id'`;\r\n\r\nawait $`git push --set-upstream origin main`;\r\n\r\nedit(`README.md`, pwd);\r\nbrowse(`https://gitlab.com/${GITLAB_USER}/${project}`);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Boilerplate repository","description":"","shortcut":"command option control b","author":"Joël Grimberg","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/2995294?u=b757330296df6c0482bedf7d8000adaab4a24894&v=4","user":"joelgrimberg","discussion":"https://github.com/johnlindquist/kit/discussions/690","url":"https://gist.github.com/joelgrimberg/c70d8c1272b0384d8c7501642e098cc7/boilerplate.js","title":"Create a Boilerplate Github Repository","command":"create-a-boilerplate-github-repository","content":"I just created my first script with ScriptKit.\r\nThis script boilerplates a repo and pushes it to my GitHub account.\r\n\r\n[Open Boilerplate Repo in Script Kit](https://scriptkit.com/api/new?name=fade-video-clip&url=https://gist.github.com/joelgrimberg/c70d8c1272b0384d8c7501642e098cc7/boilerplate.js)\r\n\r\n\r\n\r\nthis is my 0.1 version, so still iterating.\r\n\r\n``` javascript\r\nimport \"@johnlindquist/kit\";\r\n\r\n// Menu: Boilerplate repository\r\n// Description: Create a new github repository\r\n// Shortcut: command option control b\r\n// Author: Joël Grimberg\r\n// Twitter: @joelgrimberg\r\n\r\nimport fs from \"fs\";\r\nconst open = await npm(\"open\");\r\n\r\nconst { Octokit } = await npm(\"@octokit/rest\");\r\nconst simpleGit = await npm(\"simple-git\");\r\n\r\nconst boilerplateFolder = await env(\r\n  \"BOILERPLATE_DIR\",\r\n  `What's the path to the boilerplate directory on this machine?`\r\n);\r\n\r\nconst githubAuthToken = await env(\r\n  \"githubAuthToken\",\r\n  `Please enter the GitHub token`\r\n);\r\n\r\nconst octokit = new Octokit({\r\n  auth: githubAuthToken,\r\n});\r\n\r\nconst project = await arg({\r\n  placeholder: `What is the name of the project?`,\r\n  hint: \"repo-name\",\r\n  ignoreBlur: true,\r\n});\r\n\r\nconst description = await arg({\r\n  placeholder: `What is the description of the project?`,\r\n  hint: \"description\",\r\n  ignoreBlur: true,\r\n});\r\n\r\noctokit.rest.repos.createForAuthenticatedUser({\r\n  name: project,\r\n});\r\n\r\nif (!fs.existsSync(boilerplateFolder)) {\r\n  fs.mkdirSync(boilerplateFolder);\r\n}\r\n\r\nconst pwd = `${boilerplateFolder}/${project}`;\r\nfs.mkdirSync(pwd);\r\n\r\nconst options = {\r\n  baseDir: pwd,\r\n  binary: \"git\",\r\n  maxConcurrentProcesses: 6,\r\n};\r\n\r\nconst git = simpleGit(options);\r\n\r\nawait git\r\n  .init()\r\n  .addRemote(\"origin\", `git@github.com:joelgrimberg/${project}.git`);\r\n\r\nawait $`cd ${pwd} && npm init -y -init-author-name='Joël Grimberg <joel@joelgrimberg.nl> (https://blog.joelgrimberg.dev)'`;\r\n\r\nawait $`cd ${pwd} && npm install cypress --save-dev`;\r\n\r\nawait $`cd ${pwd} && echo '\r\n  <h1 align=\"center\"><a href=\"https://blog.joelgrimberg.dev\">🚀 ${project}</a></h1>' > README.md`;\r\n\r\nawait $`cd ${pwd} && echo -n \"## ${description}\" >> README.md`;\r\n\r\nawait $`echo \"node_modules/\" > ${pwd}/.gitignore`;\r\n\r\nawait git.add(\".\").commit(\"initial commit\");\r\nawait $`cd ${pwd} && git push --set-upstream origin main`;\r\n\r\nedit(`${pwd}/README.md`, pwd);\r\nbrowse(`https://github.com/joelgrimberg/${project}`);\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"shortcut":"opt+9","name":"fade-video-clip","avatar":"https://avatars.githubusercontent.com/u/2262858?u=d02ad0d859aa1c3f879b70061bf7e4a4338ba150&v=4","user":"tayiorbeii","author":"Taylor Bell","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/689","url":"https://gist.githubusercontent.com/tayiorbeii/4cfa685f68a306a3ea0c036a06999bff/raw/9804598bae8f844077e237d2c9d3e54afbe442c4/fade-video-clip.js","title":"Add a fade in and fade out transitions to video file","command":"add-a-fade-in-and-fade-out-transitions-to-video-file","content":"Select a video file in Finder, hit the shortcut, and this script will create a copy of the file with fade in and fade out transitions.\r\n\r\nRequires ffmpeg to be installed locally.\r\nSet `fadeLength` to a time in seconds of your choice.\r\n\r\n[Open fade-video-clip in Script Kit](https://scriptkit.com/api/new?name=fade-video-clip&url=https://gist.githubusercontent.com/tayiorbeii/4cfa685f68a306a3ea0c036a06999bff/raw/9804598bae8f844077e237d2c9d3e54afbe442c4/fade-video-clip.js\")\r\n\r\n```js\r\n// shortcut: opt+9\r\nimport \"@johnlindquist/kit\"\r\n    \r\n// Name: fade-video-clip\r\n\r\nlet fadeLength = 1.25\r\n\r\nlet videoFile = await getSelectedFile()\r\n\r\nlet basePath = await path.basename(videoFile)\r\n\r\nlet { stdout } = await exec(`ffprobe -loglevel error -show_entries format=duration -of default=nk=1:nw=1 \"${videoFile}\"`)\r\n\r\nlet totalDuration = stdout\r\n\r\nlet offset = totalDuration - fadeLength\r\n\r\nlet editedVideo = await exec(`ffmpeg -i \"${videoFile}\" -codec:v libx264 -crf 18 -filter_complex \"[0:v]fade=type=in:duration=${fadeLength},fade=type=out:duration=${fadeLength}:start_time='${offset}'[v];[0:a]afade=type=in:duration=${fadeLength},afade=type=out:duration=${fadeLength}:start_time='${offset}'[a]\" -map \"[v]\" -map \"[a]\" \"${videoFile}_fade.mp4\"`)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Random Video From YouTube Channel","description":"","author":"Monica Powell","twitter":"indigitalcolor","gitHub":"@m0nica","avatar":"https://avatars.githubusercontent.com/u/6998954?u=78ef436473b15f90ae2a50e64883ebf39c0c1b1d&v=4","user":"M0nica","discussion":"https://github.com/johnlindquist/kit/discussions/684","url":"","title":"Open a Random Video from a Specific YouTube Channel","command":"open-a-random-video-from-a-specific-youtube-channel","content":"\r\nI created a Script to open a random video from a specific YouTube Channel. The script prompts user for the name of the channel, uses the `scrapeSelector` to get videos from the channel and then selects a random one to open. \r\n\r\nhttps://user-images.githubusercontent.com/6998954/148695801-f5607143-265b-4fd5-aa48-de0182d36791.mov\r\n\r\n\r\n\r\nFuture enhancements: I'd like to add some error logging to help users if they enter an invalid channel name that returns a 404 or if a given channel exists but doesn't return any videos. I tried adding some console.logs but wasn't sure how to output helpful logs to ScriptKit users. \r\n\r\n```js\r\n// Name: Random Video From YouTube Channel\r\n// Description: Open a random video from a specific YouTube Channel\r\n// Author: Monica Powell\r\n// Twitter: @indigitalcolor\r\n// GitHub: @m0nica\r\n\r\n``\r\nimport \"@johnlindquist/kit\"\r\n\r\n\r\nlet channelName = await arg(\"YouTube Channel Name (e.g, yogawithadriene):\")\r\n\r\nlet videos = await scrapeSelector(\r\n    `https://www.youtube.com/c/${channelName}/videos`,\r\n    \"a#video-title\",\r\n    el => ({\r\n        name: el.innerText,\r\n        value: el.href,\r\n    })\r\n)\r\n\r\n\r\nlet randomVideo = videos[Math.floor(Math.random() * videos.length)]\r\n\r\nexec(`open \"${randomVideo.value}\"`)\r\n ```\r\n\r\nView gist: https://gist.github.com/M0nica/939bd4c3dfb2bf6fed08afb17ab16d19\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"NASA's Astronomy Picture of the Day","description":"","author":"Asep Norzai","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/12707591?u=f068eaa4c9452be71b91f518fe630be1de423c1c&v=4","user":"Pashtunzoy","discussion":"https://github.com/johnlindquist/kit/discussions/677","url":"https://gist.githubusercontent.com/Pashtunzoy/e6cc24632eb237d3001df96c8253032d/raw/adc04ee8ccdaf4f726c1b300480da5a5bd03486e/nasa-astronomy-pic-of-the-day.js","title":"NASA's Astronomy Image Of The Day","command":"nasas-astronomy-image-of-the-day","content":"A simple script that shows you info about NASA's astronomy image of the day.\r\n\r\n[Open in ScriptKit](https://scriptkit.com/api/new?name=nasa-astronomy-pic-of-the-day&url=https://gist.githubusercontent.com/Pashtunzoy/e6cc24632eb237d3001df96c8253032d/raw/adc04ee8ccdaf4f726c1b300480da5a5bd03486e/nasa-astronomy-pic-of-the-day.js)\r\n\r\nExample:\r\n![nasa-astronomy-pic-of-the-day-500](https://user-images.githubusercontent.com/12707591/147915697-5744c6bf-e9a2-4d75-84de-ac88855754bc.png)\r\n\r\n\r\n## The Code:\r\n```js\r\n// Menu: NASA's Astronomy Picture of the Day\r\n// Description: Get NASA's APOTD\r\n// Suggested Schedule cron, run it everyday at 10AM local time: 0 10 * * *\r\n// Author: Asep Norzai\r\n// Twitter: @asepnorzai\r\n\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet {data: {copyright, date, explanation, title, hdurl}} = await get(`https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY`)\r\n\r\nshow(`\r\n\t<div style=\"padding: 1em\">\r\n\t\t<h1 style=\"text-align: center\">Astronomy Picture of the Day</h1>\r\n\t\t<p><strong>Title:</strong> <a href=\"https://apod.nasa.gov/apod/astropix.html\">${title}</a></p>\r\n\t\t<p><strong>Explanation:</strong> ${explanation}</p>\r\n\t\t<p><strong>Date:</strong> ${date}</p>\r\n\t\t<p><strong>Copyright:</strong> ${copyright}</p>\r\n\t\t<image src=\"${hdurl}\" style=\"margin-top: 0.5em\" title=\"${title}\"/>\r\n\t</div>`,\r\n{\r\n\ttitle,\r\n\twidth: 800,\r\n\theight: 1000\r\n})\r\n```\r\n\r\n## Extra Findings:\r\n\r\nI initially wanted to use `// Schedule: 0 10 * * *` to automatically show the image everyday, 10am local time, but somehow when opening the script through `https://scriptkit.com/api/new?name=`, the `schedule` value gets stripped off, leaving only `// Schedule:`?\r\nNot sure if it's a bug or by design?\r\n\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Shortcut Run","description":"","author":"Sunil Taneja","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/802896?u=707947982c865b61061ff071b3d46b6b8725e260&v=4","user":"suniltaneja","discussion":"https://github.com/johnlindquist/kit/discussions/676","url":"https://gist.githubusercontent.com/suniltaneja/b5755681d3da2fd2b7eacb44b70777ef/raw/01af76f2c96c54ec31457bd729211c6fc84a53a2/shortcutrun.js","title":"Shortcut Runner for Mac OSX Monterey","command":"shortcut-runner-for-mac-osx-monterey","content":"Shortcut Runner for Mac OSX Monterey\r\n\r\n[Install Shortcut runner for Mac OSX Monterey](https://scriptkit.com/api/new?name=shortcutrun&url=https://gist.githubusercontent.com/suniltaneja/b5755681d3da2fd2b7eacb44b70777ef/raw/01af76f2c96c54ec31457bd729211c6fc84a53a2/shortcutrun.js)\r\n\r\n```\r\n// Menu: Shortcut Run\r\n// Description: Shortcut runner for Mac OSX Monterey\r\n// Author: Sunil Taneja\r\n// Twitter: @suniltaneja\r\n\r\nimport \"@johnlindquist/kit\"\r\nconst list = await exec(`shortcuts list`)\r\nconst list_arr = list.stdout.split(\"\\n\")\r\nconst shortcut = await arg(\"Enter Shortcut\", list_arr)\r\nawait $`/usr/bin/shortcuts run ${shortcut}`\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Stock Quotes","description":"","author":"Sunil Taneja","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/802896?u=707947982c865b61061ff071b3d46b6b8725e260&v=4","user":"suniltaneja","discussion":"https://github.com/johnlindquist/kit/discussions/674","url":"https://gist.githubusercontent.com/suniltaneja/cdc153e687143a43b610f5fe97334450/raw/395040b18034df23fcba0fe56888defc317d967d/stocks.js","title":"Stocks and ETF lookup","command":"stocks-and-etf-lookup","content":"Stocks and ETF lookup -\r\n\r\nThis is a simple stock lookup script.\r\n\r\n[Open in Script Kit](https://scriptkit.com/api/new?name=stocks&url=https://gist.githubusercontent.com/suniltaneja/cdc153e687143a43b610f5fe97334450/raw/395040b18034df23fcba0fe56888defc317d967d/stocks.js)\r\n```js\r\nimport \"@johnlindquist/kit\";\r\n\r\n// Menu: Stock Quotes\r\n// Description: Get realtime stock or etf quotes\r\n// Author: Sunil Taneja\r\n// Twitter: @suniltaneja\r\n\r\nlet stocks_array = ['AAPL', 'GOOG', 'MSFT', 'TSM', 'NVDA']\r\nlet stocks_data = []\r\n\r\nconst transformSymbol = (response) => {\r\n  let stock = {}\r\n  stock.latestPrice = response.data.latestPrice\r\n  stock.change = response.data.change\r\n  stock.symbol = response.data.symbol\r\n  stock.high = response.data.high ? response.data.high : `NA`\r\n  stock.peRatio = response.data.peRatio ? response.data.peRatio : `NA`\r\n  return stock\r\n}\r\n\r\nfor await (let stock of stocks_array){\r\n  // free api provided by finaza.io\r\n  let query_url = `https://www.finaza.io/api/v1/quote?symbol=${stock.toUpperCase()}&key=scriptkit`\r\n  let response = await get(\r\n    query_url\r\n  );\r\n  stocks_data.push(transformSymbol(response))\r\n}\r\n\r\n\r\nlet url = await arg(\r\n  `Select Stock:`,\r\n  stocks_data.map((e) => {\r\n    return {\r\n      name: `${e.symbol} ($${e.latestPrice})`,\r\n      description: `Change: ${e.change} High: ${e.high} PE Ratio: ${e.peRatio}`,\r\n      value: `${e.symbol}`\r\n    }\r\n  }\r\n  )\r\n)\r\n\r\nawait $`open https://www.finaza.io/stocks/${url}`;\r\n```\r\n\r\n\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"DeepL","author":"Jacob Cofman","twitter":"JCofman","description":"","avatar":"https://avatars.githubusercontent.com/u/2118956?u=dd12813efdeb91151f98fcecd5c078f29bed6ff9&v=4","user":"JCofman","discussion":"https://github.com/johnlindquist/kit/discussions/673","url":"https://gist.githubusercontent.com/JCofman/5e728d809d54f1f67249668c07fb205f/raw/e34a8588040fa496e85c8a0d962ecee3d35453d9/deepl.js","title":"Translate Text using DeepL","command":"translate-text-using-deepl","content":"\r\n[Open deepl in Script Kit](https://scriptkit.com/api/new?name=deepl&url=https://gist.githubusercontent.com/JCofman/5e728d809d54f1f67249668c07fb205f/raw/e34a8588040fa496e85c8a0d962ecee3d35453d9/deepl.js\")\r\n\r\n```js\r\n// Name: DeepL\r\n// Author: Jacob Cofman\r\n// Twitter: @jcofman\r\n// Description: Translates text using https://www.deepl.com/translator\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet DEEPL_AUTH_KEY = await env(\"DEEPL_AUTH_KEY\", {\r\n    hint: md(\r\n      `Get a [DeepL API Key](https://www.deepl.com/docs-api/accessing-the-api/)`\r\n    ),\r\n    ignoreBlur: true,\r\n    secret: true,\r\n  })\r\n\r\nlet text = await getSelectedText();\r\n\r\nlet targetLanguage = await arg(\"Select a traget Language e.g: DE or EN\")\r\n\r\nlet response = await post(\r\n  `https://api-free.deepl.com/v2/translate?auth_key=${DEEPL_AUTH_KEY}&text=${text}&target_lang=${targetLanguage}`\r\n)\r\n\r\nsetSelectedText(response.data.translations[0].text)\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"Frontend Masters","description":"","author":"Aseem Taneja","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/13627431?u=92a4e656c7fc2a7ad2a019df5051a65f082d470e&v=4","user":"atej","discussion":"https://github.com/johnlindquist/kit/discussions/672","url":"","title":"Turn any page into an API","command":"turn-any-page-into-an-api","content":"Find yourself visiting a page often just to see what's new?\r\n\r\nThe `list` helper gets you the latest posts right within the Kit app.\r\n\r\n## Get Started\r\n\r\n### Install\r\nIn your `~/.kenv`: `npm install @aseemtaneja/kit-list`\r\n\r\n### API-fy a page\r\nStep 1: Go to the page  \r\nStep 2: Open up the Elements tab in Dev Tools and gather the required CSS selectors  \r\nStep 3: Make a script and you're done  \r\n\r\nFor example, the following script allows you to browse Frontend Masters courses:\r\n```javascript\r\n// Name: Frontend Masters\r\n// Description: Browse courses from frontendmasters.com\r\n// Author: Aseem Taneja\r\n// Twitter: @aseemtaneja\r\n\r\nimport '@johnlindquist/kit';\r\nconst list = await npm('@aseemtaneja/kit-list');\r\n\r\nconst { choices } = await list('https://frontendmasters.com/courses/', {\r\n        containerSelector: '.MediaItem',\r\n        hrefSelector: 'h2 a',\r\n        descriptionSelector: '.description',\r\n        metaSelector: '.Instructor .name',\r\n      });\r\n\r\nconst itemUrl = await arg('Go to', choices);\r\n\r\nawait $`open ${itemUrl}`;\r\n```\r\n\r\nTo see everything you can do  👉🏽 [View the docs on GitHub](https://github.com/atej/kit-list/)","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Code Snippets","description":"","author":"Altrim Beqiri","twitter":"altrimbeqiri","avatar":"https://avatars.githubusercontent.com/u/602300?u=829729de725990e263a945fc10044b989c8558a1&v=4","user":"altrim","discussion":"https://github.com/johnlindquist/kit/discussions/671","url":"","title":"Code Snippets","command":"code-snippets","content":"\r\nA script to easily organize and use your code snippets. Creates a snippet from the contents of the clipboard.\r\n\r\n[Open code-snippets in Script Kit](https://scriptkit.com/api/new?name=code-snippets&url=https://gist.githubusercontent.com/altrim/547fa58073351c0392c0cac76d183b6c/raw/673c7ec92bf7cf692a7aed45f346ece3c9cfe0c1/code-snippets.ts\")\r\n\r\nhttps://user-images.githubusercontent.com/602300/147369687-4b396dee-b3c8-414d-97ae-0766c6ce7896.mp4\r\n\r\n\r\n```js\r\nimport \"@johnlindquist/kit\";\r\n\r\n// Menu: Code Snippets\r\n// Description: Easily organize your code snippets\r\n// Author: Altrim Beqiri\r\n// Twitter: @altrimbeqiri\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst wrapCode = (html: string) => `<pre class=\"px-4\">\r\n<style type=\"text/css\">\r\n  code {\r\n    font-size: 0.75rem !important;\r\n    width: 100%;\r\n    white-space: pre-wrap;\r\n  }\r\n  pre {\r\n    display: flex;\r\n  }\r\n  p {\r\n    margin-bottom: 1rem;\r\n  }\r\n</style>\r\n  <code>\r\n${html.trim()}\r\n  </code>\r\n</pre>`;\r\n\r\nconst highlightCode = async ({ contents, language }): Promise<string> => {\r\n  const { default: highlight } = await npm(\"highlight.js\");\r\n  let highlightedContents = language\r\n    ? highlight.highlight(contents, { language }).value\r\n    : highlight.highlightAuto(contents).value;\r\n\r\n  return wrapCode(highlightedContents);\r\n};\r\n\r\ninterface Snippet {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  language?: string;\r\n  html?: any;\r\n  code?: any;\r\n  preview?: any;\r\n}\r\n\r\nconst { snippets, write }: { snippets: Snippet[]; write: any } = await db(\"code-snippets-db\", {\r\n  snippets: [],\r\n});\r\n\r\nconst onNoChoices = async (input) => {\r\n  if (input) {\r\n    setPanel(\r\n      md(`## Creating snippet <code>${input}</code>\r\n    \r\nCreates a new code snippet with the contents of the clipboard.`)\r\n    );\r\n  } else {\r\n    setPlaceholder(`Enter a snippet name`);\r\n  }\r\n};\r\n\r\nconst onChoices = async () => {\r\n  setPanel(``);\r\n};\r\n\r\nconst loadSnippets = async () => {\r\n  try {\r\n    return snippets.map((snippet) => {\r\n      snippet.preview = async () => {\r\n        if (snippet?.code) {\r\n          return await highlightCode({ contents: snippet?.code, language: snippet?.language });\r\n        }\r\n\r\n        return \"\";\r\n      };\r\n\r\n      return snippet;\r\n    });\r\n  } catch (error) {\r\n    return [error.message];\r\n  }\r\n};\r\n\r\nconst config = {\r\n  placeholder: \"Set snippet name\",\r\n  strict: false,\r\n  onChoices,\r\n  onNoChoices,\r\n  flags: {\r\n    rename: {\r\n      name: \"Description\",\r\n      description: \"Set a description for the selected script\",\r\n    },\r\n    language: {\r\n      name: \"Language\",\r\n      description: \"Set code language for the selected script\",\r\n    },\r\n  },\r\n};\r\n\r\nconst addSnippet = async () => {\r\n  const snippet: Snippet | string = await arg(config, await loadSnippets());\r\n\r\n  if (typeof snippet === \"string\") {\r\n    const clipboard = await paste();\r\n\r\n    snippets.push({\r\n      id: uuid(),\r\n      name: snippet,\r\n      code: clipboard.trim(),\r\n    });\r\n\r\n    await write();\r\n    await addSnippet();\r\n  } else if (snippet?.id) {\r\n    const foundSnippet = snippets.find((s) => s?.id === snippet.id);\r\n\r\n    if (flag?.rename) {\r\n      const description = await arg(\"Enter Description\");\r\n      foundSnippet.description = description;\r\n      await write();\r\n      await addSnippet();\r\n    }\r\n\r\n    if (flag?.language) {\r\n      const language = await arg(\"Enter Code Language\");\r\n      foundSnippet.language = language;\r\n      await write();\r\n      await addSnippet();\r\n    }\r\n\r\n    await setSelectedText(foundSnippet.code);\r\n  }\r\n};\r\n\r\nconst removeSnippet = async () => {\r\n  const snippet: Snippet = await arg(\"Remove snippet\", snippets);\r\n  const index = snippets.findIndex((s) => s?.id === snippet.id);\r\n  if (index > -1) {\r\n    snippets.splice(index, 1);\r\n  }\r\n  await write();\r\n  await removeSnippet();\r\n};\r\n\r\nonTab(\"Snippets\", addSnippet);\r\nonTab(\"Remove\", removeSnippet);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Compress Images","description":"","author":"Vojta Holik","twitter":"vjthlk","avatar":"https://avatars.githubusercontent.com/u/25487857?u=1c81cf15334c751c49f61fe7e0e84b0618eb0e0e&v=4","user":"vojtaholik","discussion":"https://github.com/johnlindquist/kit/discussions/670","url":"https://gist.githubusercontent.com/vojtaholik/1d37868f34c7686e4062a49c21a18dbb/raw/d9874dc3b6a0ecab7df9c1f8c7e8c9df838d2893/compress-images.js","title":"Compress images using imagemin","command":"compress-images-using-imagemin","content":"[Open compress-images in Script Kit](https://scriptkit.com/api/new?name=compress-images&url=https://gist.githubusercontent.com/vojtaholik/1d37868f34c7686e4062a49c21a18dbb/raw/d9874dc3b6a0ecab7df9c1f8c7e8c9df838d2893/compress-images.js\") \r\n\r\n```js \r\n// Menu: Compress Images\r\n// Description: Compress images using imagemin\r\n// Author: Vojta Holik\r\n// Twitter: @vjthlk\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nlet imagemin = await npm(\"imagemin\");\r\nlet imageminJpegtran = await npm(\"imagemin-jpegtran\");\r\nlet imageminJpegRecompress = await npm(\"imagemin-jpeg-recompress\");\r\nlet imageminPngquant = await npm(\"imagemin-pngquant\");\r\nlet imageminSvgo = await npm(\"imagemin-svgo\");\r\nlet imageminGifsicle = await npm(\"imagemin-gifsicle\");\r\n\r\nlet selectedFiles = await getSelectedFile();\r\nlet filePaths;\r\n\r\nif (selectedFiles) {\r\n  filePaths = selectedFiles.split(\"\\n\");\r\n} else {\r\n  let droppedFiles = await drop({ placeholder: \"Drop images to compress\" });\r\n  filePaths = droppedFiles.map((file) => file.path);\r\n}\r\n\r\nfor (let filePath of filePaths) {\r\n  let directory = path.dirname(filePath);\r\n  await imagemin([filePath], {\r\n    destination: directory,\r\n    plugins: [\r\n      imageminJpegtran({\r\n        arithmetic: true,\r\n        progressive: true,\r\n      }),\r\n      imageminJpegRecompress({ max: 85 }),\r\n      imageminSvgo(),\r\n      imageminGifsicle({\r\n        optimizationLevel: 2,\r\n      }),\r\n      imageminPngquant({\r\n        quality: [0.3, 0.5],\r\n      }),\r\n    ],\r\n  });\r\n}\r\n\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Incognito Browser","description":"","author":"Peter Holló","log":"false","avatar":"https://avatars.githubusercontent.com/u/1434873?v=4","user":"phollome","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/666","url":"https://gist.githubusercontent.com/phollome/6d09cba387703dd8d7b42137fb2e4b7f/raw/d41602bf048888554a3e51fdc448c6dd62479faa/incognito-browser.js","title":"Open Browser in incognito mode","command":"open-browser-in-incognito-mode","content":"Opens the selected browser in incognito mode and reuses your choice. Run the script with <kbd>cmd</kbd>+<kbd>Return</kbd> to reset your choice.\r\n\r\n[Open incognito-browser in Script Kit](https://scriptkit.com/api/new?name=incognito-browser&url=https://gist.githubusercontent.com/phollome/6d09cba387703dd8d7b42137fb2e4b7f/raw/d41602bf048888554a3e51fdc448c6dd62479faa/incognito-browser.js\")\r\n\r\n```js\r\n// Menu: Incognito Browser\r\n// Description: Open your favorite browser in incognito/private mode\r\n// Author: Peter Holló\r\n// Log: false\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst listOfBrowsers = [\r\n  {\r\n    name: \"[F]irefox\",\r\n    description: 'Opens Firefox with the \"-private-window\" flag',\r\n    value: \"Firefox\",\r\n    path: \"Firefox.app\",\r\n    command: 'open -na \"Firefox\" --args -private-window',\r\n  },\r\n  {\r\n    name: \"[B]rave\",\r\n    description: 'Opens Brave with the \"-incognito\" flag',\r\n    value: \"Brave\",\r\n    path: \"Brave Browser.app\",\r\n    command: 'open -na \"Brave Browser\" --args -incognito',\r\n  },\r\n  {\r\n    name: \"[S]afari\",\r\n    description: \"Runs an Apple Script which emulates key press\",\r\n    value: \"Safari\",\r\n    path: \"Safari.app\",\r\n    command: `\r\n      tell application \"Safari\"\r\n        activate\r\n        tell application \"System Events\"\r\n          keystroke \"n\" using {command down, shift down}\r\n        end tell\r\n      end tell`,\r\n  },\r\n  {\r\n    name: \"[C]hrome\",\r\n    description: 'Opens Chrome with the \"-incognito\" flag',\r\n    value: \"Chrome\",\r\n    path: \"Google Chrome.app\",\r\n    command: 'open -na \"Google Chrome\" --args -incognito',\r\n  },\r\n  {\r\n    name: \"[O]pera\",\r\n    description: 'Opens Opera with the \"-private\" flag',\r\n    value: \"Opera\",\r\n    path: \"Opera.app\",\r\n    command: 'open -na \"Opera\" --args -private',\r\n  },\r\n  {\r\n    name: \"[E]dge\",\r\n    description: 'Opens Edge with the \"-inprivate\" flag',\r\n    value: \"Edge\",\r\n    path: \"Microsoft Edge.app\",\r\n    command: 'open -na \"Microsoft Edge\" --args -inprivate',\r\n  },\r\n];\r\n\r\nasync function getFavoriteBrowser(availableBrowsers) {\r\n  const listOfAvailableBrowsers = listOfBrowsers.filter((browser) => {\r\n    const isBrowserAvailable = availableBrowsers.some(\r\n      (item) => item === browser.value\r\n    );\r\n    return isBrowserAvailable;\r\n  });\r\n  const selectedBrowser = await arg(\r\n    {\r\n      placeholder: \"Select a your favorite browser\",\r\n      hint: \"Press first letter for quick select\",\r\n    },\r\n    {\r\n      choices: listOfAvailableBrowsers,\r\n    }\r\n  );\r\n  return selectedBrowser;\r\n}\r\n\r\nconst data = await db({\r\n  availableBrowsers: [],\r\n});\r\n\r\nif (data.availableBrowsers.length === 0) {\r\n  for (let i = 0, length = listOfBrowsers.length; i < length; i++) {\r\n    const available = await isDir(`/Applications/${listOfBrowsers[i].path}`);\r\n    if (available) {\r\n      data.availableBrowsers.push(listOfBrowsers[i].value);\r\n    }\r\n  }\r\n  await data.write();\r\n}\r\n\r\nif (data.availableBrowsers.length === 0) {\r\n  const browserNames = listOfBrowsers.map((browser) => {\r\n    return browser.value;\r\n  });\r\n\r\n  await div(\r\n    `\r\n    <div class=\"p-4 font-mono text-sm\">\r\n      <p class=\"pb-2\">\r\n          No supported browser found!😬\r\n      </p>\r\n      <p>\r\n        Supported browsers are: ${browserNames.join(\", \")}.\r\n      <p>\r\n    </div>\r\n    `\r\n  );\r\n}\r\n\r\nconst favoriteBrowser = await env(\"FAVORITE_BROWSER\", {\r\n  reset: flag?.cmd,\r\n  choices: getFavoriteBrowser.bind(null, data.availableBrowsers),\r\n});\r\n\r\nconst { command } = listOfBrowsers.find((browser) => {\r\n  return browser.value === favoriteBrowser;\r\n});\r\n\r\nif (favoriteBrowser === \"Safari\") {\r\n  await applescript(command);\r\n} else {\r\n  await exec(command);\r\n}\r\n\r\n```\r\n\r\n## Initial description\r\nTo start writing scripts for this awesome tool I wanted to migrate an Alfred workflow I wrote ([alfred-incognito-browser\r\n](https://github.com/phollome/alfred-incognito-browser)). What I appreciate on this workflow is that it enhances the application launch feature of Alfred with the option to open your browser in incognito mode. Maybe launching an application could be a top level feature instead of being a single script?\r\n\r\nI would love get some feedback. I know there is some room for improvements (eg. the Safari script).\r\n\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"name":"json-formatter","author":"Henry Black","twitter":"HAJBlack","avatar":"https://avatars.githubusercontent.com/u/15220184?u=3a0ef6d8df198c1b1397c353a09113b144faf895&v=4","user":"blackhaj","discussion":"https://github.com/johnlindquist/kit/discussions/664","url":"https://gist.githubusercontent.com/blackhaj/6651f50c6755db63e25f09f5cb9fbcaf/raw/c8a05d7266d46795d341dd4772bf9a3ad8e000c2/json-formatter.js","title":"A simple JSON formatter","command":"a-simple-json-formatter","content":"Hey folks - I made a little JSON formatter (my first attempt at a script)\r\n\r\nIt does the following:\r\n\r\nGrabs the latest item on your clipboard\r\nFormats it using prettier (this will have to install on your first time running the script)\r\nCopies the formatted JSON to your clipboard\r\nSuper simple but hopefully useful.\r\n\r\n[Open json-formatter in Script Kit](https://scriptkit.com/api/new?name=json-formatter&url=https://gist.githubusercontent.com/blackhaj/6651f50c6755db63e25f09f5cb9fbcaf/raw/c8a05d7266d46795d341dd4772bf9a3ad8e000c2/json-formatter.js\")\r\n\r\n```js\r\nimport '@johnlindquist/kit';\r\n\r\nconst prettier = await npm('prettier');\r\n\r\n// Name: json-formatter\r\n// Author: Henry Black\r\n// Twitter: @hajblack\r\n\r\nconst unformattedJson = await paste();\r\n\r\nlet result;\r\n\r\ntry {\r\n  result = await prettier.format(unformattedJson, {\r\n    parser: 'json',\r\n  });\r\n  await copy(result);\r\n} catch (err) {\r\n  arg(\"Couldn't format that string: \" + err);\r\n}\r\n\r\n```\r\n\r\nAny feedback very welcome - this is my first script on ScriptKit so I would love any pointers.","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Meet","description":"","author":"Valentin Hervieu","twitter":"ValentinHervieu","avatar":"https://avatars.githubusercontent.com/u/2678610?u=baddd0d28f54963a735b44c84f585f07811662ba&v=4","user":"ValentinH","discussion":"https://github.com/johnlindquist/kit/discussions/663","url":"","title":"Create new Google Meet and share URL on Slack","command":"create-new-google-meet-and-share-url-on-slack","content":"A simple script to create a new Google Meet and paste the generated URL on the current Slack chat.\r\n\r\n[Open meet in Script Kit](https://scriptkit.com/api/new?name=meet&url=https://gist.githubusercontent.com/ValentinH/9d2b6c1525f1eed38e6af964bad22406/raw/006894bf2da7b5b84d3afdc8fc08553eec26c136/meet.ts\")\r\n\r\n```js\r\n// Menu: Meet\r\n// Description: Start new meet and paste on Slack\r\n// Author: Valentin Hervieu\r\n// Twitter: @ValentinHervieu\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nbrowse('https://meet.new')\r\nlet count = 1\r\nlet tab = ''\r\n\r\nwhile (count < 20) {\r\n  await wait(500)\r\n  tab = await getActiveTab(\"Brave\")\r\n  if (!tab.startsWith('https://meet.google.com/new') && !tab.startsWith('https://meet.new')) break\r\n  count += 1\r\n}\r\n\r\ntab = tab.split('?')[0]\r\n\r\nawait copy(tab)\r\nawait focusWindow('Slack', '')\r\nawait setSelectedText(tab)\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Translate Image","description":"","author":"Altrim Beqiri","twitter":"altrimbeqiri","avatar":"https://avatars.githubusercontent.com/u/602300?u=829729de725990e263a945fc10044b989c8558a1&v=4","user":"altrim","discussion":"https://github.com/johnlindquist/kit/discussions/639","url":"","title":"Translate Image","command":"translate-image","content":"Simple script to translate the text found on a selected image. It uses Google Cloud vision and translation apis. \r\nTo set it up locally you need to authenticate to Google Cloud API https://cloud.google.com/docs/authentication/getting-started\r\n\r\n[Install translate-image](https://scriptkit.com/api/new?name=translate-image&url=https://gist.githubusercontent.com/altrim/7c3f8de0a05375c48a4f9e2aad6e3def/raw/93d43dac52135e1154606b5898dc52c3e312a375/translate-image.ts\")\r\n\r\nhttps://user-images.githubusercontent.com/602300/144909681-71e31270-b542-4c96-b1a6-7e00c4280f26.mp4\r\n\r\n```js\r\nimport \"@johnlindquist/kit\";\r\n// Menu: Translate Image\r\n// Description: Translate text extracted from a selected image\r\n// Author: Altrim Beqiri\r\n// Twitter: @altrimbeqiri\r\n\r\nconst vision = await npm(\"@google-cloud/vision\");\r\nconst gtranslate = await npm(\"@google-cloud/translate\");\r\nconst { Translate } = gtranslate.v2;\r\n\r\nconst client = new vision.ImageAnnotatorClient();\r\nconst translate = new Translate();\r\n\r\nconst extractText = async (): Promise<string> => {\r\n  const file = await getSelectedFile();\r\n  const [result] = await client.textDetection(file);\r\n  return result.fullTextAnnotation.text;\r\n};\r\n\r\nconst translateText = async (text: string) => {\r\n  let [translations] = await translate.translate(text, \"en\");\r\n  translations = Array.isArray(translations) ? translations : [translations];\r\n  return translations.join(\" \");\r\n};\r\n\r\ndiv(md(\"Extracting and Translating...\"));\r\nconst text = await extractText();\r\nconst translation = await translateText(text);\r\n\r\nshow(\r\n  `\r\n<div>\r\n  <div class=\"max-w-2xl mx-auto sm:px-6 lg:px-8 text-gray-800 bg-white\">\r\n    <div class=\"overflow-hidden shadow-md\">\r\n      <div class=\"px-6 py-4 border-b border-gray-200 font-bold\">Extracted Text</div>\r\n      <div class=\"p-6 border-b border-gray-200\">${text}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"max-w-2xl mx-auto sm:px-6 lg:px-8 text-gray-800 bg-white\">\r\n    <div class=\"overflow-hidden shadow-md\">\r\n      <div class=\"px-6 py-4 border-b border-gray-200 font-bold\">Translation</div>\r\n      <div class=\"p-6 border-b border-gray-200\">${translation}</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n`,\r\n  { width: 640, height: 420, transparent: true }\r\n);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Speed Test","description":"","author":"Altrim Beqiri","twitter":"altrimbeqiri","avatar":"https://avatars.githubusercontent.com/u/602300?u=829729de725990e263a945fc10044b989c8558a1&v=4","user":"altrim","discussion":"https://github.com/johnlindquist/kit/discussions/635","url":"","title":"Speed Test","command":"speed-test","content":"\r\n[Install speed-test](https://scriptkit.com/api/new?name=speed-test&url=https://gist.githubusercontent.com/altrim/42c80c208d129534b6dfde79df32db9e/raw/741eaf89114e64b34ab5cc6cc62bb5f221672319/speed-test.ts\")\r\n\r\nWas playing around with live data update on panels and wanted to see how one can customise the show() panel a bit, so I wrote this script to check internet download/upload speed.\r\n\r\nhttps://user-images.githubusercontent.com/602300/144672001-fff14bd5-e08a-4aa2-a98c-b0e742cb1547.mp4\r\n\r\n```js\r\nimport \"@johnlindquist/kit\";\r\n\r\n// Menu: Speed Test\r\n// Description: Test the speed and performance of your internet connection\r\n// Author: Altrim Beqiri\r\n// Twitter: @altrimbeqiri\r\n\r\nconst speedTest = await npm(\"speedtest-net\");\r\n\r\ninterface SpeedTestResult {\r\n  timestamp: Date;\r\n  ping: { jitter: number; latency: number };\r\n  download: { bandwidth: number; bytes: number; elapsed: number };\r\n  upload: { bandwidth: number; bytes: number; elapsed: number };\r\n  packetLoss: number;\r\n  isp: string;\r\n  interface: {\r\n    internalIp: string;\r\n    name: string;\r\n    macAddr: string;\r\n    isVpn: boolean;\r\n    externalIp: string;\r\n  };\r\n  server: {\r\n    id: number;\r\n    name: string;\r\n    location: string;\r\n    country: string;\r\n    host: string;\r\n    port: number;\r\n    ip: string;\r\n  };\r\n  result: {\r\n    id: string;\r\n    url: string;\r\n  };\r\n}\r\n\r\nconst progressPanelInfo = ({ downloadSpeed = 0, uploadSpeed = 0 }: { downloadSpeed: number; uploadSpeed: number }) => {\r\n  return `\r\n  <div class=\"flex flex-col p-4\">\r\n    <p class=\"mb-2 text-xl font-mono text-center text-yellow-500\" style=\"font-variant-numeric: tabular-nums;\">\r\n     ${downloadSpeed.toFixed(2)} Mbps &darr; </p>\r\n    <p class=\"text-xl text-center font-mono text-yellow-500\" style=\"font-variant-numeric: tabular-nums;\">\r\n     ${uploadSpeed.toFixed(2)} Mbps &uarr;</p>\r\n  </div>\r\n`;\r\n};\r\nconst showResultsPanel = ({\r\n  datacenter,\r\n  downloadSpeed,\r\n  uploadSpeed,\r\n}: {\r\n  datacenter: string;\r\n  downloadSpeed: number;\r\n  uploadSpeed: number;\r\n}) => {\r\n  show(\r\n    `\r\n<div class=\"px-2 py-2 mx-auto\">\r\n  <h3 class=\"text-center bg-clip-text text-green-400\" style=\"background-image: linear-gradient(45deg, #2ed1c1, #3a86f4); color: transparent; -webkit-background-clip:text\">Datacenter ${datacenter}</h3>\r\n  <div class=\"grid grid-cols-2\" style=\"gap: 1rem;\">\r\n    <div class=\"flex flex-col justify-center p-4 bg-gray-800 rounded\">\r\n        <p class=\"text-3xl font-semibold font-mono text-center text-white\">${downloadSpeed.toFixed(2)}</p>\r\n        <p class=\"text-2xl font-semibold text-center text-gray-300\">Mbps</p>\r\n        <p class=\"text-center text-gray-400\">Download</p>\r\n    </div>\r\n\r\n    <div class=\"flex flex-col justify-center p-4 bg-gray-800 rounded\">\r\n        <p class=\"text-3xl font-semibold font-mono text-center text-white\">${uploadSpeed.toFixed(2)}</p>\r\n        <p class=\"text-2xl font-semibold text-center text-gray-300\">Mbps</p>\r\n        <p class=\"text-center text-gray-400\">Upload</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n    { width: 640, height: 170, transparent: true }\r\n  );\r\n};\r\n\r\ntry {\r\n  let downloadSpeed = 0;\r\n  let uploadSpeed = 0;\r\n\r\n  div(progressPanelInfo({ downloadSpeed, uploadSpeed }));\r\n\r\n  const testResult: SpeedTestResult = await speedTest({\r\n    acceptLicense: true,\r\n    acceptGdpr: true,\r\n    progress: (progress: any) => {\r\n      if (progress.type === \"download\") {\r\n        downloadSpeed = progress.download.bandwidth / 131072;\r\n      }\r\n      if (progress.type === \"upload\") {\r\n        uploadSpeed = progress.upload?.bandwidth / 131072;\r\n      }\r\n      setPanel(progressPanelInfo({ downloadSpeed, uploadSpeed }));\r\n    },\r\n  });\r\n\r\n  downloadSpeed = testResult.download.bandwidth / 131072;\r\n  uploadSpeed = testResult.upload.bandwidth / 131072;\r\n  let datacenter = `${testResult.server.name} ${testResult.server.location} - ${testResult.server.country}`;\r\n\r\n  showResultsPanel({ datacenter, downloadSpeed, uploadSpeed });\r\n} catch (err: any) {\r\n  console.log(err.message);\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Notion Thoughts","description":"","author":"Altrim Beqiri","twitter":"altrimbeqiri","avatar":"https://avatars.githubusercontent.com/u/602300?u=829729de725990e263a945fc10044b989c8558a1&v=4","user":"altrim","discussion":"https://github.com/johnlindquist/kit/discussions/623","url":"","title":"Quick Thoughts with Script Kit and Notion","command":"quick-thoughts-with-script-kit-and-notion","content":"I use Notion daily for my work and after I saw the tweet by @johnlindquist on the Quick Thoughts script I got inspired to write one that integrates with the Notion API. I wrote a bit about it on my blog [Quick Thoughts with Script Kit and Notion](https://altrim.io/posts/quick-thoughts-with-script-kit-and-notion)\r\n\r\n[Install notion-thoughts](https://scriptkit.com/api/new?name=notion-thoughts&url=https://gist.githubusercontent.com/altrim/141e25b46ba5fc8be4adb1517fb6d16e/raw/b892176987fb2932dee85054010d5a7ee66b56bf/notion-thoughts.ts\")\r\n\r\nhttps://user-images.githubusercontent.com/602300/144701725-aaf3a8a8-becb-4c53-9ea9-5a0592af4971.mp4\r\n\r\n\r\n```js\r\nimport \"@johnlindquist/kit\";\r\n\r\n// Menu: Notion Thoughts\r\n// Description: Add quick thoughts to a notion journal page\r\n// Author: Altrim Beqiri\r\n// Twitter: @altrimbeqiri\r\n\r\n/** @type {typeof import(\"@notionhq/client\")} */\r\nconst { Client } = await npm(\"@notionhq/client\");\r\n/** @type {typeof import(\"date-fns\")} */\r\nconst { format, parseISO, formatISO, isSameMinute } = await npm(\"date-fns\");\r\n\r\nconst NOTION_URL = await env(\"NOTION_URL\");\r\nconst DATABASE_ID = await env(\"NOTION_DATABASE_ID\");\r\nconst TOKEN = await env(\"NOTION_TOKEN\");\r\n\r\nconst notion = new Client({\r\n  auth: TOKEN,\r\n});\r\n\r\n/**\r\n * Create a heading two block\r\n *\r\n * @param content\r\n * @returns block object https://developers.notion.com/reference/block#heading-two-blocks\r\n */\r\nconst createHeadingBlock = (content: string) => {\r\n  return {\r\n    object: \"block\",\r\n    type: \"heading_2\",\r\n    heading_2: {\r\n      text: [\r\n        {\r\n          type: \"text\",\r\n          text: {\r\n            content,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Create a bulleted litst item block\r\n *\r\n * @param content\r\n * @returns block object https://developers.notion.com/reference/block#bulleted-list-item-blocks\r\n */\r\nconst createBulletItemBlock = (content: string) => {\r\n  return {\r\n    object: \"block\",\r\n    type: \"bulleted_list_item\",\r\n    bulleted_list_item: {\r\n      text: [\r\n        {\r\n          type: \"text\",\r\n          text: {\r\n            content,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Query the database by the name and today's date\r\n *\r\n * https://developers.notion.com/reference/post-database-query\r\n * @returns database object https://developers.notion.com/reference/database\r\n */\r\nconst queryDatabase = async () =>\r\n  await notion.databases.query({\r\n    database_id: DATABASE_ID,\r\n    filter: {\r\n      and: [\r\n        {\r\n          property: \"Name\",\r\n          text: {\r\n            contains: \"Thoughts\",\r\n          },\r\n        },\r\n        {\r\n          property: \"Created\",\r\n          created_time: {\r\n            equals: formatISO(new Date(), { representation: \"date\" }),\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    sorts: [\r\n      {\r\n        property: \"Created\",\r\n        direction: \"ascending\",\r\n      },\r\n    ],\r\n  });\r\n\r\n/**\r\n * Create a new page in the database with today's date and a Daily tag\r\n *\r\n * https://developers.notion.com/reference/create-a-database\r\n * @returns https://developers.notion.com/reference/page\r\n */\r\nconst createPage = async () =>\r\n  await notion.pages.create({\r\n    parent: {\r\n      database_id: DATABASE_ID,\r\n    },\r\n    icon: {\r\n      type: \"emoji\",\r\n      emoji: \"📝\",\r\n    },\r\n    properties: {\r\n      Name: {\r\n        title: [\r\n          {\r\n            text: {\r\n              content: `${format(new Date(), \"yyyy-MM-dd\")} - Thoughts`,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      Tags: {\r\n        multi_select: [{ name: \"Daily\" }],\r\n      },\r\n    },\r\n    children: [createHeadingBlock(`${format(new Date(), \"HH:mm\")}`)],\r\n  });\r\n\r\nconst hasThoughtsForTheDay = (thoughts?: any[]) => thoughts && thoughts.length > 0;\r\n\r\n// Query the database for the page that contains the \"Thoughts\" label and the today's date\r\nconst { results: database } = await queryDatabase();\r\n// If we don't have a page for today we create a new one\r\nconst page = hasThoughtsForTheDay(database) ? database[0] : await createPage();\r\n\r\nwhile (true) {\r\n  const thought = await arg({\r\n    placeholder: \"Thought:\",\r\n    hint: `Type \"open\" to open journal in browser`,\r\n  });\r\n\r\n  // Will open the journal in a new tab in your default browser and exit the script\r\n  if (thought === \"open\") {\r\n    focusTab(`${NOTION_URL}/${DATABASE_ID}`);\r\n    break;\r\n  }\r\n\r\n  // List all the children in the page\r\n  const { results: children } = await notion.blocks.children.list({\r\n    block_id: page.id,\r\n    page_size: 42, // The number of items from the full list desired in the response. Maximum: 100\r\n  });\r\n\r\n  // Get last heading block we have on the page\r\n  const headingBlock = [...children].reverse().find((obj: any) => obj.type === \"heading_2\");\r\n\r\n  // Check if the last heading is not same time as the current time we need to create a new heading block\r\n  const isSameTime = isSameMinute(parseISO(headingBlock?.created_time), new Date());\r\n  if (!isSameTime) {\r\n    await notion.blocks.children.append({\r\n      block_id: page.id,\r\n      children: [createHeadingBlock(format(new Date(), \"HH:mm\"))],\r\n    });\r\n  }\r\n\r\n  // Append the item to the last heading block\r\n  await notion.blocks.children.append({\r\n    block_id: page.id,\r\n    children: [createBulletItemBlock(thought)],\r\n  });\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Read Random link from a mardown file","description":"","author":"Horacio Herrera","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/725120?u=9a4ac0020d0e405b332b2c408ef77588c67bf8b2&v=4","user":"horacioh","discussion":"https://github.com/johnlindquist/kit/discussions/618","url":"","title":"Open a random link from a markdown file","command":"open-a-random-link-from-a-markdown-file","content":"I have a list of all the links I want to read in a markdown file. and I build this script to open a random link to start reading!\r\n\r\n```js\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\n// Menu: Read Random link from a mardown file\r\n// Description: Open a random link from a markdown file\r\n// Author: Horacio Herrera\r\n// Twitter: @hhg2288\r\n\r\n/** @type {typeof import(\"unified\")} */\r\nlet { unified } = await npm(\"unified\")\r\n/** @type {typeof import(\"remark-parse\").default} */\r\nlet remarkParse = await npm(\"remark-parse\")\r\n/** @type {typeof import(\"unist-util-visit\")} */\r\nlet { visit } = await npm(\"unist-util-visit\")\r\n\r\n// get the markdown file you want to parse\r\nlet file = home(`workspace/braindump/inbox.md`)\r\nlet contents = await readFile(file, \"utf-8\")\r\nlet tree = unified().use(remarkParse).parse(contents)\r\n\r\n// create an array of links\r\nlet links = []\r\nvisit(tree, \"link\", function linkVisitor(node) {\r\n  links.push(node)\r\n})\r\n\r\n// open a random url from the generated list\r\nlet index = Math.floor(Math.random() * (links.length - 1))\r\nexec(`open '${links[index].url}'`)\r\n\r\n```\r\n\r\nthere are some things I want to modify to make it better and more \"agnostic\":\r\n- [x] let de user set the file he/she wants to parse\r\n- [ ] store the remark AST result in the db, and maybe update it everytime I update the file (which I do using another script)\r\n- [ ] update the file and create another list of the links I \"visited\"\r\n\r\nany feedback and suggestion is welcome!\r\n\r\n\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"avatar":"https://avatars.githubusercontent.com/u/17577332?v=4","user":"pomdtr","author":"Achille Lacoin","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/607","url":"","title":"Updated Raycast Integration","command":"updated-raycast-integration","content":"I've built a new extension to be able to launch my scripts from raycast. It would be cool to get a review from you @johnlindquist !\r\n\r\nLink to the pull request: https://github.com/raycast/extensions/pull/399\r\n\r\nhttps://user-images.githubusercontent.com/17577332/142733677-ae7fcd29-e267-4301-a4e7-1ac86b030c98.mp4","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Search Kent's Blog","avatar":"https://avatars.githubusercontent.com/u/5678065?u=e2e528a3ee58b5150a1947c7ded93695b35a8779&v=4","user":"Alarid","author":"Yohann Legrand","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/600","url":"https://gist.githubusercontent.com/Alarid/210958c034bfeda6f1baf1cc29eed91e/raw/7777c4ed25cbbc5a4f7a5bd3bd9b7a50435e8ee1/search-kent-blog.js","title":"Search Kent C. Dodds blog","command":"search-kent-c-dodds-blog","content":"Because we all love [Kent's blog](https://kentcdodds.com/blog) so much, I made a small script to quickly search for a blog post 😁\r\n\r\n[Install search-kent-blog](https://scriptkit.com/api/new?name=search-kent-blog&url=https://gist.githubusercontent.com/Alarid/210958c034bfeda6f1baf1cc29eed91e/raw/7777c4ed25cbbc5a4f7a5bd3bd9b7a50435e8ee1/search-kent-blog.js\")\r\n\r\n```js\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n// Menu: Search Kent's Blog\r\n\r\nconst query = await arg(\"Query\")\r\nexec(`open https://kentcdodds.com/s/${encodeURIComponent(query)}`)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"exclude":"true","avatar":"https://avatars.githubusercontent.com/u/5678065?u=e2e528a3ee58b5150a1947c7ded93695b35a8779&v=4","user":"Alarid","author":"Yohann Legrand","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/599","url":"https://gist.githubusercontent.com/Alarid/cc25e78cefa3ae73f6b3ed12bc50ca8c/raw/2fd224db495e10f557ccfe2b209ba624f69217e3/purge-unused-git-branches.js","title":"Purge unused Git branches","command":"purge-unused-git-branches","content":"[Install purge-unused-git-branches](https://scriptkit.com/api/new?name=purge-unused-git-branches&url=https://gist.githubusercontent.com/Alarid/cc25e78cefa3ae73f6b3ed12bc50ca8c/raw/2fd224db495e10f557ccfe2b209ba624f69217e3/purge-unused-git-branches.js)\r\n\r\n## Demo\r\nhttps://user-images.githubusercontent.com/5678065/142405828-21e7a439-b127-4fcb-af13-7cbe6d947400.mov\r\n\r\n## Purpose\r\nI find it quite annoying to keep old/unused Git branches in my local repositories. Most of the time, those branches have been merged some time ago, but I keep on forgetting to delete them manually. So I made this little utility to help me/you with that 😇\r\n\r\nIt will simply compare your local branches with the remote ones, and ask you if you wish to delete all the unused branches, or select the ones you want to remove manually. \r\n\r\n## Notes\r\nYou must use this script in your terminal, in a Git repository folder. This is why I excluded it from the Kit UI. Adding Kit scripts to your Path will make it easier to run this one from anywhere:\r\n```\r\n# Add this in your .zhsrc or .bashrc\r\nexport PATH=$HOME/.kenv/bin:$PATH\r\n```\r\nThen run the script from anywhere (in a Git repo):\r\n```\r\npurge-unused-git-branches\r\n```\r\n\r\n## Source\r\n```js\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n// Exclude: true\r\n\r\n$.verbose = false\r\n\r\nconst TOKENS_TO_REMOVE = [\"* \", \"origin/\", \"HEAD -> \"]\r\n\r\n// Utility to process ZX output by converting lines into an array and removing\r\n// some tokens from the branch names (so remote branches and local branches have\r\n// the same name)\r\nconst processOutput = (output) => [\r\n  ...new Set(\r\n    output\r\n      .split(\"\\n\")\r\n      .map((branch) => {\r\n        let res = branch.trim()\r\n        TOKENS_TO_REMOVE.forEach((token) => (res = res.replaceAll(token, \"\")))\r\n        return res\r\n      })\r\n      .filter((branch) => branch.length > 0)\r\n  ),\r\n]\r\n\r\n// Retrieve remote and local branches\r\nconsole.log(\"Parsing remote and local branches...\")\r\nconst remoteBranches = await $`git branch -r`.then((output) =>\r\n  processOutput(output.stdout)\r\n)\r\nconst localBranches = await $`git branch`.then((output) =>\r\n  processOutput(output.stdout)\r\n)\r\n\r\n// Compute the set of branches that are not used\r\nconst branchesToRemove = localBranches.filter(\r\n  (branch) => !remoteBranches.includes(branch)\r\n)\r\n\r\n// No branches to remove, nothing to do !\r\nif (branchesToRemove.length === 0) {\r\n  console.log(\"No branches to remove. All good 👌\")\r\n  exit()\r\n}\r\n\r\n// Output the list of branches to remove\r\nconsole.log(\r\n  `Found ${branchesToRemove.length} branches that only exist locally:`\r\n)\r\nbranchesToRemove.map((branch) => console.log(`  - ${branch}`))\r\nconsole.log()\r\n\r\n// Ask the user to confirm the list of branches to remove\r\nconst choice = await arg({\r\n  placeholder:\r\n    \"Do you wish to delete all thoses branches, or select some manually ?\",\r\n  hint: \"[a]ll/[s]elect\",\r\n})\r\nif (choice === \"a\") {\r\n  // Removing all branches at once\r\n  console.log(\"Deleting all branches...\")\r\n  for (const branch in branchesToRemove) {\r\n    await $`git branch -D ${branchesToRemove[branch]}`\r\n  }\r\n  console.log(\"✅ Done.\")\r\n} else if (choice === \"s\") {\r\n  // Ask the user to select branches to remove\r\n  for (const branch in branchesToRemove) {\r\n    const branchName = branchesToRemove[branch]\r\n    const answer = await arg({\r\n      placeholder: `Delete ${branchName}?`,\r\n      hint: `[y]es/[n]o/[e]xit`,\r\n    })\r\n    if (answer === \"y\") {\r\n      try {\r\n        await $`git branch -D ${branchName}`\r\n        console.log(`✅ Branch ${branchName} successfully deleted locally.`)\r\n      } catch (err) {\r\n        console.error(\r\n          `❌ Something went wrong while deleting your branch ${branchName}.`\r\n        )\r\n      }\r\n    } else if (answer === \"e\") {\r\n      console.log(\"Exiting...\")\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nconsole.log(\"All done, bye 👋\")\r\n```\r\n\r\n[Install purge-unused-git-branches](https://scriptkit.com/api/new?name=purge-unused-git-branches&url=https://gist.githubusercontent.com/Alarid/cc25e78cefa3ae73f6b3ed12bc50ca8c/raw/2fd224db495e10f557ccfe2b209ba624f69217e3/purge-unused-git-branches.js)","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Weather Degree Converter","author":"Nadeem Khedr","twitter":"nadeemkhedr","avatar":"https://avatars.githubusercontent.com/u/180256?v=4","user":"nadeemkhedr","discussion":"https://github.com/johnlindquist/kit/discussions/597","url":"","title":"Weather converter °C/°F conversion","command":"weather-converter-cf-conversion","content":"I wanted to share a semi-useful script, primarily if you work between the states and other countries.\r\n\r\nHere I wanted to create a simple script that will run both in the CLI/UI. You enter weather in formats like `30c` or `90f,` which will convert it the other way.\r\n\r\nAlso, from the UI, it's real-time. So you will get the result while typing. \r\n\r\nThe output can improve (especially the error state). I might do it later.\r\n\r\n```javascript\r\n// Menu: Weather Degree Converter\r\n// Author: Nadeem Khedr\r\n// Twitter: @nadeemkhedr\r\n\r\nlet convertToF = (c) => {\r\n  return (c * 9) / 5 + 32\r\n}\r\n\r\nconst convertToC = (f) => {\r\n  return ((f - 32) * 5) / 9\r\n}\r\n\r\nconst getDegreeWithType = (input) => {\r\n  const matchRegex = /(\\d+)(f|c)/i\r\n  const result = matchRegex.exec(input)\r\n  if (!result) {\r\n    return null\r\n  }\r\n  return {\r\n    degree: parseInt(result[1], 10),\r\n    type: result[2].toLowerCase(),\r\n  }\r\n}\r\n\r\nconst degreeConverter = (input) => {\r\n  const degreeResult = getDegreeWithType(input)\r\n  if (!degreeResult) {\r\n    return \"You need to enter the unit in this format '30c' or '90f'\"\r\n  }\r\n\r\n  const { degree, type } = degreeResult\r\n  let oDegree = null\r\n  let oType = null\r\n  if (type === 'c') {\r\n    oDegree = convertToF(degree)\r\n    oType = 'F'\r\n  } else {\r\n    oDegree = convertToC(degree)\r\n    oType = 'C'\r\n  }\r\n  return `${oDegree.toFixed(1)}°${oType}`\r\n}\r\n\r\nconst deg = await arg(\r\n  'Enter degress in °C or °F',\r\n  (input) =>\r\n    `<div class=\"text-2xl flex justify-center items-center p-5\">\r\n${input ? degreeConverter(input) : `Waiting for input`}\r\n</div>`\r\n)\r\n\r\ndiv(degreeConverter(deg))\r\n\r\n\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Track Todo","description":"","author":"David Losert","twitter":"david_losert","avatar":"https://avatars.githubusercontent.com/u/4287128?u=70e8d6e39f4addac43ee9849c8d9c150363e460e&v=4","user":"davelosert","discussion":"https://github.com/johnlindquist/kit/discussions/559","url":"","title":"Start tracking a Todoist Todo with Toggl","command":"start-tracking-a-todoist-todo-with-toggl","content":"Select a task from `Todoist` (configured from tasks assigned to `today`) and start a `Toggl`-timer for it.\r\nIf both, `Todoist` and `Toggl` have a Project with the same name, that project is automatically linked in the Tracking-Entry.\r\n\r\nEven though this script is very opinionated to those two tools, it might inspire you to do something similar with the tools of your choice. 😉 \r\n\r\n```typescript\r\n// Menu: Track Todo\r\n// Description: Start the tracking timer of Toggl with a todo from today of Todoist.\r\n// Author: David Losert\r\n// Twitter: @david_losert\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { getTodosOfToday, getProjectById } from '../lib/Todoist';\r\nimport { startTimeTrackerFor } from '../lib/Toggl';\r\n\r\nconst todosToday = await getTodosOfToday();\r\n\r\nconst selectedTodo = await arg(\r\n  'Select Todo to start', \r\n  todosToday.map((todo) => ({\r\n    name: todo.content,\r\n    value: todo\r\n  })\r\n));\r\n\r\nlet projectName;\r\nif(selectedTodo.project_id) {\r\n  const project = await getProjectById(selectedTodo.project_id);\r\n  projectName = project.name;\r\n}\r\n\r\nconst result = await startTimeTrackerFor({ \r\n  description: selectedTodo.content,\r\n  projectName\r\n});\r\n\r\nawait notify({\r\n  title: 'Tracking Started.',\r\n  message: `Started Tracking for ${result.description}.`\r\n});\r\n```\r\n\r\nAs I am planing to write some more actions for Todoist as well as Toggl, I externalized accessing them into two modules (might put them into own npm modules when I have the time):\r\n\r\n## `../lib/Todoist.ts`:\r\n\r\n```typescript\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst axios = await npm('axios');\r\n\r\nconst todoistApiToken = await env('TODOIST_API_TOKEN');\r\n\r\n// Types omit properties not relevant right now\r\ntype TodoistTask = {\r\n    id: number,\r\n    project_id: number,\r\n    content: string,\r\n };\r\n\r\ntype TodoistProject = {\r\n  id: number,\r\n  name: string,\r\n};\r\n\r\nconst getTodosOfToday = async (): Promise<TodoistTask[]> => {\r\n  const response =  await axios({\r\n    method: 'GET',\r\n    url: 'https://api.todoist.com/rest/v1/tasks?filter=today',\r\n    headers: {\r\n      'Authorization': `Bearer ${todoistApiToken}`\r\n    }\r\n  });\r\n  return response.data;\r\n};\r\n\r\nconst getProjectById = async (id: number): Promise<TodoistProject> => {\r\n  const response =  await axios({\r\n    method: 'GET',\r\n    url: `https://api.todoist.com/rest/v1/projects/${id}`,\r\n    headers: {\r\n      'Authorization': `Bearer ${todoistApiToken}`\r\n    }\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport {\r\n  getTodosOfToday,\r\n  getProjectById\r\n};\r\n```\r\n\r\n## `../lib/Toggl.ts`\r\n\r\n```typescript\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst axios = await npm('axios');\r\nconst togglApiToken = await env('TOGGL_API_TOKEN');\r\nconst togglWorkspaceId = await env('TOGGL_WORKSPACE_ID');\r\n\r\nconst auth = {\r\n      username: togglApiToken,\r\n      // not a real password - the token is the actual secret. For whatever reason, toggl expects it this way around.\r\n      password: 'api_token'\r\n };\r\n\r\n// Types omit properties not relevant right now\r\ntype TimeEntry = {\r\n    id: number,\r\n    description: string,\r\n};\r\n\r\ntype TogglProject = {\r\n  id: number,\r\n  name: string,\r\n}\r\n\r\nconst getProjectByName = async(name: string): Promise<TogglProject | undefined> => {\r\n  const response = await axios({\r\n    method: 'GET',\r\n    url: `https://api.track.toggl.com/api/v8/workspaces/${togglWorkspaceId}/projects`,\r\n    auth\r\n  });\r\n  return response.data.find((project: TogglProject): boolean => project.name === name)\r\n}\r\n\r\nconst startTimeTrackerFor = async (\r\n  {description, projectName}: { description: string, projectName?: string}\r\n): Promise<TimeEntry> => {\r\n  let projectId;\r\n  if(projectName) {\r\n    const project = await getProjectByName(projectName);\r\n    projectId = project.id;\r\n  }\r\n  \r\n  const response = await axios({\r\n    method: 'POST',\r\n    url: 'https://api.track.toggl.com/api/v8/time_entries/start',\r\n    data: {\r\n      time_entry: {\r\n        description,\r\n        pid: projectId,\r\n        created_with: 'script-kit'\r\n      }\r\n    },\r\n    auth\r\n  });\r\n  return response.data.data;\r\n}\r\n\r\nexport {\r\n  startTimeTrackerFor\r\n};\r\n\r\n\r\nexport {\r\n  startTimeTrackerFor\r\n};\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Change Wallpaper","description":"","author":"David Losert","twitter":"david_losert","avatar":"https://avatars.githubusercontent.com/u/4287128?u=70e8d6e39f4addac43ee9849c8d9c150363e460e&v=4","user":"davelosert","discussion":"https://github.com/johnlindquist/kit/discussions/501","url":"","title":"Change Wallpaper","command":"change-wallpaper","content":"Here is a little script I wrote to easily change the background-wallpaper. \r\n\r\nI use this as I have to set a certain wallpaper before doing webinars or screencasts for my clients.\r\n\r\n```typescript\r\n// Menu: Change Wallpaper\r\n// Description: Change your background wallpaper by selecting from a configured folder.\r\n// Author: David Losert\r\n// Twitter: @david_losert\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\n// Set to the folder where you keep all your wallpapers for easy selection\r\nconst wallpapersPath = await env('WALLPAPER_PATH');\r\n\r\nconst availableWallpapers = ls(wallpapersPath);\r\nconst selectedWallpaper = await arg('select', availableWallpapers.map(image => {\r\n  const imagePath = path.resolve(wallpapersPath, image);\r\n  return {\r\n    name: image,\r\n    preview: `<img src=\"${imagePath}\">`,\r\n    value: imagePath\r\n  };\r\n}));\r\n\r\nawait applescript(`tell application \"Finder\" to set desktop picture to POSIX file \"${selectedWallpaper}\"`);\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Say Hello World Shortcut","description":"","author":"James Henry","twitter":"MrJamesHenry","avatar":"https://avatars.githubusercontent.com/u/900523?u=ab7e35b384354f771ecd6d683d12dade83d221dd&v=4","user":"JamesHenry","discussion":"https://github.com/johnlindquist/kit/discussions/496","url":"https://gist.githubusercontent.com/JamesHenry/75292ec21a02dcb8918a96c018d47a37/raw/77182d0c994698de037c5b12cc6bc5b30949c0d6/macos-monterey-shortcuts-example.js","title":"🔥 Automation Overload - Example of running macOS Monterey Shortcuts via Script Kit","command":"automation-overload-example-of-running-macos-monterey-shortcuts-via-script-kit","content":"\r\n[Install macos-monterey-shortcuts-example](https://scriptkit.com/api/new?name=macos-monterey-shortcuts-example&url=https://gist.githubusercontent.com/JamesHenry/75292ec21a02dcb8918a96c018d47a37/raw/77182d0c994698de037c5b12cc6bc5b30949c0d6/macos-monterey-shortcuts-example.js\")\r\n\r\n```js\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\n// Menu: Say Hello World Shortcut\r\n// Description: Trigger macOS Monterey Shortcut from Script Kit\r\n// Author: James Henry\r\n// Twitter: @MrJamesHenry\r\n\r\n/**\r\n * I have created a Shortcut on my Mac running macOS Monterey called\r\n * \"Say Hello World\".\r\n *\r\n * There are a couple of options available when it comes to invoking\r\n * it programmatically (whether via Script Kit or in general).\r\n */\r\n\r\n/**\r\n * OPTION 1:\r\n *\r\n * You can use the `shortcuts` CLI that is preinstalled on macOS\r\n * Monterey to run named Shortcuts.\r\n */\r\nawait $`shortcuts run \"Say Hello World\"`;\r\n\r\n/**\r\n * OPTION 2:\r\n *\r\n * You can use AppleScript to communicate with the \"Shortcuts\"\r\n * application on macOS Monterey to run named Shortcuts.\r\n *\r\n * NOTE: I first tried to communicate with \"Shortcuts Events\" per this\r\n * video from WWDC 2021, but it does not work:\r\n * https://developer.apple.com/videos/play/wwdc2021/10232/?time=1539\r\n */\r\nawait applescript(`\r\n  tell application \"Shortcuts\"\r\n    run the shortcut named \"Say Hello World\"\r\n  end tell\r\n`);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Currency Converter using google","author":"Jakub Olek","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","discussion":"https://github.com/johnlindquist/kit/discussions/494","url":"https://gist.githubusercontent.com/hakubo/d4822cfc6e42d7dead70d4da73bfded9/raw/97afb98be93518b2550448e5b81d425b79642ed2/currency-converter.js","title":"Currency Converter using Google :)","command":"currency-converter-using-google","content":"Since most of currency converters are paid APIs - why not just use google for this task :)\r\n\r\nhttps://user-images.githubusercontent.com/1018759/138569135-4b682b44-8b8b-4e9b-bd30-64c180bd1d5f.mp4\r\n\r\n\r\n[Install currency-converter](https://scriptkit.com/api/new?name=currency-converter&url=https://gist.githubusercontent.com/hakubo/d4822cfc6e42d7dead70d4da73bfded9/raw/97afb98be93518b2550448e5b81d425b79642ed2/currency-converter.js\")\r\n\r\n```js\r\n// Menu: Currency Converter using google\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nconst from = await arg(\"from\", [\"pln\", \"usd\", \"eur\"]);\r\nconst to = await arg(\"to\", [\"usd\", \"pln\", \"eur\"]);\r\nconst query = await arg(\"amount\");\r\nconst value = await scrapeSelector(\r\n  `https://google.com/search?q=${encodeURIComponent(\r\n    query + \" \" + from + \" \" + to\r\n  )}`,\r\n  \"span[data-value]\"\r\n);\r\n\r\ndiv(query + \" \" + from + \" = \" + value + \" \" + to, \"p-4\");\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"JA → EN","description":"","author":"Brandon Pittman","shortcut":"ctrl j","avatar":"https://avatars.githubusercontent.com/u/967145?u=a0c390fc6689da83a5fb10aa017ed9f58466673a&v=4","user":"brandonpittman","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/491","url":"","title":"Quick Google Translate","command":"quick-google-translate","content":"I whipped up a quick action to take some selected text and open Google Translate with it. Swap out the source, `sl`, and target, `tl`, with your most commonly used languages.\r\n\r\n[Install script](https://scriptkit.com/api/new?name=quick-translate&url=https://gist.githubusercontent.com/brandonpittman/18791a65c6721f822473b2f1900cfb50/raw/52b9db763ed4ab31139994611aaa57a0b871e46a/google-translate.ts)\r\n\r\n```ts\r\n// Menu: JA → EN\r\n// Description: Translate selected text into with Google Translate.\r\n// Author: Brandon Pittman\r\n// Shortcut: ctrl j\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst origin = \"https://translate.google.com\";\r\nconst text = await getSelectedText();\r\nconst sl = \"ja\";\r\nconst tl = \"en\";\r\nconst op = \"translate\";\r\n\r\nconst url = encodeURI(`${origin}/?sl=${sl}&tl=${tl}&text=${text}&op=${op}`);\r\n\r\nexec(`open \"${url}\"`, { encoding: \"utf8\" });\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"RCKIK mobile","description":"","author":"Jakub Olek","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","discussion":"https://github.com/johnlindquist/kit/discussions/490","url":"https://gist.githubusercontent.com/hakubo/947f4d98c74acaa041cb9944039e4479/raw/90a0ea842b9341e8592dd30dc5a8c1a29c91212f/rckik.js","title":"RCKIK mobile busses","command":"rckik-mobile-busses","content":"This is for Poznań, Poland only. Data taken from https://www.rckik.poznan.pl/najblizsze-wyjazdy\r\n\r\nIt'll show a list of next places where you can find a bus in which you can donate a blood in Poznań - filtered by given text so you can narrow list to locations closest to you.\r\n\r\nThis is WIP - I'll try to optimize it and maybe make the list easier to read.\r\n\r\n\r\n![Screenshot 2021-10-19 at 11 39 17](https://user-images.githubusercontent.com/1018759/137884912-27795174-e583-4c32-beed-14ea806b125a.png)\r\n\r\n\r\n[Install rckik](https://scriptkit.com/api/new?name=rckik&url=https://gist.githubusercontent.com/hakubo/947f4d98c74acaa041cb9944039e4479/raw/90a0ea842b9341e8592dd30dc5a8c1a29c91212f/rckik.js\")\r\n\r\n```js\r\n// Menu: RCKIK mobile\r\n// Description: Show filtered plan of mobile RCKIK busses\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nfunction transform(node) {\r\n  // Edit that to filter locations that you're interested in\r\n  // has to be inside transform function - as it's being serialized and passed to browser\r\n  const filter = \"Poznań\";\r\n  const columns = [...node.querySelectorAll(\"td\")];\r\n\r\n  if (columns[3].innerHTML.startsWith(filter)) {\r\n    return (\r\n      columns[0].querySelector(\"a\").innerHTML +\r\n      \" \" +\r\n      columns[3].innerHTML +\r\n      \" \" +\r\n      columns[2].innerHTML\r\n    );\r\n  }\r\n}\r\n\r\nconst pagination = await scrapeSelector(\r\n  \"https://www.rckik.poznan.pl/najblizsze-wyjazdy?page=1\",\r\n  \".pagination li\"\r\n);\r\n\r\nconst numberOfPages = pagination.length;\r\nlet t = [];\r\n\r\nfor (let i = 1; i <= numberOfPages; i += 1) {\r\n  const result = await scrapeSelector(\r\n    `https://www.rckik.poznan.pl/najblizsze-wyjazdy?page=${i}`,\r\n    \"#calendarTable tr:not(.header):not(.canceled)\",\r\n    transform\r\n  );\r\n\r\n  t = t.concat(result);\r\n}\r\n\r\ndiv(\r\n  `<ul>${t\r\n    .filter(Boolean)\r\n    .map((date) => `<li>${date}</li>`)\r\n    .join(\"\")}</ul>`,\r\n  \"p-4\"\r\n);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Weather by yr.no","author":"Jakub Olek","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","discussion":"https://github.com/johnlindquist/kit/discussions/489","url":"https://gist.githubusercontent.com/hakubo/1fc8e04a0ab26a251c6e5113ae8e85ed/raw/ae24bf7daeea3127d9be6bd0a7cd48949921e743/weather.js","title":"Weather by yr.no","command":"weather-by-yrno","content":"Very simple weather forecast (as pdf 🤣  ) from yr.no bit manual to setup but should be simple an quick.\r\n\r\n![image](https://user-images.githubusercontent.com/1018759/137885137-d2e26e62-668c-4949-a389-b98b7425601c.png)\r\n\r\n[Install weather](https://scriptkit.com/api/new?name=weather&url=https://gist.githubusercontent.com/hakubo/1fc8e04a0ab26a251c6e5113ae8e85ed/raw/ae24bf7daeea3127d9be6bd0a7cd48949921e743/weather.js\")\r\n\r\n```js\r\n// Menu: Weather by yr.no\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\n/**\r\n * 1. Open https://www.yr.no/\r\n * 2. Find your location\r\n * 3. Copy what comes AFTER https://www.yr.no/en/forecast/daily-table/ to location const\r\n */\r\n\r\nconst location = \"5-1233000/Poland/Poznan\";\r\n\r\ndiv(\r\n  `<iframe src=\"https://www.yr.no/en/print/forecast/${location}#toolbar=0\" height=800 width=600/>`,\r\n  \"p-2\"\r\n);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"shortcode":"asos","menu":"search-asos","description":"","author":"Vasilis Kortsimelidis","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/4882345?u=b84755144b8f4f75f19a42c33667dcc66819f7de&v=4","user":"vaskort","discussion":"https://github.com/johnlindquist/kit/discussions/485","url":"https://gist.githubusercontent.com/vaskort/2c7dcba1649783d51d1df2cb860ab2dd/raw/988c94b6eba344a61d9b9a0ee51c7b7e70870a07/search-asos.js","title":"Search ASOS","command":"search-asos","content":"It will search at ASOS.com\r\n\r\n[Install search-asos](https://scriptkit.com/api/new?name=search-asos&url=https://gist.githubusercontent.com/vaskort/2c7dcba1649783d51d1df2cb860ab2dd/raw/988c94b6eba344a61d9b9a0ee51c7b7e70870a07/search-asos.js)\r\n\r\n```js\r\n// Shortcode: asos\r\n// Menu: search-asos\r\n// Description: Search ASOS\r\n// Author: Vasilis Kortsimelidis\r\n// Twitter: @vas_kort\r\n\r\nlet searchTerm = await arg(\"ASOS term to search for:\")\r\nlet termWithEncodedSpaces = searchTerm.replace(/ /g, \"%20\");\r\n\r\nexec(`open https://www.asos.com/search/?q=${termWithEncodedSpaces}`)\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Record Screen","description":"","author":"Jakub Olek","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","discussion":"https://github.com/johnlindquist/kit/discussions/483","url":"https://gist.githubusercontent.com/hakubo/e3c8698169fede4baad7d9d938c37a25/raw/b8bba52ed97317eb7c8ced279d48765a04214d9e/record-screen.js","title":"Record screen","command":"record-screen","content":"This script just opens Quick Time Player and turns on recording of part of your screen.\r\n\r\nIt has a dependency on another script by @johnlindquist app-launcher: https://www.scriptkit.com/johnlindquist/app-launcher\r\n\r\n\r\n[Install record-screen](https://scriptkit.com/api/new?name=record-screen&url=https://gist.githubusercontent.com/hakubo/e3c8698169fede4baad7d9d938c37a25/raw/b8bba52ed97317eb7c8ced279d48765a04214d9e/record-screen.js\")\r\n\r\n```js\r\n// Menu: Record Screen\r\n// Description: Start QuickTime player and open screen recorder\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\nawait run(\"app-launcher\", \"QuickTime Player\");\r\nawait keystroke(\"command control n\");\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Ping","description":"","author":"Jakub Olek","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","discussion":"https://github.com/johnlindquist/kit/discussions/482","url":"https://gist.githubusercontent.com/hakubo/f499d770a72aeb944350c075e722701c/raw/c04fd12e149004bc23803458888bf87dfb4807c2/ping.js","title":"Ping","command":"ping","content":"Run ping to a destination and draw a chart of latest entries.\r\n\r\n\r\nhttps://user-images.githubusercontent.com/1018759/136839677-7bdf6871-8742-4480-a8e1-54f064e6cc50.mp4\r\n\r\n\r\n\r\n[Install ping](https://scriptkit.com/api/new?name=ping&url=https://gist.githubusercontent.com/hakubo/f499d770a72aeb944350c075e722701c/raw/c04fd12e149004bc23803458888bf87dfb4807c2/ping.js\")\r\n\r\n```js\r\n// Menu: Ping\r\n// Description: Ping destination and show line graph of latest values\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\nconst jsdom = await npm(\"jsdom\");\r\nawait npm(\"canvas\");\r\nconst Chart = await npm(\"chart.js\");\r\n\r\nconst { JSDOM } = jsdom;\r\n\r\n// Edit the list to suit your needs\r\nconst destination = await arg(\"ping\", [\"8.8.8.8\", \"google.com\"]);\r\n\r\n// How many entries should the chart show\r\nconst entries = 20;\r\n\r\nconst command = `ping ${destination}`;\r\nconst child = exec(command, { async: true });\r\n\r\nconst dom = new JSDOM(\r\n  `<!DOCTYPE html><canvas id=\"bar-chart\" width=\"800\" height=\"450\"></canvas>`\r\n);\r\n\r\nglobal.window = dom.window;\r\n\r\nChart.defaults.color = \"white\";\r\nChart.defaults.font = { size: 24, weight: \"bold\" };\r\n\r\nconst labels = new Array(entries)\r\n  .fill()\r\n  .map((_, i) => i)\r\n  .reverse();\r\n\r\nlet output = [];\r\nconst chartData = {\r\n  labels: labels,\r\n  datasets: [\r\n    {\r\n      label: `${command}: - ms`,\r\n      backgroundColor: \"rgb(255, 99, 132)\",\r\n      borderColor: \"rgb(255, 99, 132)\",\r\n      data: output,\r\n    },\r\n  ],\r\n};\r\n\r\nconst chart = new Chart(dom.window.document.getElementById(\"bar-chart\"), {\r\n  type: \"line\",\r\n  data: chartData,\r\n  options: {\r\n    animation: false,\r\n    tooltips: { enabled: false },\r\n    hover: { mode: null },\r\n  },\r\n});\r\n\r\nlet firstLine = true;\r\n\r\nchild.stdout.on(\"data\", function (data) {\r\n  if (!firstLine) {\r\n    const value = +data.replace(/.*time=(.*)ms/, \"$1\");\r\n    output.push(value);\r\n\r\n    if (output.length > entries) {\r\n      output = output.slice(1);\r\n    }\r\n\r\n    chartData.datasets[0].label = `${command}: ${value}ms`;\r\n    chartData.datasets[0].data = output;\r\n    chart.update();\r\n\r\n    div(`<img src=\"${chart.toBase64Image(\"image/jpeg\", 1)}\"/>`, \"p-4\");\r\n  } else {\r\n    firstLine = false;\r\n  }\r\n});\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Open Jira ticket in browser","description":"","author":"Jakub Olek","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","discussion":"https://github.com/johnlindquist/kit/discussions/481","url":"https://gist.githubusercontent.com/hakubo/f73e67370a52d48ebc28bfbb09114a6a/raw/3d9b16915e3b968cbd899f885fbe58b9540b28fb/open-jira-ticket.js","title":"Open Jira ticket","command":"open-jira-ticket","content":"The script parses selections to find valid JIRA ticket and when found - opens it in browser\r\n\r\n\r\n[Install open-jira-ticket](https://scriptkit.com/api/new?name=open-jira-ticket&url=https://gist.githubusercontent.com/hakubo/f73e67370a52d48ebc28bfbb09114a6a/raw/3d9b16915e3b968cbd899f885fbe58b9540b28fb/open-jira-ticket.js\")\r\n\r\n```js\r\n// Menu: Open Jira ticket in browser\r\n// Description: Parses a valid ticket number from selection and opens it in browser\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n\r\nconst jiraDomain = await env(\"JIRA_DOMAIN\");\r\nconst text = await getSelectedText();\r\nconst jiraTicket = text.match(/([A-Z]{2,5}-[0-9]+)/);\r\n\r\nif (jiraTicket) {\r\n  focusTab(`${jiraDomain}/browse/${jiraTicket[0]}`);\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Mouse Mover","description":"","author":"Benjamin Modayil","twitter":"modayilme","avatar":"https://avatars.githubusercontent.com/u/12306850?u=51152dab74c9158efeb6a84a65acf2464cf84218&v=4","user":"benjaminmodayil","discussion":"https://github.com/johnlindquist/kit/discussions/467","url":"","title":"Mouse Mover (Python Script + ScriptKit)","command":"mouse-mover-python-script-scriptkit","content":"😅 This one is more of a Python script, but I use ScriptKit to launch it. There are moments where I have to leave my computer to address something in another room or need more time than the allotted 10 minutes that Slack provides before it makes it look like I'm unavailable. For the most part, even if I'm in another room, I am still available for conversation/inquiries, so I don't want my coworkers to think I can't be bothered if my status looks like I'm away, but in reality I just might be eating/cooking. So this keeps my computer + work messaging app status in the green so it doesn't look like I'm unavailable.\r\n\r\nThe Python script requires `pyautogui` and `time` modules. I'm not the best for Python troubleshooting as I just learned some Python through YouTube tutorials. All I remember from when I wrote this was that it was a pain to get my computer using the latest version of Python.\r\n\r\nFrom the Python script below, `pyautogui` lets you __exit the script from taking control of your mouse by running `ctrl + c` or moving your mouse to the top right corner of your screen__. Because you can't run `ctrl + c` into a non-existent terminal when using it through ScriptKit, you need to move your mouse to the top right corner of your monitor to exit. \r\n\r\n**Note:** Before connecting/disconnecting external displays while the script is active, you must exit the script first, otherwise you'll have to reconnect/disconnect your displays to the condition of your computer when you started the script to exit.\r\n\r\nYou'll have to squint to see the mouse once the script starts + I only run it for three seconds before closing... Sorry about that.\r\n\r\nhttps://user-images.githubusercontent.com/12306850/135878354-7ab7e798-c63d-4a5e-8ee8-78e938d66b9a.mp4\r\n\r\n```python\r\n\r\n#! /usr/bin/env python3\r\nimport pyautogui\r\nimport time\r\n\r\nwhile True:\r\n    pyautogui.moveRel(0, 50, duration=1.5)\r\n    time.sleep(1)\r\n    pyautogui.moveRel(0, -50, duration=1.5)\r\n    time.sleep(1)\r\n    pyautogui.moveRel(50, 0, duration=1.5)\r\n    time.sleep(1)\r\n    pyautogui.moveRel(-50, 0, duration=1.5)\r\n    time.sleep(1)\r\n\r\n# You can remove a bunch of the repetition above. I just like seeing the mouse move a lot to know it's working.\r\n\r\n```\r\n\r\nHere's the ScriptKit launcher. This will vary depending on your Python path + Python script path.\r\n\r\n```js\r\n// Menu: Mouse Mover\r\n// Description: Moves your mouse so you don't go inactive in Slack or Microsoft Teams\r\n// Author: Benjamin Modayil\r\n// Twitter: @24props\r\n\r\nawait exec(`/PATH-TO-PYTHON-EXECUTABLE/python3.9 /PATH-TO-SCRIPT/i-am-here.py`)\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"author":"John Lindquist","twitter":null,"description":"","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","discussion":"https://github.com/johnlindquist/kit/discussions/466","url":"","title":"Image Info from Finder","command":"image-info-from-finder","content":"![CleanShot 2021-09-30 at 12 28 58](https://user-images.githubusercontent.com/36073/135510901-7559fcd9-f8e3-4875-be16-f70057efdb26.png)\r\n\r\n\r\n[Install image-info](https://scriptkit.com/api/new?name=image-info&url=https://gist.githubusercontent.com/johnlindquist/3bffee49a8128b0ebf8be12d47dce93a/raw/4b08de2b5cafc79f4244cafe6bd946e660224a61/image-info.ts\")\r\n\r\n```js\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n// Description: Displays Image Info of Selected File\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet sharp = await npm(\"sharp\")\r\n\r\nlet metadata = await sharp(\r\n  await getSelectedFile()\r\n).metadata()\r\n\r\nawait div(\r\n  md(`\r\n~~~json\r\n${JSON.stringify(metadata, null, \"\\t\")}\r\n~~~\r\n`)\r\n)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Switch osx theme","shortcut":"option command t","author":"Oskars Ezerins","avatar":"https://avatars.githubusercontent.com/u/18247063?u=b194d1f49eacbd10e90eeddfc7941822205e75d4&v=4","user":"OskarsEzerins","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/456","url":"","title":"Switch osx theme","command":"switch-osx-theme","content":"Kit has to be given permission for System events in Settings -> Security & Privacy -> Privacy -> Automation\r\n\r\n```js\r\n// Menu: Switch osx theme\r\n// Shortcut: option command t\r\n// Author: Oskars Ezerins\r\n\r\nconst toggleTheme = async () => {\r\n  let script = `\r\n  tell application \"System Events\"\r\n    tell appearance preferences\r\n      set dark mode to not dark mode\r\n    end tell\r\n  end tell\r\n  `.trim()\r\n  return await global.applescript(script)\r\n}\r\n\r\ntoggleTheme()\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"React Sandbox","description":"","author":null,"log":"false","note":"\"rm\" is actually mapped to \"trash\" so files get moved to your trash bin instead of permenantly deleted","avatar":"https://avatars.githubusercontent.com/u/3830326?v=4","user":"stevebarakat","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/444","url":"https://gist.githubusercontent.com/stevebarakat/fcb2d504ba35eb653b72f0b78d1e26b5/raw/433accc5cfc9b35974fffa141d05c410d44b1875/react-sandbox.js","title":"React Sandbox","command":"react-sandbox","content":"\r\n[Install react-sandbox](https://scriptkit.com/api/new?name=react-sandbox&url=https://gist.githubusercontent.com/stevebarakat/fcb2d504ba35eb653b72f0b78d1e26b5/raw/433accc5cfc9b35974fffa141d05c410d44b1875/react-sandbox.js\")\r\n\r\n```js\r\n// Menu: React Sandbox\r\n// Description: Barebones React Starter\r\n// Author: S.Barakat\r\n\r\n//Log: false\r\n\r\n// Prevent Scriptkit from closing until script finishes\r\nsetIgnoreBlur(true);\r\n\r\n// Find and replace\r\nlet replaceInFile = async (filePath, regex, string) => {\r\n  let content = await readFile(filePath, \"utf-8\");\r\n  let updatedContent = content.replace(new RegExp(regex), string);\r\n  await writeFile(filePath, updatedContent);\r\n};\r\n\r\n// $`` is using the \"zx\" tool which wraps around \"exec\"\r\n// \"sed\" is a very powerful search/replace tool. We can use it for removing lines:\r\nlet removeLine = async (searchArgs, file) => {\r\n  for (let n = 0; n < searchArgs.length; n++) {\r\n    await $`sed -i .bak /${searchArgs[n]}/d ${file}`;\r\n  }\r\n};\r\n\r\nlet reset = false;\r\n// Prompt to reset settings\r\nlet resetSettings = await arg(\"Reset settings?\", [\"no\", \"yes\"]);\r\nif (resetSettings === \"yes\") {\r\n  reset = true;\r\n}\r\n\r\n// Prompt for the project name\r\nlet projectName = await arg(\"Project name\");\r\n// Remove any spaces or uppercase letters from project name.\r\nprojectName = await projectName.toLowerCase().replace(/\\s/g, \"\");\r\n\r\n// Prompt for the project directory\r\nlet projectDir = await env(\"PROJECT_DIR\", {\r\n  placeholder: \"proj dir: from home (~/)\",\r\n  reset: reset,\r\n});\r\n\r\n// \"home\" is a helper to create paths in your home dir\r\ncd(home());\r\nmkdir(projectDir);\r\ncd(projectDir);\r\n\r\n// Create new app with CRA\r\nawait $`npx create-react-app ${projectName.toLowerCase()}`;\r\n\r\ncd(path.resolve(projectName, \"src\"));\r\n\r\n// Note: \"rm\" is actually mapped to \"trash\" so files get moved to your trash bin instead of permenantly deleted\r\nrm([\r\n  `App.test.js`,\r\n  `index.css`,\r\n  `setUpTests.js`,\r\n  `reportWebVitals.js`,\r\n  `logo.svg`,\r\n]);\r\n\r\n// remove web-vitals and testing-library\r\nawait \"npm remove web-vitals @testing-library/jest-dom @testing-library/react @testing-library/user-event\";\r\n\r\nlet filePath = path.resolve();\r\n\r\nawait removeLine([\"logo\"], \"App.js\");\r\nawait removeLine([\"WebVitals\", \"vitals\", \"performance\"], \"index.js\");\r\n\r\n// Download to current dir\r\nawait download(\"https://meyerweb.com/eric/tools/css/reset/reset.css\", \".\");\r\n\r\nawait replaceInFile(\r\n  filePath + \"/App.js\",\r\n  `<header className=\"App-header\">\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>`,\r\n  `App`\r\n);\r\n\r\nawait replaceInFile(\r\n  filePath + \"/index.js\",\r\n  `import './index.css'`,\r\n  `import './reset.css'`\r\n);\r\n\r\nawait replaceInFile(\r\n  filePath + \"/App.css\",\r\n  /^(?=[\\S\\s]{10,8000})[\\S\\s]*$/im,\r\n  `\r\n  *,\r\n  *::before,\r\n  *::after {\r\n    box-sizing: border-box;\r\n  }\r\n  body {\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }`\r\n);\r\n\r\nrm([`index.js.bak`, `App.js.bak`]);\r\n\r\nsetIgnoreBlur(false);\r\nedit(`${filePath}/../`);\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"GitLab - next MR","description":"","author":"Jakub Olek","twitter":null,"shortcut":"ctrl opt \\","avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","discussion":"https://github.com/johnlindquist/kit/discussions/440","url":"https://gist.githubusercontent.com/hakubo/9b08be9ee12fa5862dd5e10d8d5ac8b4/raw/1ccb059df8f5017f51250377c71425d81389efaf/nextMR.js","title":"(Gitlab) Open next MR that awaits approval","command":"gitlab-open-next-mr-that-awaits-approval","content":"\r\n[Install nextMR](https://scriptkit.com/api/new?name=nextMR&url=https://gist.githubusercontent.com/hakubo/9b08be9ee12fa5862dd5e10d8d5ac8b4/raw/1ccb059df8f5017f51250377c71425d81389efaf/nextMR.js\")\r\n\r\n```js\r\n// Menu: GitLab - next MR\r\n// Description: Open next MR that I have not approved\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n// Shortcut: ctrl opt \\\r\n\r\nconst { request, gql, GraphQLClient } = await npm(\"graphql-request\");\r\nconst dayjs = await npm(\"dayjs\");\r\nimport relativeTime from \"dayjs/plugin/relativeTime.js\";\r\ndayjs.extend(relativeTime);\r\n\r\nconst domain = await env(\"GITLAB_DOMAIN\");\r\nconst token = await env(\"GITLAB_TOKEN\");\r\nconst username = await env(\"GITLAB_USERNAME\");\r\nconst jiraDomain = await env(\"JIRA_DOMAIN\");\r\nconst requiredApprovals = Number(await env(\"GITLAB_REQUIRED_APPROVALS\"));\r\nconst debug = false;\r\n\r\nfunction log(...args) {\r\n  if (debug) {\r\n    console.log(...args);\r\n  }\r\n}\r\n\r\nconst graphQLClient = new GraphQLClient(domain + \"/api/graphql\", {\r\n  headers: {\r\n    \"PRIVATE-TOKEN\": token,\r\n  },\r\n});\r\n\r\nconst projects = gql`\r\n  query($name: String!) {\r\n    projects(search: $name, membership: true) {\r\n      nodes {\r\n        nameWithNamespace\r\n        fullPath\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nif (!env.GITLAB_PROJECT_PATH) {\r\n  const fullPath = await arg(\"Search project\", async (input) => {\r\n    return (\r\n      await graphQLClient.request(projects, { name: input })\r\n    ).projects.nodes.map((project) => ({\r\n      name: project.nameWithNamespace,\r\n      description: project.fullPath,\r\n      value: project.fullPath,\r\n    }));\r\n  });\r\n\r\n  await cli(\"set-env-var\", \"GITLAB_PROJECT_PATH\", fullPath);\r\n}\r\n\r\nconst queryMrs = gql`\r\n  query($projectPath: ID!) {\r\n    project(fullPath: $projectPath) {\r\n      mergeRequests(state: opened, sort: UPDATED_DESC) {\r\n        nodes {\r\n          title\r\n          webUrl\r\n          iid\r\n          draft\r\n          description\r\n          createdAt\r\n          approvedBy {\r\n            nodes {\r\n              name\r\n              username\r\n            }\r\n          }\r\n          author {\r\n            name\r\n            username\r\n            avatarUrl\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst query = gql`\r\n  query($iid: String!, $projectPath: ID!) {\r\n    project(fullPath: $projectPath) {\r\n      mergeRequest(iid: $iid) {\r\n        commitsWithoutMergeCommits(first: 1) {\r\n          nodes {\r\n            authoredDate\r\n          }\r\n        }\r\n        headPipeline {\r\n          status\r\n        }\r\n        notes {\r\n          nodes {\r\n            updatedAt\r\n            author {\r\n              username\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nlet nextMR;\r\nconst myMrs = [];\r\nconst drafts = [];\r\nconst awaitingReview = [];\r\nconst alreadyCommented = [];\r\nconst haveAuthorCommented = [];\r\nconst haveOthersCommented = [];\r\nconst haveFailingPipeline = [];\r\nconst alreadyApprovedByMe = [];\r\nconst alreadyApprovedByOthers = [];\r\n\r\nconst {\r\n  project: {\r\n    mergeRequests: { nodes: mergeRequests },\r\n  },\r\n} = await graphQLClient.request(queryMrs, {\r\n  projectPath: env.GITLAB_PROJECT_PATH,\r\n});\r\n\r\narg(\"Processing...\");\r\nlog(\"Show list\", flag.showList);\r\nlog(\"Checking\", mergeRequests.length, \"MRs\");\r\n\r\nfor (let mr of mergeRequests) {\r\n  log(\"Checking MR\", mr.title, `(${mr.author.username})`);\r\n  const approvedBy = mr.approvedBy.nodes.map((node) => node.username);\r\n\r\n  if (mr.author.username === username) {\r\n    log(\"^ This is my MR\");\r\n    myMrs.push(mr);\r\n    continue;\r\n  }\r\n\r\n  if (mr.draft) {\r\n    drafts.push(mr);\r\n    log(\"^ This is a draft\");\r\n    continue;\r\n  }\r\n\r\n  if (approvedBy.includes(username)) {\r\n    log(\"^ Approved by me\");\r\n    alreadyApprovedByMe.push(mr);\r\n    continue;\r\n  } else {\r\n    if (approvedBy.length >= requiredApprovals) {\r\n      log(\"^ Approved by others\");\r\n      alreadyApprovedByOthers.push(mr);\r\n      continue;\r\n    }\r\n\r\n    const {\r\n      project: { mergeRequest },\r\n    } = await graphQLClient.request(query, {\r\n      iid: mr.iid,\r\n      projectPath: env.GITLAB_PROJECT_PATH,\r\n    });\r\n\r\n    const pipelineStatus = mergeRequest.headPipeline.status;\r\n\r\n    if (pipelineStatus !== \"SUCCESS\") {\r\n      log(\"^ Failed pipeline\");\r\n      haveFailingPipeline.push(mr);\r\n      continue;\r\n    }\r\n\r\n    const comments = mergeRequest.notes.nodes;\r\n\r\n    const anyLatestComment = comments[0];\r\n    const myLatestComment = comments.find(\r\n      (comment) => comment.author.username === username\r\n    );\r\n    const authorLatestComment = comments.find(\r\n      (comment) => comment.author.username === mr.author.username\r\n    );\r\n\r\n    if (myLatestComment) {\r\n      const latestCommitTime = dayjs(\r\n        mergeRequest.commitsWithoutMergeCommits.nodes[0].authoredDate\r\n      );\r\n      const myLatestCommentTime = dayjs(myLatestComment.updatedAt);\r\n\r\n      if (latestCommitTime.isBefore(myLatestCommentTime)) {\r\n        log(\"^ awaits new commits after my comments\");\r\n        alreadyCommented.push(mr);\r\n        continue;\r\n      }\r\n\r\n      if (authorLatestComment) {\r\n        const authorLatestCommentTime = dayjs(authorLatestComment.updatedAt);\r\n\r\n        if (authorLatestCommentTime.isAfter(myLatestComment.updatedAt)) {\r\n          log(\"^ have some comments by the MR author after my comment\");\r\n          haveAuthorCommented.push(mr);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      if (anyLatestComment) {\r\n        const latestCommentTime = dayjs(anyLatestComment.updatedAt);\r\n\r\n        if (latestCommentTime.isAfter(myLatestComment.updatedAt)) {\r\n          log(\"^ have some comments by other after my comment\");\r\n          haveOthersCommented.push(mr);\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!flag.showList) {\r\n      nextMR = mr;\r\n      break;\r\n    } else {\r\n      awaitingReview.push(mr);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createJiraLinks(text) {\r\n  return text.replace(\r\n    /[A-Z]{1,5}-[0-9]*/g,\r\n    (ticketNumber) => `[${ticketNumber}](${jiraDomain}}/browse/${ticketNumber})`\r\n  );\r\n}\r\n\r\nfunction getName(mr) {\r\n  if (mr.author.username === username) {\r\n    return `${!mr.draft && mr.approvedBy.nodes.length < 2 ? \"!A \" : \"\"}${\r\n      mr.title\r\n    }`;\r\n  }\r\n\r\n  return mr.title;\r\n}\r\n\r\nfunction getChoices(mrs, description) {\r\n  return mrs.map((mr) => ({\r\n    name: getName(mr),\r\n    value: mr.webUrl,\r\n    description: description,\r\n    img: mr.author.avatarUrl.includes(\"http\")\r\n      ? mr.author.avatarUrl\r\n      : domain + mr.author.avatarUrl,\r\n    preview: md(\r\n      `# ${createJiraLinks(mr.title)}\r\n## Created ${dayjs(mr.createdAt).fromNow()} by ${mr.author.name}\r\n\r\n## ${description}\r\n\r\n## Approved by\r\n${\r\n  mr.approvedBy.nodes.length\r\n    ? mr.approvedBy.nodes\r\n        .map(\r\n          (user) => `* ${user.name}\r\n`\r\n        )\r\n        .join(\"\")\r\n    : \"- nobody\"\r\n}\r\n\r\n${createJiraLinks(\r\n  mr.description.replace(\r\n    /\\/uploads\\//g,\r\n    domain + \"/uploads/\" + env.GITLAB_PROJECT_PATH + \"/\"\r\n  )\r\n)}`\r\n    ),\r\n  }));\r\n}\r\n\r\nif (nextMR) {\r\n  await focusTab(nextMR.webUrl);\r\n} else {\r\n  const choices = [\r\n    ...getChoices(awaitingReview, \"Awaiting Review\"),\r\n    ...getChoices(haveAuthorCommented, \"Author have comments after you\"),\r\n    ...getChoices(haveOthersCommented, \"Someone have comments after you\"),\r\n    ...getChoices(myMrs, \"My merge request\"),\r\n    ...getChoices(haveFailingPipeline, \"Failing Pipeline\"),\r\n    ...getChoices(alreadyCommented, \"You have commented on this\"),\r\n    ...getChoices(alreadyApprovedByOthers, \"Already approved by others\"),\r\n    ...getChoices(alreadyApprovedByMe, \"Already approved by you\"),\r\n    ...getChoices(drafts, \"Draft\"),\r\n  ];\r\n\r\n  if (choices.length) {\r\n    const mr = await arg(\"Open MR:\", choices);\r\n\r\n    if (mr) {\r\n      focusTab(mr);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n```\r\n\r\nThis one I use every day at work. It checks a project for any MR that have no approvals and open it for me automatically.\r\nIn case there is no MR that I should review - it opens arg with a list of all MRs that I might be interested in in this order:\r\n\r\n1. All MRs that I approved but author have comments after me\r\n2. All MRs that I approved but someone have comments after me\r\n3. All my MRs\r\n4. All MRs that have a pipeline failing\r\n5. All MRs that I have already commented\r\n6. All MRs that is already approved by others\r\n7. All MR s that is already approved by me\r\n8. All Draft Mrs.\r\n\r\nFirst time you run it i'll ask you to configure it with gitlab domain, token and your username, jira domain and number of approvals required for each MR.","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Conventional comment","description":"","author":"Jakub Olek","twitter":null,"shortcut":"opt 0","avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","discussion":"https://github.com/johnlindquist/kit/discussions/439","url":"https://gist.githubusercontent.com/hakubo/7813751d84d00da902f997df98a4b9a6/raw/d8e610f13ae4f943c70370195d27497124ee817e/comment.js","title":"Conventional comments","command":"conventional-comments","content":"\r\n[Install comment](https://scriptkit.com/api/new?name=comment&url=https://gist.githubusercontent.com/hakubo/7813751d84d00da902f997df98a4b9a6/raw/d8e610f13ae4f943c70370195d27497124ee817e/comment.js\")\r\n\r\n```js\r\n// Menu: Conventional comment\r\n// Description: Comments that are easy to grok and grep\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n// Shortcut: opt 0\r\n// Based on: https://hemdan.hashnode.dev/conventional-comments\r\n\r\nconst type = await arg(\"Label\", [\r\n  {\r\n    name: \"👏 praise\",\r\n    value: \"**👏 praise**: \",\r\n    description:\r\n      \"Praises highlight something positive. Try to leave at least one of these comments per review (if it exists :^)\",\r\n  },\r\n  {\r\n    name: \"🤓 nitpick\",\r\n    value: \"**🤓 nitpick**: \",\r\n    description:\r\n      \"Nitpicks are small, trivial, but necessary changes. Distinguishing nitpick comments significantly helps direct the reader's attention to comments requiring more involvement.\",\r\n  },\r\n  {\r\n    name: \"🎯 suggestion\",\r\n    value: \"**🎯 suggestion**: \",\r\n    description:\r\n      \"Suggestions are specific requests to improve the subject under review. It is assumed that we all want to do what's best, so these comments are never dismissed as “mere suggestions”, but are taken seriously.\",\r\n  },\r\n  {\r\n    name: \"🔨 issue\",\r\n    value: \"**🔨 issue**: \",\r\n    description:\r\n      \"Issues represent user-facing problems. If possible, it's great to follow this kind of comment with a suggestion.\",\r\n  },\r\n  {\r\n    name: \"❔ question\",\r\n    value: \"**❔ question**: \",\r\n    description:\r\n      \"Questions are appropriate if you have a potential concern but are not quite sure if it's relevant or not. Asking the author for clarification or investigation can lead to a quick resolution.\",\r\n  },\r\n  {\r\n    name: \"💭 thought\",\r\n    value: \"**💭 thought**: \",\r\n    description:\r\n      \"Thoughts represent an idea that popped up from reviewing. These comments are non-blocking by nature, but they are extremely valuable and can lead to more focused initiatives and mentoring opportunities.\",\r\n  },\r\n  {\r\n    name: \"💣 chore\",\r\n    value: \"**💣 chore**: \",\r\n    description:\r\n      \"Chores are simple tasks that must be done before the subject can be “officially” accepted. Usually, these comments reference some common processes. Try to leave a link to the process described so that the reader knows how to resolve the chore.\",\r\n  },\r\n]);\r\n\r\nsetSelectedText(type);\r\n\r\n```\r\n\r\nSimple list of conventional comments ready to be used.\r\nhttps://conventionalcomments.org/\r\n\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Computer Info","description":"","author":null,"avatar":"https://avatars.githubusercontent.com/u/3830326?v=4","user":"stevebarakat","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/433","url":"https://gist.githubusercontent.com/stevebarakat/f8c4140f0fc23638cc851a4ae352811a/raw/3dbfd57e6e24f5065cbafc43917a129ab4bc5f2e/computer-info.js","title":"Computer Info","command":"computer-info","content":"\r\n[Install computer-info](https://scriptkit.com/api/new?name=computer-info&url=https://gist.githubusercontent.com/stevebarakat/f8c4140f0fc23638cc851a4ae352811a/raw/3dbfd57e6e24f5065cbafc43917a129ab4bc5f2e/computer-info.js\")\r\n\r\n```js\r\n// Menu: Computer Info\r\n// Description: Gets Computer info\r\n// Author: S.Barakat\r\n\r\nimport os from \"os\";\r\n\r\nconst homeDirectory = os.homedir();\r\n\r\nconst osPlatform = os.platform();\r\n\r\nconst cpu = os.cpus();\r\nconst coreCount = cpu.length;\r\nconst cpuModel = cpu[0].model;\r\nconst cpuSpeed = cpu[0].speed;\r\n\r\nlet info = `\r\n* OS: ${osPlatform}\r\n* Home: ${homeDirectory}\r\n* CPU: ${cpuModel}\r\n* Speed: ${cpuSpeed} MHz\r\n* Cores: ${coreCount}\r\n`\r\n\r\n\r\nawait say(\r\n  `\r\n  Your home directory is: ${homeDirectory}. \r\n  The OS platform is: ${osPlatform}. \r\n  The processor speed is ${cpuSpeed} megahertz.\r\n  Your ${cpuModel} has ${coreCount} cores.\r\n  `\r\n);\r\n\r\nawait div(md(info), `p-4`)\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"New Post","description":"","author":"Kent C. Dodds","shortcut":"command option control p","twitter":"kentcdodds","avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/420","url":"https://gist.githubusercontent.com/kentcdodds/f9a5b9f24f8866e75138ff1629bab071/raw/ba9205394f971b62e56064ea528a905b49e10768/new-post.js","title":"Create new Blog Post","command":"create-new-blog-post","content":"I'm even using metascraper to scrape unsplash for an image, it's alt text, and author (unsplash does not make any of these things easy, yes I realize they have an API, but their terms say you have to hotlink to them if you use it and I don't want to).\r\n\r\nI'm using cloudinary auto-uploads so I don't have to bother uploading the photo manually either :)\r\n\r\n[Install new-post](https://scriptkit.com/api/new?name=new-post&url=https://gist.githubusercontent.com/kentcdodds/f9a5b9f24f8866e75138ff1629bab071/raw/ba9205394f971b62e56064ea528a905b49e10768/new-post.js\")\r\n\r\n```js\r\n// Menu: New Post\r\n// Description: Create a new blog post\r\n// Author: Kent C. Dodds\r\n// Shortcut: command option control p\r\n// Twitter: @kentcdodds\r\n\r\nconst dateFns = await npm('date-fns')\r\nconst prettier = await npm('prettier')\r\nconst YAML = await npm('yaml')\r\nconst slugify = await npm('@sindresorhus/slugify')\r\nconst {format: formatDate} = await npm('date-fns')\r\nconst makeMetascraper = await npm('metascraper')\r\nconst {$filter, toRule} = await npm('@metascraper/helpers')\r\n\r\nconst unsplashTitleToAlt = toRule(str => str.replace(/ photo – .*$/, ''))\r\nconst unsplashOGTitleToAuthor = toRule(str =>\r\n  str.replace(/Photo by (.*?) on Unsplash/, '$1'),\r\n)\r\nconst unsplashImageToPhotoId = toRule(str =>\r\n  new URL(str).pathname.replace('/', ''),\r\n)\r\n\r\nconst metascraper = makeMetascraper([\r\n  {\r\n    unsplashPhotoId: [\r\n      unsplashImageToPhotoId($ =>\r\n        $('meta[property=\"og:image\"]').attr('content'),\r\n      ),\r\n    ],\r\n  },\r\n  {\r\n    author: [\r\n      unsplashOGTitleToAuthor($ =>\r\n        $('meta[property=\"og:title\"]').attr('content'),\r\n      ),\r\n    ],\r\n  },\r\n  {alt: [unsplashTitleToAlt($ => $('title').text())]},\r\n])\r\n\r\nasync function getMetadata(url) {\r\n  const html = await fetch(url).then(res => res.text())\r\n  return metascraper({html, url})\r\n}\r\n\r\nconst blogDir = await env(\r\n  'KCD_BLOG_CONTENT_DIR',\r\n  `What's the path to the blog content directory on this machine?`,\r\n)\r\n\r\nconst title = await arg({\r\n  placeholder: `What's the title of this post?`,\r\n  hint: 'Title',\r\n  ignoreBlur: true,\r\n})\r\n\r\nconst description = await arg({\r\n  placeholder: `What's the description of this post?`,\r\n  hint: 'Description',\r\n  input: 'TODO: add a description',\r\n  ignoreBlur: true,\r\n})\r\n\r\nconst categories = (\r\n  await arg({\r\n    placeholder: `What are the categories of this post?`,\r\n    hint: 'Categories (comma separated)',\r\n    ignoreBlur: true,\r\n  })\r\n)\r\n  .split(',')\r\n  .map(c => c.trim())\r\n\r\nconst keywords = (\r\n  await arg({\r\n    placeholder: `What are the keywords of this post?`,\r\n    hint: 'Keywords (comma separated)',\r\n    ignoreBlur: true,\r\n  })\r\n)\r\n  .split(',')\r\n  .map(c => c.trim())\r\n\r\nconst unsplashPhotoInput = await arg({\r\n  placeholder: `What's the unsplash photo?`,\r\n  hint: 'Unsplash Photo',\r\n  ignoreBlur: true,\r\n})\r\nconst unsplashPhotoUrl = unsplashPhotoInput.startsWith('http')\r\n  ? unsplashPhotoInput\r\n  : `https://unsplash.com/photos/${unsplashPhotoInput}`\r\n\r\nconst metadata = await getMetadata(unsplashPhotoUrl)\r\n\r\nconst frontmatter = YAML.stringify({\r\n  title,\r\n  date: dateFns.format(new Date(), 'yyyy-MM-dd'),\r\n  description,\r\n  categories,\r\n  meta: {keywords},\r\n  bannerCloudinaryId: `unsplash/${metadata.unsplashPhotoId}`,\r\n  bannerAlt: metadata.alt,\r\n  bannerCredit: `Photo by [${metadata.author}](${unsplashPhotoUrl})`,\r\n})\r\n\r\nconst md = `---\r\n${frontmatter}\r\n---\r\n\r\nBe excellent to each other.\r\n`\r\n\r\n// prettify the markdown\r\nconst prettyMd = await prettier.format(md, {\r\n  parser: 'markdown',\r\n  arrowParens: 'avoid',\r\n  bracketSpacing: false,\r\n  embeddedLanguageFormatting: 'auto',\r\n  htmlWhitespaceSensitivity: 'css',\r\n  insertPragma: false,\r\n  jsxBracketSameLine: false,\r\n  jsxSingleQuote: false,\r\n  printWidth: 80,\r\n  proseWrap: 'always',\r\n  quoteProps: 'as-needed',\r\n  requirePragma: false,\r\n  semi: false,\r\n  singleQuote: true,\r\n  tabWidth: 2,\r\n  trailingComma: 'all',\r\n  useTabs: false,\r\n  vueIndentScriptAndStyle: false,\r\n})\r\n\r\nconst filename = slugify(title, {decamelize: false})\r\nconst newFile = path.join(blogDir, `${filename}.mdx`)\r\nawait writeFile(newFile, prettyMd)\r\nawait edit(newFile)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"avatar":"https://avatars.githubusercontent.com/u/1780212?u=d13d5e4e13fac82156fe85a78a2079c560a349b8&v=4","user":"hariombalhara","author":"Hariom Balhara","twitter":"hariom_balhara","discussion":"https://github.com/johnlindquist/kit/discussions/409","url":"","title":"Github Actions","command":"github-actions","content":"[Github Actions Script](https://gist.github.com/hariombalhara/969bd98ec14006d5b8b60fb51d018aa2)\r\n\r\nI have my blog using Notion API and whenever I want to publish a post to my blog, I trigger a GitHub Workflow that does the job.\r\n\r\nEarlier, I used to do it using a bookmark for the workflow and 1-2 additional clicks in Github UI. \r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"shortcode":"mdn","menu":"Search MDN","description":"","author":"John Lindquist","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","discussion":"https://github.com/johnlindquist/kit/discussions/400","url":"https://gist.githubusercontent.com/johnlindquist/3c3b581c19e5ad78d2a0a8d659dafee8/raw/bc7e56597e2eb90872b1133e17ee77d5b380760e/mdn-search.js","title":"Search MDN","command":"search-mdn","content":"\r\n[Install mdn-search](https://scriptkit.com/api/new?name=mdn-search&url=https://gist.githubusercontent.com/johnlindquist/3c3b581c19e5ad78d2a0a8d659dafee8/raw/bc7e56597e2eb90872b1133e17ee77d5b380760e/mdn-search.js\")\r\n\r\n```js\r\n// Shortcode: mdn\r\n// Menu: Search MDN\r\n// Description: Search and open MDN docs\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet searchIndexResponse = await get(\r\n  `https://developer.mozilla.org/en-US/search-index.json`\r\n)\r\n\r\nlet url = await arg(\r\n  `Select doc:`,\r\n  searchIndexResponse.data.map(({ title, url }) => ({\r\n    name: title,\r\n    description: url,\r\n    value: `https://developer.mozilla.org${url}`,\r\n  }))\r\n)\r\n\r\nexec(`open '${url}'`)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Genius Lyrics Search","avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/392","url":"https://gist.githubusercontent.com/dealingwith/11ca5e660d3873a3e521ad2905e2b5b7/raw/4910306cd3818772b1cd67b1718e0f3d59e7ced5/song-search.js","title":"Genius Lyrics Lookup","command":"genius-lyrics-lookup","content":"Just what it says on the tin. How can I improve this one?\r\n\r\n[Install song-search](https://scriptkit.com/api/new?name=song-search&url=https://gist.githubusercontent.com/dealingwith/11ca5e660d3873a3e521ad2905e2b5b7/raw/4910306cd3818772b1cd67b1718e0f3d59e7ced5/song-search.js)\r\n\r\n```js\r\n// Menu: Genius Lyrics Search\r\n\r\nlet Genius = await npm('genius-lyrics-api')\r\n\r\nlet geniusUserToken = await env(\"GENIUS_AUTH_TOKEN\")\r\nimport { getLyrics, searchSong } from 'genius-lyrics-api';\r\n\r\nlet songTitle = await arg(\"Song Title\")\r\n\r\nlet options = {\r\n  apiKey: geniusUserToken,\r\n  title: songTitle,\r\n  artist: '',\r\n  optimizeQuery: true\r\n}\r\n\r\nlet returnedSongs = await(searchSong(options).then((r) => r))\r\nlet returnedSongTitles = returnedSongs.map(s => s.title)\r\n\r\nlet chosenSongTitle = await arg(\"Which song?\", returnedSongTitles)\r\n\r\nlet songData = returnedSongs.filter(s => s.title == chosenSongTitle)\r\nlet lyrics = await(getLyrics(songData[0].url).then((r) => r))\r\n\r\nlet whatToDo = await arg(\"\", [\"Copy\", \"View\", \"Visit\"])\r\n\r\nif (whatToDo == \"Copy\") copy(lyrics)\r\nelse if (whatToDo == \"View\") await textarea(lyrics)\r\nelse if (whatToDo == \"Visit\") await focusTab(songData[0].url)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/390","url":"https://gist.githubusercontent.com/dealingwith/3cdc6420882928df72f9671fd8f366d7/raw/cce80aaf26edd7210f15af16ecb3cade4013dd39/batch-image-resize.js","title":"Resize selected images","command":"resize-selected-images","content":"Resizes selected images to specified width. Note: overwrites existing files.\r\n\r\n[Install batch-image-resize](https://scriptkit.com/api/new?name=batch-image-resize&url=https://gist.githubusercontent.com/dealingwith/3cdc6420882928df72f9671fd8f366d7/raw/cce80aaf26edd7210f15af16ecb3cade4013dd39/batch-image-resize.js)\r\n\r\n```js\r\nlet Jimp = await npm('jimp')\r\n\r\nlet width = await arg('New width in pixels')\r\n\r\nlet selectedFiles = await getSelectedFile();\r\nlet filePaths = selectedFiles.split(\"\\n\");\r\n\r\nfor (let filePath of filePaths) {\r\n  Jimp.read(filePath, (err, image) => {\r\n    if (err) throw err;\r\n    image.resize(parseInt(width), Jimp.AUTO).write(filePath); // save\r\n  });\r\n}\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Pipe Clipboard to Command","decription":"Manipulate clipboard content using the command line","author":"Achille Lacoin","avatar":"https://avatars.githubusercontent.com/u/17577332?v=4","user":"pomdtr","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/377","url":"https://gist.githubusercontent.com/pomdtr/6d389a4490fd53b6eeaf4ac1e74e820e/raw/65e967a027e2296f620761d949062173979c998b/pipe.js","title":"Manipulate the clipboard content using the command line","command":"manipulate-the-clipboard-content-using-the-command-line","content":"This script allows to quickly run and preview any shell command on the clipboard content using the command line.\r\nExample usecase -> urlencode a string, extract column from a csv, run a jq command...\r\nYou can also chain shell commands using pipes.\r\n\r\n[Install pipe](https://scriptkit.com/api/new?name=pipe&url=https://gist.githubusercontent.com/pomdtr/6d389a4490fd53b6eeaf4ac1e74e820e/raw/65e967a027e2296f620761d949062173979c998b/pipe.js)\r\n\r\n```js\r\n// Menu: Pipe Clipboard to Command\r\n// Decription: Manipulate clipboard content using the command line\r\n// Author: pomdtr\r\n\r\nprocess.env.PATH = `${process.env.HOME}/.local/bin:/usr/local/bin/:${process.env.PATH}`;\r\n\r\nfunction codeblock(text) {\r\n  const triple_backquote = \"```\";\r\n  return `${triple_backquote}shell\\n${text}\\n${triple_backquote}`;\r\n}\r\n\r\n// Persist clipoard inside a file\r\nconst clipboardContent = await paste();\r\nconst tempfile = `${kit.tempdir()}/input.txt`;\r\nawait kit.writeFile(tempfile, clipboardContent, {\r\n  flag: \"w\",\r\n  encoding: \"utf-8\",\r\n});\r\n\r\nlet command = \"\";\r\nlet [stdout, stderr, code] = [null, null, 0];\r\nlet panelContent = await kit.readFile(tempfile, { encoding: \"utf-8\" });\r\n\r\nwhile (true) {\r\n  command = await arg(\r\n    {\r\n      placeholder: \"Input Command:\",\r\n      className: \"p-2\",\r\n      input: command,\r\n      hint: \"Hit enter to run command and save output to clipboard, esc to dismiss window.\"\r\n    },\r\n    md(codeblock(panelContent))\r\n  );\r\n\r\n  if (command) {\r\n    ({ stdout, stderr, code } = exec(`cat ${tempfile} | ${command}`));\r\n    panelContent = code == 0 ? stdout : stderr;\r\n    if (code == 0) {\r\n      panelContent = stdout;\r\n    } else {\r\n      panelContent = stderr;\r\n    }\r\n  } else {\r\n    panelContent = await kit.readFile(tempfile, { encoding: \"utf-8\" });\r\n  }\r\n\r\n  await copy(panelContent);\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"title":"Generate TS Interfaces from JSON input","description":"","author":"Benjamin Modayil","twitter":"modayilme","avatar":"https://avatars.githubusercontent.com/u/12306850?u=51152dab74c9158efeb6a84a65acf2464cf84218&v=4","user":"benjaminmodayil","discussion":"https://github.com/johnlindquist/kit/discussions/373","url":"","command":"generate-ts-interfaces-from-json-input","content":"Hi everyone,\r\n\r\nJust made this quick script and thought I'd share. My company is updating our codebases to use TypeScript and wanted a way to quickly generate interfaces from JSON input. I'm usually right clicking and copying parts of API responses in the Network tab to pick out the JSON and manually type things out. Now I just copy the JSON, paste into Kit, and then save a few moments of my time. \r\n\r\n## Script\r\n\r\n```javascript\r\n// Title: Generate types\r\n// Description: Paste your JSON in and get your Interfaces straight to your clipboard\r\n// Author: Benjamin Modayil\r\n// Twitter: @24props\r\n\r\nlet {json2ts} = await npm('json-ts')\r\n\r\nlet schema = await arg(\"What is the schema?\");\r\nawait copy(`${json2ts(schema)}`)\r\n\r\nnotify({\r\n  title: 'Interfaces copied to the clipboard',\r\n  message: \"Paste your interfaces into a text editor\"\r\n})\r\nexit() // needed otherwise scriptkit hangs open\r\n```\r\n\r\nI haven't tested the script that much yet, but something that could be tweaked would be wrapping `json-ts` in a try/catch and outputting a different notification depending on the result. \r\n\r\nAnother thing to note is that the output from `json-ts` could always be improved from the developer using the script. I would assume for `json-ts` that it's pretty hard to generate union types without more data to comb through and it's up to the developer to determine when you might need flexibility `number | string` or strictness from something like `\"success\" | \"error\" | \"warning\"`. Also, from the example output below, `json-ts` generates the property `previous` as null, based on the data provided, but I'm guessing it's actually supposed to be a string like `next`. All this to say: \"use at your own discretion\".\r\n\r\n## Example\r\n\r\nGo to this [Pokemon API JSON link](https://pokeapi.co/api/v2/pokemon/), copy JSON, paste into script, paste into editor, and see the below output: \r\n\r\n```typescript\r\ninterface IRootObject {\r\n    count: number;\r\n    next: string;\r\n    previous: null;\r\n    results: IResultsItem[];\r\n}\r\ninterface IResultsItem {\r\n    name: string;\r\n    url: string;\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Daily Story","description":"","author":"Kent C. Dodds","shortcut":"command option control o","twitter":"kentcdodds","avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/357","url":"https://gist.githubusercontent.com/kentcdodds/1a5d2b4eabd90ae6b45734ddc2a040dc/raw/d59daeb69d8ef54d54fc4823c0b7f2c147d6932e/daily-story.js","title":"Daily Story","command":"daily-story","content":"Wrote a new script where I can quickly write little stories of what's going on in my life. It's kind of like a little journal. I set the `DAILY_STORY_DIRECTORY` to a folder in dropbox.\r\n\r\nThe only thing I'm unsure of right now is I want to use `textarea` but I don't know how to actually submit what's been typed. Hitting \"enter\" just (correctly) inserts a newline. I tried ⌘+enter and that didn't work. Anyone know how to submit a textarea?\r\n\r\n[Install daily-story](https://scriptkit.com/api/new?name=daily-story&url=https://gist.githubusercontent.com/kentcdodds/1a5d2b4eabd90ae6b45734ddc2a040dc/raw/d59daeb69d8ef54d54fc4823c0b7f2c147d6932e/daily-story.js)\r\n\r\n```js\r\n// Menu: Daily Story\r\n// Description: Write a quick story\r\n// Author: Kent C. Dodds\r\n// Shortcut: command option control o\r\n// Twitter: @kentcdodds\r\n\r\nconst dateFns = await npm('date-fns')\r\nconst filenamify = await npm('filenamify')\r\nconst prettier = await npm('prettier')\r\n\r\nconst storyDir = await env(\r\n  'DAILY_STORY_DIRECTORY',\r\n  `Where do you want daily stories to be saved?`,\r\n)\r\n\r\nconst story = await arg({placeholder: 'Write your story here'})\r\n\r\nconst today = dateFns.format(new Date(), 'yyyy-MM-dd')\r\nconst date = await arg({\r\n  input: today,\r\n  hint: 'When did this happen?',\r\n})\r\nconst title = await arg({\r\n  placeholder: 'What do you want to call this story?',\r\n  hint: 'Title',\r\n})\r\n\r\nconst md = `---\r\ntitle: ${title}\r\ndate: ${date}\r\nwritten: ${today}\r\n---\r\n\r\n${story}\r\n`\r\n\r\n// prettify the markdown\r\nconst prettyMd = await prettier.format(md, {\r\n  parser: 'markdown',\r\n  arrowParens: 'avoid',\r\n  bracketSpacing: false,\r\n  embeddedLanguageFormatting: 'auto',\r\n  htmlWhitespaceSensitivity: 'css',\r\n  insertPragma: false,\r\n  jsxBracketSameLine: false,\r\n  jsxSingleQuote: false,\r\n  printWidth: 80,\r\n  proseWrap: 'always',\r\n  quoteProps: 'as-needed',\r\n  requirePragma: false,\r\n  semi: false,\r\n  singleQuote: true,\r\n  tabWidth: 2,\r\n  trailingComma: 'all',\r\n  useTabs: false,\r\n  vueIndentScriptAndStyle: false,\r\n})\r\n\r\nconst filename = filenamify(\r\n  `${date}-${title.toLowerCase().replace(/ /g, '-')}.md`,\r\n  {replacement: '-'},\r\n)\r\nawait writeFile(path.join(storyDir, filename), prettyMd)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Fake","description":"","author":"Jacob Cofman","twitter":"JCofman","avatar":"https://avatars.githubusercontent.com/u/2118956?u=dd12813efdeb91151f98fcecd5c078f29bed6ff9&v=4","user":"JCofman","discussion":"https://github.com/johnlindquist/kit/discussions/341","url":"","title":"Generate fake data with faker.js","command":"generate-fake-data-with-fakerjs","content":"Here is a simple one to generate fake data with https://www.npmjs.com/package/@faker-js/faker and save it to clipboard.\r\n\r\n> Note: Updated to use https://www.npmjs.com/package/@faker-js/faker - @johnlindquist \r\n\r\n\r\n[Open fake in Script Kit](https://scriptkit.com/api/new?name=fake&url=https://gist.githubusercontent.com/johnlindquist/a477dfe683294781d77fb0fa2171a501/raw/65c0dbb1b98c22c6682f834ead9c329953d6c5c6/fake.ts\")\r\n\r\n```js\r\n// Menu: Fake\r\n// Description: generate fake data with faker.js\r\n// Author: Jacob Cofman\r\n// Twitter: @jcofman\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst {faker} = await npm(\"@faker-js/faker\");\r\n\r\nfunction getMethodFakerData(method) {\r\n  return Object.keys(faker[method]);\r\n}\r\n\r\nconst fakerMethods = [\r\n  \"name\",\r\n  \"address\",\r\n  \"phone\",\r\n  \"internet\",\r\n  \"company\",\r\n  \"image\",\r\n  \"lorem\",\r\n  \"helpers\",\r\n  \"date\",\r\n  \"random\",\r\n  \"finance\",\r\n  \"hacker\",\r\n  \"system\",\r\n  \"commerce\",\r\n  \"database\",\r\n  \"animal\",\r\n  \"git\",\r\n  \"music\",\r\n  \"datatype\",\r\n];\r\n\r\nconst method = await arg(\"Select-Base-Method:\", fakerMethods);\r\n\r\nconst fakerBaseMethods = getMethodFakerData(method);\r\n\r\nconst script = await arg(\"Select-Script:\", fakerBaseMethods);\r\n\r\nconst result = await faker[method][script]();\r\ncopy(result);\r\nawait arg(result);\r\n```\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"ConvertKit > Lookup","description":"","author":"Kent C. Dodds","twitter":"kentcdodds","avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/336","url":"https://gist.githubusercontent.com/kentcdodds/815c2fad013740830946c17468e3bbb7/raw/7b1c9ba639eb6881ba8d595f14eca04832087af9/convert-kit-lookup.js","title":"ConvertKit lookup","command":"convertkit-lookup","content":"Created a new script to easily query convert kit because I was tired of the manual process of going to convert kit and clicking around to find a particular user. Wrote this in 2 minutes (had some of the convert kit API code already). Man I love ScriptKit.\r\n\r\n[Install convert-kit-lookup](https://scriptkit.com/api/new?name=convert-kit-lookup&url=https://gist.githubusercontent.com/kentcdodds/815c2fad013740830946c17468e3bbb7/raw/7b1c9ba639eb6881ba8d595f14eca04832087af9/convert-kit-lookup.js)\r\n\r\n```js\r\n// Menu: ConvertKit > Lookup\r\n// Description: Query convertkit\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nconst CONVERT_KIT_API_SECRET = await env('CONVERT_KIT_API_SECRET')\r\nconst CONVERT_KIT_API_KEY = await env('CONVERT_KIT_API_KEY')\r\n\r\nconst query = await arg('query')\r\nlet url\r\nif (query.includes('@')) {\r\n  const sub = await getConvertKitSubscriber(query)\r\n  if (sub?.id) {\r\n    url = `https://app.convertkit.com/subscribers/${sub.id}`\r\n  }\r\n}\r\n\r\nif (!url) {\r\n  url = `https://app.convertkit.com/subscribers?utf8=%E2%9C%93&q=${query}&status=all`\r\n}\r\nexec(`open \"${url}\"`)\r\n\r\nasync function getConvertKitSubscriber(email) {\r\n  const url = new URL('https://api.convertkit.com/v3/subscribers')\r\n  url.searchParams.set('api_secret', CONVERT_KIT_API_SECRET)\r\n  url.searchParams.set('email_address', email)\r\n\r\n  const resp = await fetch(url.toString())\r\n  const json = await resp.json()\r\n  const {subscribers: [subscriber] = []} = json\r\n\r\n  return subscriber\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/335","url":"https://gist.githubusercontent.com/dealingwith/02ad42f0b334ed36faf7d034f8d97c76/raw/14467032b86ce587d70032f4cd29b913ef30234c/title-case.js","title":"Title Case Selected Text","command":"title-case-selected-text","content":"Here's a really quick one I decided to spin up this morning:\r\n\r\n[Install title-case](https://scriptkit.com/api/new?name=title-case&url=https://gist.githubusercontent.com/dealingwith/02ad42f0b334ed36faf7d034f8d97c76/raw/14467032b86ce587d70032f4cd29b913ef30234c/title-case.js)\r\n\r\n```js\r\nlet { titleCase } = await npm(\"title-case\");\r\nlet selectedText = await getSelectedText();\r\nlet value = titleCase(selectedText);\r\nawait setSelectedText(value);\r\n```\r\n\r\n\r\n...also, a tiny variant on the above I like to call The Proper Namifier™\r\n\r\n```js\r\nlet { titleCase } = await npm(\"title-case\");\r\nlet selectedText = await getSelectedText();\r\nlet value = titleCase(selectedText) + '™';\r\nawait setSelectedText(value);\r\n``` ","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Tinify","description":"","author":"Vojta Holik","twitter":"vjthlk","avatar":"https://avatars.githubusercontent.com/u/25487857?u=1c81cf15334c751c49f61fe7e0e84b0618eb0e0e&v=4","user":"vojtaholik","discussion":"https://github.com/johnlindquist/kit/discussions/328","url":"","title":"Compress selected images with Tinify","command":"compress-selected-images-with-tinify","content":"![tinify](https://user-images.githubusercontent.com/25487857/123306748-f706ff00-d521-11eb-9f11-6744d7b1e76b.gif)\r\n\r\n```js\r\n// Menu: Tinify\r\n// Description: Compress selected images with Tinify\r\n// Author: Vojta Holik\r\n// Twitter: @vjthlk\r\n\r\nlet tinify = await npm(\"tinify\");\r\nlet fs = await import(\"fs\");\r\nlet selectedFiles = await getSelectedFile();\r\n\r\ntinify.key = await env(\"TINIFY_API_KEY\", {\r\n  hint: md(\"get your Tinify api key at https://tinypng.com/developers\"),\r\n  ignoreBlur: true,\r\n  secret: true,\r\n});\r\n\r\nlet filePaths = selectedFiles.split(\"\\n\");\r\n\r\nfor (let filePath of filePaths) {\r\n  let directory = path.dirname(filePath);\r\n  let extension = path.extname(filePath);\r\n  let originalFileName = path.basename(filePath);\r\n  let suffix = \"\";\r\n  let isHD = originalFileName.includes(\"@2x\");\r\n  let newFileName = isHD\r\n    ? originalFileName\r\n        .replace(\"@2x\", \"\")\r\n        .replace(extension, `${suffix}@2x${extension}`)\r\n    : originalFileName.replace(extension, `${suffix}${extension}`);\r\n\r\n  fs.readFile(filePath, (err, sourceData) => {\r\n    if (err) throw err;\r\n    tinify.fromBuffer(sourceData).toBuffer((err, resultData) => {\r\n      if (err) throw err;\r\n      fs.writeFile(`${directory}/` + newFileName, resultData, (err) => {\r\n        if (err) throw err;\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n```\r\n\r\n---\r\n\r\n<details>\r\n  <summary>You can change file names and directory to best suite your workflow. Since I often work with <code>@2x</code> images I adjusted the script to correctly suffix that part.</summary>\r\n\r\n```js\r\nlet isHD = originalFileName.includes(\"@2x\");\r\nlet newFileName = isHD\r\n  ? originalFileName\r\n      .replace(\"@2x\", \"\")\r\n      .replace(extension, `${suffix}@2x${extension}`)\r\n  : originalFileName.replace(extension, `${suffix}${extension}`);\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"avatar":"https://avatars.githubusercontent.com/u/12891645?u=eb9ed13c1bc9eeccf0b87ddbeea8778c7c32c05a&v=4","user":"JoepKockelkorn","author":"Joep Kockelkorn","twitter":"JoepKockelkorn","discussion":"https://github.com/johnlindquist/kit/discussions/325","url":"","title":"Paste last item from clipboard","command":"paste-last-item-from-clipboard","content":"With two globals you can paste the last item from the clipboard:\r\n\r\n`await setSelectedText(await paste());`","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Slugify file name","description":"","author":"Vojta Holik","twitter":"vjthlk","avatar":"https://avatars.githubusercontent.com/u/25487857?u=1c81cf15334c751c49f61fe7e0e84b0618eb0e0e&v=4","user":"vojtaholik","discussion":"https://github.com/johnlindquist/kit/discussions/320","url":"","title":"Slugify selected file names","command":"slugify-selected-file-names","content":"<img src=\"https://p-ZmFjNlQ.b3.n0.cdn.getcloudapp.com/items/mXur6N2W/50e6f3d6-8b3d-4b24-a4c6-3ee047a9613e.gif?v=f5fe168354cb0d1e34dcbf405c7891ac\" width=\"700\" />\r\n\r\n```js\r\n// Menu: Slugify file name\r\n// Description: Slugify selected files\r\n// Author: Vojta Holik\r\n// Twitter: @vjthlk\r\n\r\nlet slugify = await npm(\"slugify\")\r\nlet selectedFiles = await getSelectedFile()\r\n\r\nconst filePaths = selectedFiles.split(\"\\n\")\r\n\r\nfor (let filePath of filePaths) {\r\n  let originalFileName = path.basename(filePath)\r\n  let newFileName = slugify(originalFileName, {\r\n    lower: true,\r\n  })\r\n  let newFilePath = path.join(\r\n    path.dirname(filePath),\r\n    newFileName\r\n  )\r\n\r\n  cp(filePath, newFilePath)\r\n}\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Cloudinary upload","description":"","shortcut":"command option control c","author":"Kent C. Dodds","twitter":"kentcdodds","avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/310","url":"","title":"Cloudinary upload","command":"cloudinary-upload","content":"I made this handy little script that makes it really easy for me to upload images to cloudinary.\r\n\r\nI just realized that I need to make it so I can create a new folder from script kit (right now you can only choose from folders that already exist). But it should make it much easier for me to get images up to cloudinary while I'm in the zone writing a blog post :)\r\n\r\n```js\r\n// Menu: Cloudinary upload\r\n// Description: Upload an image to cloudinary\r\n// Shortcut: command option control c\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nimport path from 'path'\r\n\r\nconst cloudinaryCloudName = await env('CLOUDINARY_CLOUD_NAME')\r\nconst cloudinaryKey = await env('CLOUDINARY_API_KEY')\r\nconst cloudinarySecret = await env('CLOUDINARY_API_SECRET')\r\nconst cloudiaryConsoleId = await env('CLOUDINARY_CONSOLE_ID')\r\n\r\nawait npm('cloudinary')\r\nimport cloudinary from 'cloudinary'\r\n\r\nconst cacheDb = await db('cloudinary-cache', {lastChoice: '', folders: {}})\r\nawait cacheDb.read()\r\n\r\ncloudinary.config({\r\n  cloud_name: cloudinaryCloudName,\r\n  api_key: cloudinaryKey,\r\n  api_secret: cloudinarySecret,\r\n  secure: true,\r\n})\r\n\r\nconst actions = {\r\n  CREATE_NEW: 'creating new folder',\r\n  REFRESH_CACHE: 'refreshing cache',\r\n  OPEN_DIR: 'opening directory',\r\n}\r\n\r\nlet chosenDirectory = await cacheDb.data.lastChoice\r\nlet lastSelection\r\nwhile (true) {\r\n  // if the last action was to create a new directory then we know the chosen\r\n  // directory is new and has no folders otherwise we have to wait a few seconds\r\n  // for the API to be prepared for us to make a request for the contents.\r\n  const directories =\r\n    lastSelection === actions.CREATE_NEW\r\n      ? []\r\n      : await getFolders(chosenDirectory)\r\n  lastSelection = await arg(\r\n    `Select directory in ${chosenDirectory}`,\r\n    [\r\n      {name: '.', value: '.', description: '✅ Choose this directory'},\r\n      !chosenDirectory\r\n        ? null\r\n        : {name: '..', value: '..', description: '⤴️ Go up a directory'},\r\n      ...directories.map(folder => ({\r\n        name: folder.name,\r\n        value: folder.path,\r\n        description: '⤵️ Select directory',\r\n      })),\r\n      {\r\n        name: 'Open directory',\r\n        value: actions.OPEN_DIR,\r\n        description: '🌐 Open this directory in the browser',\r\n      },\r\n      {\r\n        name: 'Refresh cache',\r\n        value: actions.REFRESH_CACHE,\r\n        description: '🔄 Refresh the cache for this directory',\r\n      },\r\n      {\r\n        name: 'Create new directory',\r\n        value: actions.CREATE_NEW,\r\n        description: '➕ Create a new directory here',\r\n      },\r\n    ].filter(Boolean),\r\n  )\r\n  if (lastSelection === '..') {\r\n    chosenDirectory = chosenDirectory.split('/').slice(0, -1).join('/')\r\n  } else if (lastSelection === '.') {\r\n    break\r\n  } else if (lastSelection === actions.CREATE_NEW) {\r\n    const newFolderName = await arg(`What's the new folder name?`)\r\n    const newDirectory = `${chosenDirectory}/${newFolderName}`\r\n    const result = await cloudinary.v2.api.create_folder(newDirectory)\r\n    delete cacheDb.data.folders[chosenDirectory]\r\n    chosenDirectory = newDirectory\r\n  } else if (lastSelection === actions.REFRESH_CACHE) {\r\n    delete cacheDb.data.folders[chosenDirectory]\r\n  } else if (lastSelection === actions.OPEN_DIR) {\r\n    await openFolder(chosenDirectory)\r\n  } else {\r\n    chosenDirectory = lastSelection\r\n  }\r\n}\r\n\r\ncacheDb.data.lastChoice = chosenDirectory\r\nawait cacheDb.write()\r\n\r\nconst images = await arg({\r\n  placeholder: 'Drop the image(s) you want to upload',\r\n  drop: true,\r\n  ignoreBlur: true,\r\n})\r\nfor (const image of images) {\r\n  const defaultName = path.parse(image.path).name\r\n\r\n  const name =\r\n    (await arg({\r\n      placeholder: `Name of this image?`,\r\n      hint: `Default is: \"${defaultName}\"`,\r\n    })) || defaultName\r\n\r\n  const uploadedImage = await cloudinary.v2.uploader.upload(image.path, {\r\n    public_id: name,\r\n    overwrite: false,\r\n    folder: chosenDirectory,\r\n  })\r\n\r\n  // If you have multiple files then this isn't really useful unless you have\r\n  // clipbloard history (which I recommend you get!)\r\n  await copy(uploadedImage.secure_url)\r\n}\r\n\r\nawait openFolder(chosenDirectory)\r\n\r\nfunction openFolder(folder) {\r\n  const encodedFolder = encodeURIComponent(folder)\r\n  console.log('opening')\r\n  return exec(\r\n    `open \"https://cloudinary.com/console/${cloudiaryConsoleId}/media_library/folders/${encodedFolder}\"`,\r\n  )\r\n}\r\n\r\nasync function getFolders(directory) {\r\n  const cachedDirectories = cacheDb.data.folders[directory]\r\n  if (cachedDirectories) {\r\n    return cachedDirectories\r\n  }\r\n\r\n  try {\r\n    const {folders: directories} = !directory\r\n      ? await cloudinary.v2.api.root_folders()\r\n      : await cloudinary.v2.api.sub_folders(directory)\r\n\r\n    cacheDb.data.folders[directory] = directories\r\n\r\n    await cacheDb.write()\r\n\r\n    return directories\r\n  } catch (error) {\r\n    console.error('error with the directory')\r\n    return []\r\n  }\r\n}\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"New task","description":"","avatar":"https://avatars.githubusercontent.com/u/5678065?u=e2e528a3ee58b5150a1947c7ded93695b35a8779&v=4","user":"Alarid","author":"Yohann Legrand","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/306","url":"","title":"My attempt with Notion API","command":"my-attempt-with-notion-api","content":"Hey folks 👋 \r\n\r\nSo I have this big \"Tasks\" database in Notion where I put all my tasks (personal/work/projects). Each task has many properties, including a \"Status\" (_ToDo, Doing, Done, ..._) and a \"Day\" (_Monday, Tuesday, ...) which I use in a view called \"Week planner\". It's a board view, one column for each value of the property \"Day\", which allows me to have a nice view of what needs to be done this week. I found myself using mainly this view for inserting new tasks. In fact, if I need to do something for tomorrow or the day after, then I add a new task in this column. \r\n\r\nSince Notion released their APIs, I thought \"How cool it would be to do this with Kit!\". I finally did it, and I'm loving it already. This is gonna save me so much time. If I'm working on something and a new task pop into my mind, I can add it from anywhere in a few seconds.\r\n\r\nHere is the script for those interested _(UPDATED VERSION: thanks John for the tips)_\r\n\r\n```js\r\n// Menu: New task\r\n// Description: Add a new task in Notion\r\n\r\nconst { newTask, getProperties, syncProperties } = await lib(\"notion-tasks\")\r\n\r\nlet taskName = await arg({\r\n  placeholder: \"Task name\",\r\n  hint: `Type \"sync\" to sync`,\r\n})\r\nif (taskName === \"sync\") {\r\n  try {\r\n    await syncProperties()\r\n    notify({\r\n      title: \"✅ Notion sync\",\r\n      message: \"Tasks properties successfully cached locally\",\r\n    })\r\n  } catch (err) {\r\n    notify({\r\n      title: \"⛔️ Notion sync\",\r\n      message: \"Something went wrong\",\r\n    })\r\n    console.error(err)\r\n  }\r\n  taskName = await arg(\"Task name\")\r\n}\r\n\r\nconst { statusOptions, dayOptions, tagOptions } = getProperties()\r\n\r\nconst status = await arg(\r\n  \"Status\",\r\n  statusOptions.map((opt) => opt.name)\r\n)\r\nconst day = await arg(\r\n  \"Day\",\r\n  dayOptions.map((opt) => opt.name)\r\n)\r\nconst tag = await arg(\r\n  \"Tag\",\r\n  tagOptions.map((opt) => opt.name)\r\n)\r\n\r\ntry {\r\n  await newTask(taskName, status, day, tag)\r\n  send(\"HIDE_APP\")\r\n  notify({\r\n    title: \"✅ New task added\",\r\n    message: `${taskName} for ${day} (${status})`,\r\n  })\r\n} catch (err) {\r\n  send(\"HIDE_APP\")\r\n  notify({\r\n    title: \"⛔️ New task\",\r\n    message: `Something went wrong`,\r\n  })\r\n  console.error(err)\r\n}\r\n```\r\n\r\nAnd the lib file (`.kenv/lib/notion-tasks.js`)\r\n\r\n```js\r\nconst notionToken = await env(\"NOTION_USER_TOKEN\")\r\nconst databaseId = \"06d55db47a994f429132d5d8fd9edd2a\"\r\nconst tasksDb = await db(\"tasks\", {\r\n  properties: {\r\n    statusOptions: [],\r\n    dayOptions: [],\r\n    tagOptions: [],\r\n  },\r\n})\r\nexport const getProperties = () => tasksDb.properties\r\n\r\nexport async function syncProperties() {\r\n  const { data } = await get(\r\n    `https://api.notion.com/v1/databases/${databaseId}`,\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${notionToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n        \"Notion-Version\": \"2021-05-13\",\r\n      },\r\n    }\r\n  )\r\n  const {\r\n    Status: {\r\n      select: { options: statusOptions },\r\n    },\r\n    Day: {\r\n      multi_select: { options: dayOptions },\r\n    },\r\n    Tag: {\r\n      multi_select: { options: tagOptions },\r\n    },\r\n  } = data.properties\r\n\r\n  tasksDb.properties = { statusOptions, dayOptions, tagOptions }\r\n  await tasksDb.write()\r\n}\r\n\r\nexport async function newTask(taskName, status, day, tag) {\r\n  return await post(\r\n    \"https://api.notion.com/v1/pages\",\r\n    {\r\n      parent: { database_id: databaseId },\r\n      properties: {\r\n        Name: {\r\n          title: [{ text: { content: taskName } }],\r\n        },\r\n        Status: {\r\n          select: { name: status },\r\n        },\r\n        Day: {\r\n          multi_select: [{ name: day }],\r\n        },\r\n        Tag: {\r\n          multi_select: [{ name: tag }],\r\n        },\r\n      },\r\n    },\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${notionToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n        \"Notion-Version\": \"2021-05-13\",\r\n      },\r\n    }\r\n  )\r\n}\r\n```\r\n\r\n~Maybe I'm missing something about caching though 😅~ Any feedback/improvement ideas appreciated. And once again, thanks @johnlindquist for this amazing app, I use it every single day and it has definitely made my life easier 🙏 ","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/297","url":"https://gist.githubusercontent.com/dealingwith/43c1079690c14481ec2e76737e5f60fc/raw/f77a17b9cfe93b0a4b8eb0f533f014aeaaadbb9f/notion-random-task.js","title":"Another Notion example -- select a random item from a database","command":"another-notion-example-select-a-random-item-from-a-database","content":"Like the [last Notion example I posted](https://github.com/johnlindquist/kit/discussions/286), this one interfaces with my giant, singular Tasks database in Notion. This one selects one task at random (that does not have a status of Done or Archive).\r\n\r\n[Install notion-random-task](https://scriptkit.com/api/new?name=notion-random-task&url=https://gist.githubusercontent.com/dealingwith/43c1079690c14481ec2e76737e5f60fc/raw/f77a17b9cfe93b0a4b8eb0f533f014aeaaadbb9f/notion-random-task.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\n\r\nlet {data} = await post(\r\n  `https://api.notion.com/v1/databases/${databaseID}/query`,\r\n{\r\n  \"filter\": {\r\n    \"and\": [\r\n      {\r\n        \"property\": \"Status\",\r\n        \"select\": {\r\n          \"does_not_equal\": \"Done\"\r\n        }\r\n      },\r\n      {\r\n        \"property\": \"Status\",\r\n        \"select\": {\r\n          \"does_not_equal\": \"Archive\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  page_size: 100\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet tasks = data.results\r\nlet task = tasks[Math.floor(Math.random() * tasks.length)];\r\nlet pageID = task.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\ncopy(pageURL)\r\n\r\nawait focusTab(pageURL, \"Google Chrome Beta\")\r\n```\r\n\r\nI also created one that only queries for tasks with no status (the \"inbox\")...\r\n\r\n[Install notion-random-from-inbox](https://scriptkit.com/api/new?name=notion-random-from-inbox&url=https://gist.githubusercontent.com/dealingwith/24ccf1b94413168939eff0369a25bd9f/raw/019aa8bf68265fce8e9119b4a6409c1b5fc2ef7c/notion-random-from-inbox.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\n\r\nlet {data} = await post(\r\n  `https://api.notion.com/v1/databases/${databaseID}/query`,\r\n{\r\n  \"filter\": \r\n  {\r\n    \"property\": \"Status\",\r\n    \"select\": {\r\n      \"is_empty\": true\r\n    }\r\n  },\r\n  page_size: 50\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet tasks = data.results\r\nlet task = tasks[Math.floor(Math.random() * tasks.length)];\r\nlet pageID = task.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\ncopy(pageURL)\r\n\r\nawait focusTab(pageURL, \"Google Chrome Beta\")\r\n```\r\n\r\n~Is there a better way to open the link in a browser? I stole this method from Ian Jones.~","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Shorten","description":"","shortcut":"command option control s","author":"Kent C. Dodds","twitter":"kentcdodds","tODO":"figure out how to make this optional","avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/295","url":"https://gist.githubusercontent.com/kentcdodds/539bb0543b8d8056e5a8d0dada61e140/raw/7f4b2cf571afddbcfea6bf1dcd18f3227e5fd4b5/shorten.js","title":"Shorten with netlify-shortener","command":"shorten-with-netlify-shortener","content":"[netlify-shortener](https://github.com/kentcdodds/netlify-shortener)\r\n\r\n[Install shorten](https://scriptkit.com/api/new?name=shorten&url=https://gist.githubusercontent.com/kentcdodds/539bb0543b8d8056e5a8d0dada61e140/raw/7f4b2cf571afddbcfea6bf1dcd18f3227e5fd4b5/shorten.js)\r\n\r\n```js\r\n// Menu: Shorten\r\n// Description: Shorten a given URL with a given short name via netlify-shortener\r\n// Shortcut: command option control s\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nconst dir = await env(\r\n  'SHORTEN_REPO_DIRECTORY',\r\n  'Where is your netlify-shortener repo directory?',\r\n)\r\n\r\nconst longURL = await arg(`What's the full URL?`)\r\n// TODO: figure out how to make this optional\r\nconst shortName = await arg(`What's the short name?`)\r\nconst netlifyShortenerPath = path.join(\r\n  dir,\r\n  'node_modules/netlify-shortener/dist/index.js',\r\n)\r\nconst {baseUrl} = JSON.parse(await readFile(path.join(dir, 'package.json')))\r\n\r\nsetPlaceholder(`Creating redirect: ${baseUrl}/${shortName} -> ${longURL}`)\r\nconst result = exec(\r\n  `node \"${netlifyShortenerPath}\" \"${longURL}\" \"${shortName}\"`,\r\n)\r\n\r\nconst {stderr, stdout} = result\r\n\r\nif (result.code === 0) {\r\n  const lastLine = stdout.split('\\n').filter(Boolean).slice(-1)[0]\r\n  notify({\r\n    title: '✅ Short URL created',\r\n    message: lastLine,\r\n  })\r\n} else {\r\n  const getErr = str => str.match(/Error: (.+)\\n/)?.[1]\r\n  const error = getErr(stderr) ?? getErr(stdout) ?? 'Unknown error'\r\n  console.error({stderr, stdout})\r\n  notify({\r\n    title: '❌ Short URL not created',\r\n    message: error,\r\n  })\r\n}\r\n\r\n```\r\n\r\nIt's a bit of a hack in some places, but it works!","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"shortcut":"command option k","menu":"Kill Notification","description":"","author":"Gary McCann","avatar":"https://avatars.githubusercontent.com/u/285740?v=4","user":"gm90","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/288","url":"","title":"Kill Notification","command":"kill-notification","content":"Inspired by Tyler Hall, a quick shortcut key to clear a mac notification with the awkward Big Sur UX  with the tiny cross click area.\r\n\r\n```javascript\r\n// Shortcut: command option k\r\n// Menu: Kill Notification\r\n// Description: Kill pesky mac os notification inspired by 240px-invisible-pixels @ https://tyler.io/240-invisible-pixels/\r\n// Author: Gary McCann\r\n\r\nconst robot = await npm (\"robotjs\");\r\nconst screenSize = robot.getScreenSize();\r\nconst xPosition = screenSize.width - 354;\r\nconst yPosition = 47;\r\n\r\nrobot.moveMouse(xPosition, yPosition);\r\n\r\nsetTimeout(() => {  \r\n  robot.mouseClick();\r\n}, 100)","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"avatar":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","user":"dealingwith","author":"Daniel Miller","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/286","url":"https://gist.githubusercontent.com/dealingwith/d8e701f2e0e5e64cb820103af96a08d2/raw/b2c11daf28ed7e4b40f2809bda428b527dd78b24/notion-add-task.js","title":"Post to Notion","command":"post-to-notion","content":"<img width=\"418\" alt=\"Screen Shot 2021-05-19 at 11 06 46 PM\" src=\"https://user-images.githubusercontent.com/124208/118917657-f8c41e00-b8f6-11eb-9c5d-de7be826ec4c.png\">\r\n\r\nI thought the Notion API might be a fun thing to play with via Script Kit. I have a singular \"tasks\" database that I use to capture all manner of things, so I always want to insert pages into it in order to process them later. These scripts will require you to update the databaseID value in the code itself. I could see an expansion of this script to allow for the selection of a specific Notion database from a list.\r\n\r\nThe second script below takes a second input in order to insert content into the new page -- I was wondering if there is a way to allow multiline text input via Script Kit, which would make that script more robust.\r\n\r\nYou can get a Notion API token [here](https://developers.notion.com/) and find quick-start instructions [here](https://developers.notion.com/docs), as well as the API reference [here](https://developers.notion.com/reference/intro).\r\n\r\nFor a quick overview of the data model, [check out Chris Biscardi's video here](https://www.youtube.com/watch?v=apKz987OLcE&t=1s). For a more in-depth overview, check out [this Notion blog post](https://www.notion.so/blog/data-model-behind-notion).\r\n\r\n[Install notion-add-task](https://scriptkit.com/api/new?name=notion-add-task&url=https://gist.githubusercontent.com/dealingwith/d8e701f2e0e5e64cb820103af96a08d2/raw/b2c11daf28ed7e4b40f2809bda428b527dd78b24/notion-add-task.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\nlet content = await arg('Enter Task')\r\n\r\nlet {data} = await post(\r\n  'https://api.notion.com/v1/pages', {\r\n  \"parent\": { \"database_id\": databaseID },\r\n  \"properties\": {\r\n    \"Name\": {\r\n      \"title\": [\r\n        {\r\n          \"text\": {\r\n            \"content\": content\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n  }\r\n})\r\n\r\nlet pageID = data.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\n\r\ncopy(pageURL)\r\n```\r\n\r\n\r\n[Install notion-add-task-with-content](https://scriptkit.com/api/new?name=notion-add-task-with-content&url=https://gist.githubusercontent.com/dealingwith/99c4da33565dddb115b5c173e1e29f48/raw/0c5b31b56b0fcc39fa3f589f7e2dcd4312f5c53a/notion-add-task-with-content.js)\r\n\r\n```js\r\nlet notionToken = await env('NOTION_USER_TOKEN')\r\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\r\nlet content = await arg('Enter Task')\r\n\r\nlet {data} = await post(\r\n  'https://api.notion.com/v1/pages', {\r\n  \"parent\": { \"database_id\": databaseID },\r\n  \"properties\": {\r\n    \"Name\": {\r\n      \"title\": [\r\n        {\r\n          \"text\": {\r\n            \"content\": content\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet bodyContent = await arg('Enter Content')\r\n\r\nlet {bodyData} = await patch(\r\n  `https://api.notion.com/v1/blocks/${data.id}/children`, {\r\n  \"children\": [\r\n    {\r\n      \"object\": \"block\",\r\n      \"type\": \"paragraph\",\r\n      \"paragraph\": {\r\n        \"text\": [\r\n          {\r\n            \"type\": \"text\",\r\n            \"text\": {\r\n              \"content\": bodyContent\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n},\r\n{\r\n  headers: {\r\n    Authorization: `Bearer ${notionToken}`,\r\n    \"Content-Type\": \"application/json\",\r\n    \"Notion-Version\": \"2021-05-13\"\r\n  }\r\n})\r\n\r\nlet pageID = data.id.replace(/-/g, \"\");\r\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\r\n\r\ncopy(pageURL)\r\n```\r\n\r\n(I just noticed that I haven't updated the first script to pass the \"Notion-Version\" header, but it seems unnecessary for now.)","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"npm","description":"","author":"Ian Sutherland","twitter":"iansu","avatar":"https://avatars.githubusercontent.com/u/433725?u=7e3bc90109dae2debbf59a2c822f3daca50f6aa7&v=4","user":"iansu","discussion":"https://github.com/johnlindquist/kit/discussions/283","url":"https://gist.githubusercontent.com/iansu/7f0227f191865e18b5a2b7ff616d6fd9/raw/6e18ce83af9eedc2a3fde3b39f35f682e3d841e4/npm.js","title":"npm search","command":"npm-search","content":"[Install npm](https://scriptkit.com/api/new?name=npm&url=https://gist.githubusercontent.com/iansu/7f0227f191865e18b5a2b7ff616d6fd9/raw/6e18ce83af9eedc2a3fde3b39f35f682e3d841e4/npm.js)\r\n\r\nThis is a very simple script that I made to search npm and open the results in your browser. I took a quick look and didn't see anything similar here so I figured I would share it, even though the script itself isn't particularly interesting.\r\n\r\n```js\r\n// Menu: npm\r\n// Description: Search npm\r\n// Author: Ian Sutherland\r\n// Twitter: @iansu\r\n\r\nawait arg(\"Search query:\", async () => {\r\n  let query = await arg(\"Search query:\")\r\n\r\n  exec(`open https://www.npmjs.com/search?q=${query}`)\r\n})\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Twimage Download","description":"","shortcut":"fn ctrl opt cmd t","author":"Kent C. Dodds","twitter":"kentcdodds","avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/269","url":"https://gist.githubusercontent.com/kentcdodds/acfa864608d00af8a37a074cc857c657/raw/82294cd894a5b04800f642b02faaf3f829f550fc/twimage-download.js","title":"Twimage Download (tweet image)","command":"twimage-download-tweet-image","content":"I made a little script to download images from tweets and set exif data to info derived from the tweet. Especially helpful is the creation date and the GPS data (if the tweet includes location).\r\n\r\nI'm using this to go back to pictures people have taken of me speaking at conferences and adding them to my personal photo library and make sure they appear at the right time in my photo library timeline.\r\n\r\n[Install twimage-download](https://scriptkit.com/api/new?name=twimage-download&url=https://gist.githubusercontent.com/kentcdodds/acfa864608d00af8a37a074cc857c657/raw/82294cd894a5b04800f642b02faaf3f829f550fc/twimage-download.js)\r\n\r\n```js\r\n// Menu: Twimage Download\r\n// Description: Download twitter images and set their exif info based on the tweet metadata\r\n// Shortcut: fn ctrl opt cmd t\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nimport fs from 'fs'\r\nimport {fileURLToPath, URL} from 'url'\r\n\r\nconst exiftool = await npm('node-exiftool')\r\nconst exiftoolBin = await npm('dist-exiftool')\r\nconst fsExtra = await npm('fs-extra')\r\n\r\nconst baseOut = home('Pictures/twimages')\r\n\r\nconst token = await env('TWITTER_BEARER_TOKEN')\r\nconst twitterUrl = await arg('Twitter URL')\r\nconsole.log(`Starting with ${twitterUrl}`)\r\n\r\nconst tweetId = new URL(twitterUrl).pathname.split('/').slice(-1)[0]\r\nconst params = new URLSearchParams()\r\nparams.set('ids', tweetId)\r\nparams.set('user.fields', 'username')\r\nparams.set('tweet.fields', 'author_id,created_at,geo')\r\nparams.set('media.fields', 'url')\r\nparams.set('expansions', 'author_id,attachments.media_keys,geo.place_id')\r\nconst response = await get(\r\n  `https://api.twitter.com/2/tweets?${params.toString()}`,\r\n  {\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  },\r\n)\r\n\r\nconst json = /** @type import('../types/twimage-download').JsonResponse */ (\r\n  response.data\r\n)\r\n\r\nconst ep = new exiftool.ExiftoolProcess(exiftoolBin)\r\n\r\nawait ep.open()\r\n\r\nfor (const tweet of json.data) {\r\n  const {attachments, geo, id, text, created_at} = tweet\r\n  if (!attachments) throw new Error(`No attachements: ${tweet.id}`)\r\n  const author = json.includes.users.find(u => u.id === tweet.author_id)\r\n  if (!author) throw new Error(`wut? No author? ${tweet.id}`)\r\n\r\n  const link = `https://twitter.com/${author.username}/status/${id}`\r\n  const {latitude, longitude} = geo ? await getGeoCoords(geo.place_id) : {}\r\n\r\n  for (const mediaKey of attachments.media_keys) {\r\n    const media = json.includes.media.find(m => mediaKey === m.media_key)\r\n    if (!media) throw new Error(`Huh... no media found...`)\r\n    const formattedDate = formatDate(created_at)\r\n    const colonDate = formattedDate.replace(/-/g, ':')\r\n    const formattedTimestamp = formatTimestamp(created_at)\r\n    const filename = new URL(media.url).pathname.split('/').slice(-1)[0]\r\n    const filepath = path.join(\r\n      baseOut,\r\n      formattedDate.split('-').slice(0, 2).join('-'),\r\n      filename,\r\n    )\r\n\r\n    await download(media.url, filepath)\r\n\r\n    console.log(`Updating exif metadata for ${filepath}`)\r\n    await ep.writeMetadata(\r\n      filepath,\r\n      {\r\n        ImageDescription: `${text} – ${link}`,\r\n        Keywords: 'photos from tweets',\r\n        DateTimeOriginal: formattedTimestamp,\r\n        FileModifyDate: formattedTimestamp,\r\n        ModifyDate: formattedTimestamp,\r\n        CreateDate: formattedTimestamp,\r\n        ...(geo\r\n          ? {\r\n              GPSLatitudeRef: latitude > 0 ? 'North' : 'South',\r\n              GPSLongitudeRef: longitude > 0 ? 'East' : 'West',\r\n              GPSLatitude: latitude,\r\n              GPSLongitude: longitude,\r\n              GPSDateStamp: colonDate,\r\n              GPSDateTime: formattedTimestamp,\r\n            }\r\n          : null),\r\n      },\r\n      ['overwrite_original'],\r\n    )\r\n  }\r\n}\r\n\r\nawait ep.close()\r\nconsole.log(`All done with ${twitterUrl}`)\r\n\r\nfunction formatDate(t) {\r\n  const d = new Date(t)\r\n  return `${d.getFullYear()}-${padZero(d.getMonth() + 1)}-${padZero(\r\n    d.getDate(),\r\n  )}`\r\n}\r\nfunction formatTimestamp(t) {\r\n  const d = new Date(t)\r\n  const formattedDate = formatDate(t)\r\n  return `${formatDate(t)} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\r\n}\r\nfunction padZero(n) {\r\n  return String(n).padStart(2, '0')\r\n}\r\n\r\nasync function getGeoCoords(placeId) {\r\n  const response = await get(\r\n    `https://api.twitter.com/1.1/geo/id/${placeId}.json`,\r\n    {\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n      },\r\n    },\r\n  )\r\n  const [longitude, latitude] = response.data.centroid\r\n  return {latitude, longitude}\r\n}\r\n\r\nasync function download(url, out) {\r\n  console.log(`downloading ${url} to ${out}`)\r\n  await fsExtra.ensureDir(path.dirname(out))\r\n\r\n  const writer = fs.createWriteStream(out)\r\n  const response = await get(url, {responseType: 'stream'})\r\n  response.data.pipe(writer)\r\n\r\n  return new Promise((resolve, reject) => {\r\n    writer.on('finish', () => resolve(out))\r\n    writer.on('error', reject)\r\n  })\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Create gist from clipboard","description":"","author":"Gregor Martynus","twitter":"gr2m","https":"//github.com/gr2m/scriptkit-octokit/","shortcut":"command option g","avatar":"https://avatars.githubusercontent.com/u/39992?u=1ee38610bb2d8a082b3e84db7ecacf78149d061b&v=4","user":"gr2m","discussion":"https://github.com/johnlindquist/kit/discussions/266","url":"","title":"Create Gist from Clipboard","command":"create-gist-from-clipboard","content":"<kbd><a href=\"https://scriptkit.com/api/new?name=create-gist-from-clipboard&url=https://gist.githubusercontent.com/gr2m/f5d7ee961664ee1e2561ca29311026c6/raw/dbecf63ff2a68dcc4778a2d4d26a42af2b3998bf/create-gist-from-clipboard.js\">Install create-gist-from-clipboard</a></kbd>\r\n\r\n```js\r\n// Menu: Create gist from clipboard\r\n// Description: Creates a new GitHub Gist with the contents of your current clipboard\r\n// Author: Gregor Martynus\r\n// Twitter: @gr2m\r\n\r\n// https://github.com/gr2m/scriptkit-octokit/\r\nconst { Octokit } = await npm(\"scriptkit-octokit\");\r\nconst octokit = new Octokit({\r\n  auth: {\r\n    scopes: [\"gist\"],\r\n  },\r\n});\r\n\r\n// copy the content from the current clipboard\r\nconst content = await paste();\r\n\r\nif (!content) {\r\n  console.log(\"clipboard is empty\");\r\n  exit();\r\n}\r\n\r\nconst { data } = await octokit.rest.gists.create({\r\n  description: \"Created using https://github.com/johnlindquist/kit/discussions/266\",\r\n  public: false,\r\n  files: {\r\n    \"clipboard.txt\": { content },\r\n  },\r\n});\r\n\r\nawait copy(data.html_url);\r\nconsole.log(\"Gist created at %s\", data.html_url);\r\n```\r\n\r\nI highly recommend setting a shortcut, e.g. add to the top:\r\n\r\n```js\r\n// Shortcut: command option g\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Word Game","description":"","author":"John Lindquist","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","discussion":"https://github.com/johnlindquist/kit/discussions/253","url":"https://gist.githubusercontent.com/johnlindquist/0388865384e7a761e92c0bfa5b176a9a/raw/9c7214c1533f43fd09ac418d8cfc4c574f8e655a/word-game.js","title":"Word Game 🎯","command":"word-game","content":"\r\n[Install word-game](https://scriptkit.com/api/new?name=word-game&url=https://gist.githubusercontent.com/johnlindquist/0388865384e7a761e92c0bfa5b176a9a/raw/9c7214c1533f43fd09ac418d8cfc4c574f8e655a/word-game.js)\r\n\r\n```js\r\n// Menu: Word Game\r\n// Description: Guess letters to win!\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet playAgain = true\r\n\r\nwhile (playAgain) {\r\n  let {\r\n    data: [word],\r\n  } = await get(\r\n    `https://random-word-api.herokuapp.com/word`\r\n  )\r\n\r\n  let correct = false\r\n  let guesses = []\r\n\r\n  while (!correct) {\r\n    let [...letters] = await arg(\r\n      { placeholder: \"Guess a letter/s:\", hint: word }, //remove hint to make it more challenging 😉\r\n      word\r\n        .split(\"\")\r\n        .map(char => (guesses.includes(char) ? char : \"*\"))\r\n        .join(\"\")\r\n    )\r\n    guesses = guesses.concat(...letters)\r\n\r\n    correct = word\r\n      .split(\"\")\r\n      .every(char => guesses.includes(char))\r\n  }\r\n\r\n  playAgain = await arg(`🏆 \"${word}\"! Play Again?`, [\r\n    { name: \"Yes\", value: true },\r\n    { name: \"No\", value: false },\r\n  ])\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Open a GitHub Repo","description":"","author":"Mandi Wise","twitter":null,"https":"//docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token","avatar":"https://avatars.githubusercontent.com/u/1518780?u=af82f867331be805d51330c3f8e1f7ab8169837b&v=4","user":"mandiwise","discussion":"https://github.com/johnlindquist/kit/discussions/252","url":"","title":"Open a GitHub repo (including org and private repos, as well as pagination)","command":"open-a-github-repo-including-org-and-private-repos-as-well-as-pagination","content":"This script allows you to authenticate with a GitHub personal access token and open repos from your user account or any organizations you belong to. It also displays private repos and handles pagination if the repo count exceeds 100 (just scroll to the bottom of the list and you'll see a \"Load more...\" option, when applicable).\r\n\r\n![Opening an org repo](https://user-images.githubusercontent.com/1518780/117495102-70c33900-af32-11eb-9e04-be54ca374032.gif)\r\n\r\n```js\r\n// Menu: Open a GitHub Repo\r\n// Description: Launch a GitHub repo in your browser\r\n// Author: Mandi Wise\r\n// Twitter: @mandiwise\r\n\r\n// Learn how to create a personal access token for GitHub here:\r\n// https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\r\n\r\nlet { Octokit } = await npm(\"octokit\");\r\n\r\nconst GH_PERSONAL_ACCESS_TOKEN = await env(\"GH_PERSONAL_ACCESS_TOKEN\");\r\nconst octokit = new Octokit({ auth: GH_PERSONAL_ACCESS_TOKEN });\r\n\r\nconst ORGS_PER_PAGE = 20;\r\nconst REPOS_PER_PAGE = 100;\r\n\r\n// GraphQL operations\r\n\r\nconst GetAccounts = `query GetAccounts($first: Int) { \r\n  viewer { \r\n    organizations(first: $first) {\r\n      edges {\r\n        node {\r\n          login\r\n          name\r\n          url\r\n        }\r\n      }\r\n    }\r\n    login\r\n    name\r\n    url\r\n  }\r\n}`;\r\n\r\nconst ReposPage = `fragment ReposPage on RepositoryConnection {\r\n  edges {\r\n    node {\r\n      name\r\n      description\r\n      url\r\n    }\r\n  }\r\n  pageInfo {\r\n    endCursor\r\n    hasNextPage\r\n  }\r\n}`;\r\n\r\nconst GetOrgRepos = `query GetOrgRepos($first: Int, $after: String, $login: String!) {\r\n  viewer { \r\n    organization(login: $login) {\r\n      repositories(\r\n        first: $first\r\n        after: $after\r\n        orderBy: { field: UPDATED_AT, direction: DESC }\r\n      ) {\r\n        ...ReposPage\r\n      }\r\n    }\r\n  }\r\n}\r\n${ReposPage}\r\n`;\r\n\r\nconst GetUserRepos = `query GetUserRepos($first: Int, $after: String) {\r\n  viewer { \r\n    repositories(\r\n      first: $first\r\n      after: $after\r\n      orderBy: {field: UPDATED_AT, direction: DESC}\r\n      affiliations: OWNER\r\n    ) {\r\n      ...ReposPage\r\n    }\r\n  }\r\n}\r\n${ReposPage}\r\n`;\r\n\r\n// Get user and their organizations in a list\r\n\r\nlet dots = 0;\r\nconst accountsPlaceholderIntervalId = setInterval(() => {\r\n  setPlaceholder(`Loading GitHub accounts`.padEnd(++dots, \".\"));\r\n}, 100);\r\n\r\nconst { viewer } = await octokit.graphql(GetAccounts, { first: ORGS_PER_PAGE });\r\n\r\nif (!viewer) {\r\n  exit(1);\r\n}\r\n\r\nconst { login, name, url, organizations } = viewer;\r\nconst accounts = [\r\n  { name, value: login, description: url, type: \"user\" },\r\n  ...organizations.edges.map(({ node: { login, name, url } }) => ({\r\n    name,\r\n    value: login,\r\n    description: url,\r\n    type: \"org\"\r\n  }))\r\n].sort((a, b) => (a.name > b.name ? 1 : -1));\r\n\r\nclearInterval(accountsPlaceholderIntervalId);\r\ndots = 0;\r\n\r\nconst accountChoice = await arg(\"Which account?\", accounts);\r\nconst { type: accountType } = accounts.find(\r\n  account => accountChoice === account.value\r\n);\r\n\r\n// Get repo list for the user or organization\r\n\r\nlet repositoriesAndLoadMore = [];\r\n\r\nasync function fetchRepositories(variables) {\r\n  const reposPlaceholderIntervalId = setInterval(() => {\r\n    setPlaceholder(`Loading repositories`.padEnd(++dots, \".\"));\r\n  }, 100);\r\n\r\n  let edges, endCursor, hasNextPage;\r\n  const oldLoadMore = repositoriesAndLoadMore.find(({ value }) =>\r\n    value.startsWith(\"load-more-after-\")\r\n  );\r\n\r\n  if (oldLoadMore) {\r\n    repositoriesAndLoadMore.pop();\r\n  }\r\n\r\n  if (accountType === \"org\") {\r\n    ({\r\n      viewer: {\r\n        organization: {\r\n          repositories: {\r\n            edges,\r\n            pageInfo: { endCursor, hasNextPage }\r\n          }\r\n        }\r\n      }\r\n    } = await octokit.graphql(GetOrgRepos, {\r\n      login: accountChoice,\r\n      ...variables\r\n    }));\r\n  } else {\r\n    ({\r\n      viewer: {\r\n        repositories: {\r\n          edges,\r\n          pageInfo: { endCursor, hasNextPage }\r\n        }\r\n      }\r\n    } = await octokit.graphql(GetUserRepos, variables));\r\n  }\r\n\r\n  repositoriesAndLoadMore = [\r\n    ...repositoriesAndLoadMore,\r\n    ...edges.map(({ node: { description, name, url } }) => ({\r\n      name,\r\n      description,\r\n      value: url\r\n    }))\r\n  ];\r\n\r\n  if (hasNextPage) {\r\n    repositoriesAndLoadMore.push({\r\n      name: \"Load more...\",\r\n      value: `load-more-after-${endCursor}`\r\n    });\r\n  }\r\n\r\n  clearInterval(reposPlaceholderIntervalId);\r\n  dots = 0;\r\n\r\n  if (!repositoriesAndLoadMore.length) {\r\n    exit(1);\r\n  }\r\n\r\n  let repoChoice = await arg(\"Which project?\", repositoriesAndLoadMore);\r\n\r\n  if (repoChoice.startsWith(\"load-more-after-\")) {\r\n    await fetchRepositories({\r\n      first: REPOS_PER_PAGE,\r\n      after: repoChoice.split(\"-\").pop()\r\n    });\r\n  } else {\r\n    exec(`open ${repoChoice}`);\r\n  }\r\n}\r\n\r\nawait fetchRepositories({ first: REPOS_PER_PAGE });\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"Snippets","description":"","author":"Jakub Olek","twitter":null,"shortcut":"opt -","avatar":"https://avatars.githubusercontent.com/u/1018759?v=4","user":"hakubo","discussion":"https://github.com/johnlindquist/kit/discussions/249","url":"https://gist.githubusercontent.com/hakubo/3ce0072320188e189025548bdb460b5e/raw/d3aff955e0442c8ed20d1ca7a3c03ac9f945eae2/snippets.js","title":"Snippets","command":"snippets","content":"Small snippets manager with builtin support for variables.\r\nVariables are defined as an array of function so they can be anything, arg, getSelectedText etc.\r\nSnippet can also be a simple string if it has no variables\r\n\r\n[Install Snippets](https://scriptkit.com/api/new?name=snippets&url=https://gist.githubusercontent.com/hakubo/3ce0072320188e189025548bdb460b5e/raw/d3aff955e0442c8ed20d1ca7a3c03ac9f945eae2/snippets.js)\r\n\r\n```js\r\n// Menu: Snippets\r\n// Description: Snippets collection\r\n// Author: Jakub Olek\r\n// Twitter: @JakubOlek\r\n// Shortcut: opt -\r\n\r\nconst { setSelectedText } = await kit(\"text\");\r\n\r\nfunction capitalizeFirstLetter(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nconst snippetMap = {\r\n  useState: {\r\n    args: [() => arg(\"variable name\"), () => arg(\"variable value\")],\r\n    template: (name, value) =>\r\n      `const [${name}, set${capitalizeFirstLetter(name)}] = useState(${value})`,\r\n  },\r\n  name: \"Jakub Olek\",\r\n  date: new Date().toLocaleDateString(\"en-GB\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  }),\r\n  test: {\r\n    args: [() => arg(\"should\")],\r\n    template: (testName) => `test(\"should ${testName}\", function() {\r\n\r\n  })`,\r\n  },\r\n  component: {\r\n    args: [() => arg(\"component name\")],\r\n    template: (componentName) => `function ${capitalizeFirstLetter(\r\n      componentName\r\n    )}() {\r\n      return\r\n    }`,\r\n  },\r\n};\r\n\r\nconst snippetName = await arg(\"Snippet\", Object.keys(snippetMap));\r\n\r\nlet result = snippetMap[snippetName];\r\nconst { args, template } = result;\r\n\r\nif (template) {\r\n  const variables = [];\r\n\r\n  if (args) {\r\n    for (let i = 0; i < args.length; i++) {\r\n      const variable = args[i];\r\n\r\n      if (typeof variable !== \"string\") {\r\n        variables.push(await variable());\r\n      }\r\n    }\r\n  }\r\n\r\n  setSelectedText(template(...variables));\r\n} else {\r\n  setSelectedText(result);\r\n}\r\n\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"shortcut":"command shift -","menu":"Set GitHub Status","description":"","avatar":"https://avatars.githubusercontent.com/u/39992?u=1ee38610bb2d8a082b3e84db7ecacf78149d061b&v=4","user":"gr2m","author":"Gregor Martynus","twitter":"gr2m","discussion":"https://github.com/johnlindquist/kit/discussions/246","url":"https://gist.githubusercontent.com/gr2m/b336c3c76de58a7b65299b9e224564c5/raw/187c618b70b943b117e452bd63799a2be7785b95/set-github-status.js","title":"Set GitHub profile status","command":"set-github-profile-status","content":"[Install set-github-status](https://scriptkit.com/api/new?name=set-github-status&url=https://gist.githubusercontent.com/gr2m/b336c3c76de58a7b65299b9e224564c5/raw/187c618b70b943b117e452bd63799a2be7785b95/set-github-status.js)\r\n\r\n```js\r\n//Shortcut: command shift -\r\n// Menu: Set GitHub Status\r\n// Description: Sets the status text on your GitHub Profile\r\n\r\nconst message = await arg(\"What would you like to say?\");\r\nconst token = await env(\"GITHUB_STATUS_TOKEN\", {\r\n  secret: true,\r\n  ignoreBlur: true,\r\n  hint: md(\r\n    `Create a token [on GitHub](https://github.com/settings/tokens/new?scopes=user&description=kit%20script)`\r\n  ),\r\n});\r\n\r\nconst response = await post(\r\n  \"https://api.github.com/graphql\",\r\n  {\r\n    query: `mutation ($text:String) {\r\n      changeUserStatus(input:{message:$text}) {\r\n        status {\r\n          message\r\n        }\r\n      }\r\n    }`,\r\n    variables: {\r\n      text: message,\r\n    },\r\n  },\r\n  {\r\n    headers: {\r\n      authorization: `token ${token}`,\r\n    },\r\n  }\r\n);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"View Desktop","description":"","author":"Z Zeleznick","twitter":null,"shortcut":"cmd shift d","nOTE":"Need to grant Kit app full disk access in Security and Privacy or find will return 0 results","avatar":"https://avatars.githubusercontent.com/u/5779832?u=42c63031fea8d5774f5011caf5b92ac5e61c346b&v=4","user":"zzeleznick","discussion":"https://github.com/johnlindquist/kit/discussions/237","url":"","title":"Low-Fi Finder Image Grid View 🖼️","command":"low-fi-finder-image-grid-view","content":"## Low-Fi Finder Image Grid View 🖼️\r\n\r\nWhile list views are nice, sometimes you just want a grid 😄. Here, I played around with displaying images in a grid layout.\r\n\r\nI'd even say that grids feel like a natural extension to the layouts in #231 🤓 \r\n\r\nI started this project a little while back, and am currently using the html panel as opposed to `choice.html`. To support custom actions on selection (e.g. copy image filepath to clipboard on choice selection) within a grid context, I think that there is at least one missing piece.\r\n\r\n> Enable setting `className` / styles of choice button parent container\r\n\r\nIn my example, I'm doing a self-described css injection to add new styles (e.g. `.grid-cols-3 {grid-template-columns: repeat(3, minmax(0, 1fr))}`), but the styles probably could be done in-line.\r\n\r\n## Demo\r\n\r\n![image_grid](https://user-images.githubusercontent.com/5779832/116947457-acf45200-ac31-11eb-8982-f1445d1aaf52.gif)\r\n\r\n## Code\r\n\r\n<details>\r\n<summary>\r\n<code>lib/image-grid.js</code>\r\n</summary>\r\n\r\n```js\r\n// lib/image-grid.js\r\n\r\nconst DEFAULT_LIMIT = 10000; // 1000; // 100;\r\nconst DEBUG = { ENABLED: false };\r\n\r\nconst debug = (...args) => DEBUG.ENABLED && console.log(...args)\r\nconst info = (...args) => console.log(...args)\r\n\r\nexport const enableDebugMode = () => { DEBUG.ENABLED = true }\r\n\r\nconst getImages = (filepath, maxdepth) => {\r\n  // NOTE: options to use \"-ctime -90d\" / \"-atime -90d\" to filter more results\r\n  const findCommand = `find -E ${filepath} -iregex '.*\\.(jpg|jpeg|png|gif)' -maxdepth ${maxdepth}`\r\n  const findSortedCommand = `${findCommand} -print0 | xargs -0 ls -at`\r\n  debug(\"findSortedCommand\", findSortedCommand)\r\n  return exec(findSortedCommand, { silent: true }).toString().split(\"\\n\").filter(v => v)\r\n}\r\n\r\nconst buildImageModal = (payload) => {\r\n  let {file} = payload;\r\n  const img = `<img src=\"${file}\">`\r\n  return `<div class=\"imgContainer\">${img}</div>`\r\n}\r\n\r\nconst injectCss = (html) => {\r\n  // our tailwind build doesn't include grid css\r\n  // we add some custom styles as well\r\n  const css = `\r\n    /* Mimic tailwind grid css */\r\n    .grid {display:grid}\r\n    .grid-cols-3 {grid-template-columns: repeat(3, minmax(0, 1fr))}\r\n    .grid-cols-4 {grid-template-columns: repeat(4, minmax(0, 1fr))}\r\n    .grid-cols-5 {grid-template-columns: repeat(5, minmax(0, 1fr))}\r\n    /* custom css to center images in grid */\r\n    .grid div {place-items: center; padding: clamp(1px, 4%, 25px);}\r\n    .imgContainer {display: flex;}\r\n  `\r\n  const style = `<style type=\"text/css\">${css}</style>`\r\n  return `${style}${html}`\r\n}\r\n\r\n\r\nconst buildPage = (imageObjects, limit = DEFAULT_LIMIT) => {\r\n  const subset = imageObjects\r\n      .slice(0, limit)\r\n      .map(file => { return { file } })\r\n\r\n  const columns = subset.length > 32 ? (subset.length > 64 ? 5 : 4) : 3\r\n  const modals = subset.map(buildImageModal).join('\\n')\r\n\r\n  const html = `<div class=\"grid grid-cols-${columns} pt-1 m-1\">${modals}</div>`\r\n  const page = injectCss(html)\r\n  debug(page);\r\n  info('buildPage: Done')\r\n  return page\r\n}\r\n\r\nexport const buildImagesPanel = async (filepath, maxdepth, limit) => {\r\n  const images = getImages(filepath, maxdepth);\r\n  info(`Found ${images.length} images`);\r\n  await arg({\r\n    input: \" \",\r\n  }, buildPage(images, limit));\r\n}\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\n<code>view-desktop.js</code>\r\n</summary>\r\n\r\n```js\r\n// Menu: View Desktop\r\n// Description: View Desktop Attachments\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n// Shortcut: cmd shift d\r\n\r\nconst {buildImagesPanel} = await lib(\"image-grid\")\r\n\r\nconst filepath = \"~/Desktop\"\r\nconst depth = \"3\"\r\n\r\nawait buildImagesPanel(filepath, depth)\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\n<code>view-attachments.js</code>\r\n</summary>\r\n\r\n```js\r\n// Menu: View Attachment\r\n// Description: View iMessage Attachments\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n// Shortcut: cmd shift l\r\n\r\nconst {buildImagesPanel} = await lib(\"image-grid\")\r\n\r\n// NOTE: Need to grant Kit app full disk access in Security and Privacy or find will return 0 results \r\nconst filepath = \"~/Library/Messages/Attachments\"\r\nconst depth = \"4\"\r\n\r\nawait buildImagesPanel(filepath, depth)\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\n<code>view-downloads.js</code>\r\n</summary>\r\n\r\n```js\r\n// Menu: View Download\r\n// Description: View Download Attachments\r\n// Author: Zach Zeleznick\r\n// Twitter: @zzxiv\r\n// Shortcut: cmd shift 0\r\n\r\nconst {buildImagesPanel, enableDebugMode} = await lib(\"image-grid\")\r\n\r\nconst filepath = \"~/Downloads\"\r\nconst depth = \"2\"\r\nconst limit = 42\r\n\r\nenableDebugMode()\r\n\r\nawait buildImagesPanel(filepath, depth, limit)\r\n```\r\n</details>\r\n\r\n\r\n### Reference\r\n\r\nHere are a few screenshots of the native Finder window on macOS 10.14 that I intended to recreate in low-fidelity.\r\n<table>\r\n<tr>\r\n<td><img width=\"863\" alt=\"Native View\" src=\"https://user-images.githubusercontent.com/5779832/116947788-7a972480-ac32-11eb-9e22-10dfb1fa3dff.png\"></td>\r\n<td><img width=\"490\" alt=\"Sorting Options\" src=\"https://user-images.githubusercontent.com/5779832/116947778-779c3400-ac32-11eb-9378-4bb8c97012d6.png\"></td>\r\n</tr>\r\n<tr>\r\n<td>Example search for `png` files on my Desktop</td>\r\n<td>Sorting options</td>\r\n</tr>\r\n</table>\r\n\r\n\r\n\r\n\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""},{"avatar":"https://avatars.githubusercontent.com/u/6188161?v=4","user":"zacjones93","author":"Zac Jones","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/236","url":"","title":"Drag and Drop Files for Data Entry and Syncing","command":"drag-and-drop-files-for-data-entry-and-syncing","content":"My fiancé does product shots for a local plant shop in the area. She will have dozens of plants to shoot that result in hundreds of photos.\r\n\r\nPart of the job is organizing and uploading them to google photos. This means she has been renaming hundreds of files individually. 😭  \r\n\r\nThe system they have down is: `{PLANT_NAME}{DETAIL?}{POT_SIZE}_{number}`. So for any given plant it will have several 'product' shots and several 'detail' shots taken for it.\r\n\r\nA simple script but going to save hours of data entry!\r\n\r\n\r\nhttps://user-images.githubusercontent.com/6188161/116919398-377f8600-ac1f-11eb-8f1c-94dc083501e8.mp4\r\n\r\n\r\n[Download Link](https://scriptkit.com/api/new?name=upload-photos&url=https://gist.githubusercontent.com/zacjones93/d9b153917062eb7da1a520deef4b54e4/raw/e87e3e4f98cc0b7b395a7f0b3961e05dc559cddc/upload-photos.js)\r\n\r\n<details>\r\n<summary>code</summary>\r\n<br>\r\n\r\n```js\r\nconst fs = await npm(\"fs\"); \r\nconst plantName = await arg(\"Enter a plant name:\");\r\nconst potSize = await arg(\"Enter pot size: \");\r\nconst shotType = await arg(\"Is this product or detail?\", [\"product\", \"detail\"]);\r\n\r\nconst photos = await drop(\"Drop your images\");\r\nconsole.log(photos);\r\n\r\n\r\nlet renamePhotoToDirectory = (path, plantName) => {\r\n // going to be a env variable\r\n  let targetDirectory = \"/Users/zac/Desktop/photops/photos\";\r\n\r\n  let photoPath = `${targetDirectory}/${plantName}`;\r\n\r\n  fs.rename(path, photoPath, (err) => {\r\n    if (err) return console.log(\"there was an error: \", err);\r\n\r\n    console.log(\"selectedFiles renamed\");\r\n  });\r\n};\r\n\r\nphotos.map((plant, index) => {\r\n  if (shotType === \"detail\") {\r\n    renamePhotoToDirectory(\r\n      plant.path,\r\n      `${plantName}Detail${potSize}_${index + 1}.png`\r\n    );\r\n  } else {\r\n    renamePhotoToDirectory(plant.path, `${plantName}${potSize}_${index + 1}.png`);\r\n  }\r\n});\r\n```\r\n\r\n</details>","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"shortcut":"opt t","avatar":"https://avatars.githubusercontent.com/u/495517?u=12a5fbe7d6e91d3ba2bcb9a603fca020e62912fb&v=4","user":"chrislaughlin","author":"Chris Laughlin","twitter":"chrislaughlin","discussion":"https://github.com/johnlindquist/kit/discussions/235","url":"","title":"Tweet Script","command":"tweet-script","content":"Send Tweet from Kit, provides a way to send a tweet directly from Kit. When the script is run it will ask you to enter a tweet then it will run sentiment analysis on the tweet. If the tweet is positive it will be posted, if it's negative you will be prompted to confirm the send. \r\n\r\n```javascript \r\n// Shortcut: opt t\r\nlet Twitter = await npm('twitter-lite');\r\nlet Sent = await npm('sentiment');\r\n\r\nlet envOptions = {\r\n    hint: md(\r\n      `You need to [create an app](https://developer.twitter.com/en/apps) to get these keys/tokens`,\r\n    ),\r\n    ignoreBlur: true,\r\n    secret: true,\r\n  }\r\n  \r\n\r\nlet client = new Twitter({\r\n    consumer_key: await env('TWITTER_CONSUMER_KEY', envOptions),\r\n    consumer_secret: await env('TWITTER_CONSUMER_SECRET', envOptions),\r\n    access_token_key: await env('TWITTER_ACCESS_TOKEN_KEY', envOptions),\r\n    access_token_secret: await env('TWITTER_ACCESS_TOKEN_SECRET', envOptions),\r\n});\r\n\r\nconst sentiment = new Sent();\r\n\r\nlet tweet = await arg(\"what's on your mind?\");\r\n\r\nconst { score } = sentiment.analyze(tweet);\r\n\r\nconst isNeg = score < 0;\r\n\r\nlet shouldPost = await arg(\"Thats a little 🧂y\", [\r\n    { name: \"yeah I know sean anyway\", value: true },\r\n    {name: \"oh yeah don't post that\", value: false },\r\n])\r\n\r\nif (shouldPost) {\r\n    await client.post('statuses/update', {\r\n        status: `Random thought: ${tweet}`,\r\n    }).catch(error => console.log(error));\r\n}\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":""},{"menu":"My IP","description":"","author":"John Lindquist","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","discussion":"https://github.com/johnlindquist/kit/discussions/234","url":"https://gist.githubusercontent.com/johnlindquist/47637881382e39f2bf738354f57ac7d7/raw/e9d1ff50a9d5bc03ca4c1af880a6c50f7a6c1ce6/my-ip.js","title":"My IP","command":"my-ip","content":"\r\n[Install my-ip](https://scriptkit.com/api/new?name=my-ip&url=https://gist.githubusercontent.com/johnlindquist/47637881382e39f2bf738354f57ac7d7/raw/e9d1ff50a9d5bc03ca4c1af880a6c50f7a6c1ce6/my-ip.js)\r\n\r\n```js\r\n// Menu: My IP\r\n// Description: Displays and copies IP to clipboard\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nlet network = await npm(\"network\")\r\nlet { promisify } = await npm(\"es6-promisify\")\r\n\r\nlet ip = await promisify(network.get_public_ip)()\r\n\r\ncopy(ip)\r\nawait arg(ip)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":""}]
