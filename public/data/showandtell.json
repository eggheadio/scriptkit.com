[{"name":"Change Wallpaper","createdAt":"2021-11-02T07:54:32Z","value":"https://github.com/johnlindquist/kit/discussions/501","description":"Created by davelosert","img":"https://avatars.githubusercontent.com/u/4287128?u=70e8d6e39f4addac43ee9849c8d9c150363e460e&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Here is a little script I wrote to easily change the background-wallpaper.\nI use this as I have to set a certain wallpaper before doing webinars or screencasts for my clients.\n// Menu: Change Wallpaper\n// Description: change your background wallpaper by selecting from a configured folder.\n// Author: David Losert\n// Twitter: @david_losert\n\nimport \"@johnlindquist/kit\"\n\n// Set to the folder where you keep all your wallpapers for easy selection\nconst wallpapersPath = await env('WALLPAPER_PATH');\n\nconst availableWallpapers = ls(wallpapersPath);\nconst selectedWallpaper = await arg('select', availableWallpapers);\nconst wallpaperFilePath = path.join(wallpapersPath, selectedWallpaper);\n\nawait applescript(`tell application \"Finder\" to set desktop picture to POSIX file \"${wallpaperFilePath}\"`);"},{"name":"üî• Automation Overload - Example of running macOS Monterey Shortcuts via Script Kit","createdAt":"2021-10-29T10:51:19Z","value":"https://github.com/johnlindquist/kit/discussions/496","description":"Created by JamesHenry","img":"https://avatars.githubusercontent.com/u/900523?u=ab7e35b384354f771ecd6d683d12dade83d221dd&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Install macos-monterey-shortcuts-example\n/** @type {import(\"@johnlindquist/kit\")} */\n\n// Menu: Say Hello World Shortcut\n// Description: Trigger macOS Monterey Shortcut from Script Kit\n// Author: James Henry\n// Twitter: @MrJamesHenry\n\n/**\n * I have created a Shortcut on my Mac running macOS Monterey called\n * \"Say Hello World\".\n *\n * There are a couple of options available when it comes to invoking\n * it programmatically (whether via Script Kit or in general).\n */\n\n/**\n * OPTION 1:\n *\n * You can use the `shortcuts` CLI that is preinstalled on macOS\n * Monterey to run named Shortcuts.\n */\nawait $`shortcuts run \"Say Hello World\"`;\n\n/**\n * OPTION 2:\n *\n * You can use AppleScript to communicate with the \"Shortcuts\"\n * application on macOS Monterey to run named Shortcuts.\n *\n * NOTE: I first tried to communicate with \"Shortcuts Events\" per this\n * video from WWDC 2021, but it does not work:\n * https://developer.apple.com/videos/play/wwdc2021/10232/?time=1539\n */\nawait applescript(`\n  tell application \"Shortcuts\"\n    run the shortcut named \"Say Hello World\"\n  end tell\n`);"},{"name":"Currency Converter using Google :)","createdAt":"2021-10-23T19:33:03Z","value":"https://github.com/johnlindquist/kit/discussions/494","description":"Created by hakubo","img":"https://avatars.githubusercontent.com/u/1018759?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Since most of currency converters are paid APIs - why not just use google for this task :)\n\n  \n    \n    \n\n    currency.mp4\n    \n  \n\n  \n\n  \n\n\nInstall currency-converter\n// Menu: Currency Converter using google\n// Author: Jakub Olek\n// Twitter: @JakubOlek\n\n/** @type {import(\"@johnlindquist/kit\")} */\n\nconst from = await arg(\"from\", [\"pln\", \"usd\", \"eur\"]);\nconst to = await arg(\"to\", [\"usd\", \"pln\", \"eur\"]);\nconst query = await arg(\"amount\");\nconst value = await scrapeSelector(\n  `https://google.com/search?q=${encodeURIComponent(\n    query + \" \" + from + \" \" + to\n  )}`,\n  \"span[data-value]\"\n);\n\ndiv(query + \" \" + from + \" = \" + value + \" \" + to, \"p-4\");"},{"name":"Quick Google Translate","createdAt":"2021-10-21T22:46:51Z","value":"https://github.com/johnlindquist/kit/discussions/491","description":"Created by brandonpittman","img":"https://avatars.githubusercontent.com/u/967145?u=a0c390fc6689da83a5fb10aa017ed9f58466673a&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"I whipped up a quick action to take some selected text and open Google translate with it. Swap out the source, sl, and target, tl, with your most commonly used languages.\nInstall script\n// Menu: JPN ‚Üí EN\n// Description: Translate selected text into with Google Translate.\n// Author: Brandon Pittman\n// Shortcut: ctrl j\n\nimport \"@johnlindquist/kit\";\n\nconst origin = \"https://translate.google.com\";\nconst text = await getSelectedText();\nconst sl = \"ja\";\nconst tl = \"en\";\nconst op = \"translate\";\n\nconst url = encodeURI(`${origin}/?sl=${sl}&tl=${tl}&text=${text}&op=${op}`);\n\nexec(`open \"${url}\"`, { encoding: \"utf8\" });"},{"name":"RCKIK mobile busses","createdAt":"2021-10-19T09:42:02Z","value":"https://github.com/johnlindquist/kit/discussions/490","description":"Created by hakubo","img":"https://avatars.githubusercontent.com/u/1018759?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"This is for Pozna≈Ñ, Poland only. Data taken from https://www.rckik.poznan.pl/najblizsze-wyjazdy\nIt'll show a list of next places where you can find a bus in which you can donate a blood in Pozna≈Ñ - filtered by given text so you can narrow list to locations closest to you.\nThis is WIP - I'll try to optimize it and maybe make the list easier to read.\n\nInstall rckik\n// Menu: RCKIK mobile\n// Description: Show filtered plan of mobile RCKIK busses\n// Author: Jakub Olek\n// Twitter: @JakubOlek\n\n/** @type {import(\"@johnlindquist/kit\")} */\n\nfunction transform(node) {\n  // Edit that to filter locations that you're interested in\n  // has to be inside transform function - as it's being serialized and passed to browser\n  const filter = \"Pozna≈Ñ\";\n  const columns = [...node.querySelectorAll(\"td\")];\n\n  if (columns[3].innerHTML.startsWith(filter)) {\n    return (\n      columns[0].querySelector(\"a\").innerHTML +\n      \" \" +\n      columns[3].innerHTML +\n      \" \" +\n      columns[2].innerHTML\n    );\n  }\n}\n\nconst pagination = await scrapeSelector(\n  \"https://www.rckik.poznan.pl/najblizsze-wyjazdy?page=1\",\n  \".pagination li\"\n);\n\nconst numberOfPages = pagination.length;\nlet t = [];\n\nfor (let i = 1; i <= numberOfPages; i += 1) {\n  const result = await scrapeSelector(\n    `https://www.rckik.poznan.pl/najblizsze-wyjazdy?page=${i}`,\n    \"#calendarTable tr:not(.header):not(.canceled)\",\n    transform\n  );\n\n  t = t.concat(result);\n}\n\ndiv(\n  `<ul>${t\n    .filter(Boolean)\n    .map((date) => `<li>${date}</li>`)\n    .join(\"\")}</ul>`,\n  \"p-4\"\n);"},{"name":"Weather by yr.no","createdAt":"2021-10-19T09:35:42Z","value":"https://github.com/johnlindquist/kit/discussions/489","description":"Created by hakubo","img":"https://avatars.githubusercontent.com/u/1018759?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Very simple weather forecast (as pdf ü§£  ) from yr.no bit manual to setup but should be simple an quick.\n\nInstall weather\n// Menu: Weather by yr.no\n// Author: Jakub Olek\n// Twitter: @JakubOlek\n\n/** @type {import(\"@johnlindquist/kit\")} */\n\n/**\n * 1. Open https://www.yr.no/\n * 2. Find your location\n * 3. Copy what comes AFTER https://www.yr.no/en/forecast/daily-table/ to location const\n */\n\nconst location = \"5-1233000/Poland/Poznan\";\n\ndiv(\n  `<iframe src=\"https://www.yr.no/en/print/forecast/${location}#toolbar=0\" height=800 width=600/>`,\n  \"p-2\"\n);"},{"name":"Script Kit online on Stackblitz ‚ö°Ô∏è","createdAt":"2021-10-18T20:06:28Z","value":"https://github.com/johnlindquist/kit/discussions/488","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"I spent last week getting Script Kit running \"in browser\" to emulate the terminal experience over on Stackblitz. Here's a quick demo:\nhttps://stackblitz.com/edit/node-rnrhra?file=scripts%2Frepos-to-markdown.js\nThe plan is to use this to host interactive demos for the guide/docs. I'd appreciate if you could play around with it a bit and see if I missed anything."},{"name":"Search ASOS","createdAt":"2021-10-12T12:22:49Z","value":"https://github.com/johnlindquist/kit/discussions/485","description":"Created by vaskort","img":"https://avatars.githubusercontent.com/u/4882345?u=b84755144b8f4f75f19a42c33667dcc66819f7de&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"It will search at ASOS.com\nInstall search-asos\n// Shortcode: asos\n// Menu: search-asos\n// Description: Search ASOS\n// Author: Vasilis Kortsimelidis\n// Twitter: @vas_kort\n\nlet searchTerm = await arg(\"ASOS term to search for:\")\nlet termWithEncodedSpaces = searchTerm.replace(/ /g, \"%20\");\n\nexec(`open https://www.asos.com/search/?q=${termWithEncodedSpaces}`)"},{"name":"Record screen","createdAt":"2021-10-11T18:54:36Z","value":"https://github.com/johnlindquist/kit/discussions/483","description":"Created by hakubo","img":"https://avatars.githubusercontent.com/u/1018759?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"This script just opens Quick Time Player and turns on recording of part of your screen.\nIt has a dependency on another script by @johnlindquist app-launcher: https://www.scriptkit.com/johnlindquist/app-launcher\nInstall record-screen\n// Menu: Record Screen\n// Description: Start QuickTime player and open screen recorder\n// Author: Jakub Olek\n// Twitter: @JakubOlek\n\nawait run(\"app-launcher\", \"QuickTime Player\");\nawait keystroke(\"command control n\");"},{"name":"Ping","createdAt":"2021-10-11T18:50:33Z","value":"https://github.com/johnlindquist/kit/discussions/482","description":"Created by hakubo","img":"https://avatars.githubusercontent.com/u/1018759?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Run ping to a destination and draw a chart of latest entries.\n\n  \n    \n    \n\n    ping.mp4\n    \n  \n\n  \n\n  \n\n\nInstall ping\n// Menu: Ping\n// Description: Ping destination and show line graph of latest values\n// Author: Jakub Olek\n// Twitter: @JakubOlek\n\nconst jsdom = await npm(\"jsdom\");\nawait npm(\"canvas\");\nconst Chart = await npm(\"chart.js\");\n\nconst { JSDOM } = jsdom;\n\n// Edit the list to suit your needs\nconst destination = await arg(\"ping\", [\"8.8.8.8\", \"google.com\"]);\n\n// How many entries should the chart show\nconst entries = 20;\n\nconst command = `ping ${destination}`;\nconst child = exec(command, { async: true });\n\nconst dom = new JSDOM(\n  `<!DOCTYPE html><canvas id=\"bar-chart\" width=\"800\" height=\"450\"></canvas>`\n);\n\nglobal.window = dom.window;\n\nChart.defaults.color = \"white\";\nChart.defaults.font = { size: 24, weight: \"bold\" };\n\nconst labels = new Array(entries)\n  .fill()\n  .map((_, i) => i)\n  .reverse();\n\nlet output = [];\nconst chartData = {\n  labels: labels,\n  datasets: [\n    {\n      label: `${command}: - ms`,\n      backgroundColor: \"rgb(255, 99, 132)\",\n      borderColor: \"rgb(255, 99, 132)\",\n      data: output,\n    },\n  ],\n};\n\nconst chart = new Chart(dom.window.document.getElementById(\"bar-chart\"), {\n  type: \"line\",\n  data: chartData,\n  options: {\n    animation: false,\n    tooltips: { enabled: false },\n    hover: { mode: null },\n  },\n});\n\nlet firstLine = true;\n\nchild.stdout.on(\"data\", function (data) {\n  if (!firstLine) {\n    const value = +data.replace(/.*time=(.*)ms/, \"$1\");\n    output.push(value);\n\n    if (output.length > entries) {\n      output = output.slice(1);\n    }\n\n    chartData.datasets[0].label = `${command}: ${value}ms`;\n    chartData.datasets[0].data = output;\n    chart.update();\n\n    div(`<img src=\"${chart.toBase64Image(\"image/jpeg\", 1)}\"/>`, \"p-4\");\n  } else {\n    firstLine = false;\n  }\n});"},{"name":"Open Jira ticket","createdAt":"2021-10-09T18:53:10Z","value":"https://github.com/johnlindquist/kit/discussions/481","description":"Created by hakubo","img":"https://avatars.githubusercontent.com/u/1018759?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"The script parses selections to find valid JIRA ticket and when found - opens it in browser\nInstall open-jira-ticket\n// Menu: Open Jira ticket in browser\n// Description: Parses a valid ticket number from selection and opens it in browser\n// Author: Jakub Olek\n// Twitter: @JakubOlek\n\nconst jiraDomain = await env(\"JIRA_DOMAIN\");\nconst text = await getSelectedText();\nconst jiraTicket = text.match(/([A-Z]{2,5}-[0-9]+)/);\n\nif (jiraTicket) {\n  focusTab(`${jiraDomain}/browse/${jiraTicket[0]}`);\n}"},{"name":"Mouse Mover (Python Script + ScriptKit)","createdAt":"2021-10-04T15:26:08Z","value":"https://github.com/johnlindquist/kit/discussions/467","description":"Created by benjaminmodayil","img":"https://avatars.githubusercontent.com/u/12306850?u=51152dab74c9158efeb6a84a65acf2464cf84218&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"üòÖ This one is more of a Python script, but I use ScriptKit to launch it. There are moments where I have to leave my computer to address something in another room or need more time than the allotted 10 minutes that Slack provides before it makes it look like I'm unavailable. For the most part, even if I'm in another room, I am still available for conversation/inquiries, so I don't want my coworkers to think I can't be bothered if my status looks like I'm away, but in reality I just might be eating/cooking. So this keeps my computer + work messaging app status in the green so it doesn't look like I'm unavailable.\nThe Python script requires pyautogui and time modules. I'm not the best for Python troubleshooting as I just learned some Python through YouTube tutorials. All I remember from when I wrote this was that it was a pain to get my computer using the latest version of Python.\nFrom the Python script below, pyautogui lets you exit the script from taking control of your mouse by running ctrl + c or moving your mouse to the top right corner of your screen. Because you can't run ctrl + c into a non-existent terminal when using it through ScriptKit, you need to move your mouse to the top right corner of your monitor to exit.\nNote: Before connecting/disconnecting external displays while the script is active, you must exit the script first, otherwise you'll have to reconnect/disconnect your displays to the condition of your computer when you started the script to exit.\nYou'll have to squint to see the mouse once the script starts + I only run it for three seconds before closing... Sorry about that.\n\n  \n    \n    \n\n    4.October.2021.-.Loom.Recording.mp4\n    \n  \n\n  \n\n  \n\n\n#! /usr/bin/env python3\nimport pyautogui\nimport time\n\nwhile True:\n    pyautogui.moveRel(0, 50, duration=1.5)\n    time.sleep(1)\n    pyautogui.moveRel(0, -50, duration=1.5)\n    time.sleep(1)\n    pyautogui.moveRel(50, 0, duration=1.5)\n    time.sleep(1)\n    pyautogui.moveRel(-50, 0, duration=1.5)\n    time.sleep(1)\n\n# You can remove a bunch of the repetition above. I just like seeing the mouse move a lot to know it's working.\nHere's the ScriptKit launcher. This will vary depending on your Python path + Python script path.\n// Menu: Mouse Mover\n// Description: Moves your mouse so you don't go inactive in Slack or Microsoft Teams\n// Author: Benjamin Modayil\n// Twitter: @24props\n\nawait exec(`/PATH-TO-PYTHON-EXECUTABLE/python3.9 /PATH-TO-SCRIPT/i-am-here.py`)"},{"name":"Image Info from Finder","createdAt":"2021-09-30T18:29:41Z","value":"https://github.com/johnlindquist/kit/discussions/466","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Install image-info\n// Author: John Lindquist\n// Twitter: @johnlindquist\n// Description: Displays Image Info of Selected File\n\nimport \"@johnlindquist/kit\"\n\nlet sharp = await npm(\"sharp\")\n\nlet metadata = await sharp(\n  await getSelectedFile()\n).metadata()\n\nawait div(\n  md(`\n~~~json\n${JSON.stringify(metadata, null, \"\\t\")}\n~~~\n`)\n)"},{"name":"TypeScript support! üöÄ","createdAt":"2021-09-27T17:25:03Z","value":"https://github.com/johnlindquist/kit/discussions/457","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"beta.62 brings with it a long-awaited, much-requested feature: TypeScript support!\n\nTypeScript Support üöÄ\n1. But, how?\nEach time your run a TS script, Script Kit will compile the TS script using esbuild to a JS script in a .scripts dir (notice the \"dot\"). The compiled JS script is then imported from there. Using .scripts as a sibling dir will help avoid any import/path issues. You can also write TS \"library\" files in your ~/.kenv/lib dir and import them into your script just fine.\nIf you're experienced with esbuild and curious about the settings, they look like this:\nlet { build } = await import(\"esbuild\")\n\nawait build({\n  entryPoints: [scriptPath],\n  outfile,\n  bundle: true,\n  platform: \"node\",\n  format: \"esm\",\n  external: [\"@johnlindquist/kit\"],\n})\nThis also opens the door to exporting/building/bundling scripts and libs as individual shippable tools which I'll investigate more in the future.\n2. Can I still run my JS scripts if I switch to TS?\nYes! Both your TS and JS scripts will show up in the UI.\n3. Why the import \"@johnlindquist/kit\"?\nWhen you create a new TS script, the generated script will start with the line: import \"@johnlindquist/kit\"\nThis is mostly to make your editor stop complaining by forcing it to load the type definition files and forcing it to treat the file as an \"es module\" so support \"top-level await\". It's not technically required since it's not technically importing anything, but your editor will certainly complain very loudly if you leave it out.\n4. Where is the setting stored?\nLook in your ~/.kenv/.env for KIT_MODE=ts.\nfs-extra's added to global\nThe fs-extra methods are now added on the global space. I found myself using outputFile, write/readJson, etc too often and found them to be a great addition. The only one missing is copy since we're already using that to \"copy to clipboard\". You can bring it in with the normal import/alias process if needed, e.g., let {copy:fsCopy} = await import(\"fs-extra\")\nSync Path\n\nYou may notice running scripts from the Script Kit app that some commands you can run in your terminal might be missing, like \"yarn\", etc.\nRun the following command in your terminal to copy the $PATH var from your terminal to your ~/.kenv/.env. This will help \"sync\" up which commands are available between your terminal and running scripts from the app.\n~/.kit/bin/kit sync-path"},{"name":"Switch osx theme","createdAt":"2021-09-26T09:22:58Z","value":"https://github.com/johnlindquist/kit/discussions/456","description":"Created by OskarsEzerins","img":"https://avatars.githubusercontent.com/u/18247063?u=b194d1f49eacbd10e90eeddfc7941822205e75d4&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Kit has to be given permission for System events in Settings -> Security & Privacy -> Privacy -> Automation\n// Menu: Switch osx theme\n// Shortcut: option command t\n// Author: Oskars Ezerins\n\nconst toggleTheme = async () => {\n  let script = `\n  tell application \"System Events\"\n    tell appearance preferences\n      set dark mode to not dark mode\n    end tell\n  end tell\n  `.trim()\n  return await global.applescript(script)\n}\n\ntoggleTheme()"},{"name":"React Sandbox","createdAt":"2021-09-22T02:35:23Z","value":"https://github.com/johnlindquist/kit/discussions/444","description":"Created by stevebarakat","img":"https://avatars.githubusercontent.com/u/3830326?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Install react-sandbox\n// Menu: React Sandbox\n// Description: Barebones React Starter\n// Author: S.Barakat\n\n//Log: false\n\n// Prevent Scriptkit from closing until script finishes\nsetIgnoreBlur(true);\n\n// Find and replace\nlet replaceInFile = async (filePath, regex, string) => {\n  let content = await readFile(filePath, \"utf-8\")\n  let updatedContent = content.replace(\n    new RegExp(regex),\n    string\n  )\n  await writeFile(filePath, updatedContent)\n}\n\n// $`` is using the \"zx\" tool which wraps around \"exec\"\n// \"sed\" is a very powerful search/replace tool. We can use it for removing lines:\nlet removeLine = async (searchArgs, file) => {\n  for (let n = 0; n < searchArgs.length; n++) {\n    await $`sed -i .bak /${searchArgs[n]}/d ${file}`;\n  }\n}\n\n/**************\n  START SCRIPT\n **************/\n\nlet reset = false;\n// Prompt to reset settings\nlet resetSettings = await arg(\"Reset settings?\", [\"no\", \"yes\"]);\nif (resetSettings === \"yes\") {\n  reset = true;\n}\n\n// Prompt for the project name\nlet projectName = await arg(\"Project name\");\n// Remove any spaces or uppercase letters from project name.\nprojectName = await projectName.toLowerCase().replace(/\\s/g, '');\n\n// Prompt for the project directory\nlet projectDir = await env(\"PROJECT_DIR\", {\n  placeholder: \"Project directory ~/yourDir\",\n  reset: reset\n});\n\n// Prompt for the package manager\n// let packageManager = await arg(\"Choose package manager:\", [\"npm\", \"yarn\"]);\nlet packageManager = await env(\"PACKAGE_MANAGER\", {\n  placeholder: \"Select a package manager:\",\n  choices: [\"npm\", \"yarn\"],\n  reset: reset\n});\n\nif (!which(await packageManager)) {\n  await terminal(`~/.kit/bin/kit sync-path`);\n  await div(md(\"Your PATH had to be set. Please re-run command.\"));\n  await exit();\n}\n\n// \"home\" is a helper to create paths in your home dir\ncd(home());\nmkdir(projectDir);\ncd(projectDir);\n\n// Create new app with CRA\nawait $`npx create-react-app ${projectName.toLowerCase()}`;\n\ncd(path.resolve(projectName, \"src\"));\n\n// Note: \"rm\" is actually mapped to \"trash\" so files get moved to your trash bin instead of permenantly deleted\nrm([\n  `App.test.js`,\n  `index.css`,\n  `setUpTests.js`,\n  `reportWebVitals.js`,\n  `logo.svg`,\n]);\n\n// remove web-vitals and testing-library\nawait $`${packageManager} remove web-vitals @testing-library/jest-dom @testing-library/react @testing-library/user-event`\n\nlet filePath = path.resolve();\n\nawait removeLine([\"logo\"], \"App.js\");\nawait removeLine([\"WebVitals\", \"vitals\", \"performance\"], \"index.js\");\n\n// Download to current dir\nawait download(\"https://meyerweb.com/eric/tools/css/reset/reset.css\", \".\");\n\nawait replaceInFile(\n  filePath + \"/App.js\",\n  `<header className=\"App-header\">\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>`,\n  `App`\n)\n\nawait replaceInFile(\n  filePath + \"/index.js\",\n  `import './index.css'`,\n  `import './reset.css'`\n);\n\nawait replaceInFile(\n  filePath + \"/App.css\",\n  /^(?=[\\S\\s]{10,8000})[\\S\\s]*$/im,\n  `\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }`\n);\n\nrm([\n  `index.js.bak`,\n  `App.js.bak`\n]);\n\nsetIgnoreBlur(false);\nedit(`${filePath}/../`);"},{"name":"Scripts in GitHub actions (preview)","createdAt":"2021-09-21T19:34:15Z","value":"https://github.com/johnlindquist/kit/discussions/442","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"tl;dr Here's an example repo\nThe example script creates a release, downloads an image, and uploads it to the release.\nhttps://github.com/johnlindquist/kit-action-example\nTemplate Repo\nThis page has a \"one-click\" clone so you can add/play with your own script.\nhttps://github.com/johnlindquist/kit-action-template\nWhat is it?\nUse any of your scripts in a GitHub action. use the kit-action and point it to a scripts in your scripts dir:\nname: \"example\"\non:\n  workflow_dispatch:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  example:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Script Kit\n        uses: johnlindquist/kit-action@main\n        with:\n          script: \"example-script\" # The name of a script in your ./scripts dir\nAdd env vars:\nYou most likely add \"secrets\" to GitHub actions, so you'll want to pass them to your scripts as environment variables:\njobs:\n  example:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Script Kit\n        uses: johnlindquist/kit-action@main\n        with:\n          script: \"example-script\"\n        env:\n          REPO_TOKEN: \"${{ secrets.REPO_TOKEN }}\" # load in your script with await env(\"REPO_TOKEN\")\nWorks with your existing repos\nFeel free to add this action and a scripts dir to your existing repos. It automatically loads in your repo so you can parse package.json, compress assets, or whatever it is you're looking to add to your CI.\nWhat does \"preview\" mean?\nEverything is working, but it's pointing to the \"main\" branch rather than a tagged version. Once I get some feedback, I'll tag a \"1.0\" version so you can uses: @johlindquist/kit-action@v1\nPlease ask for help! üòá\nI'd ‚ù§Ô∏è to help you script something for a github action! Please let me know whatever I can do to help."},{"name":"(Gitlab) Open next MR that awaits approval","createdAt":"2021-09-18T20:02:58Z","value":"https://github.com/johnlindquist/kit/discussions/440","description":"Created by hakubo","img":"https://avatars.githubusercontent.com/u/1018759?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Install nextMR\n// Menu: GitLab - next MR\n// Description: Open next MR that I have not approved\n// Author: Jakub Olek\n// Twitter: @JakubOlek\n// Shortcut: ctrl opt \\\n\nconst { request, gql, GraphQLClient } = await npm(\"graphql-request\");\nconst dayjs = await npm(\"dayjs\");\nimport relativeTime from \"dayjs/plugin/relativeTime.js\";\ndayjs.extend(relativeTime);\n\nconst domain = await env(\"GITLAB_DOMAIN\");\nconst token = await env(\"GITLAB_TOKEN\");\nconst username = await env(\"GITLAB_USERNAME\");\nconst jiraDomain = await env(\"JIRA_DOMAIN\");\nconst requiredApprovals = Number(await env(\"GITLAB_REQUIRED_APPROVALS\"));\nconst debug = false;\n\nfunction log(...args) {\n  if (debug) {\n    console.log(...args);\n  }\n}\n\nconst graphQLClient = new GraphQLClient(domain + \"/api/graphql\", {\n  headers: {\n    \"PRIVATE-TOKEN\": token,\n  },\n});\n\nconst projects = gql`\n  query($name: String!) {\n    projects(search: $name, membership: true) {\n      nodes {\n        nameWithNamespace\n        fullPath\n      }\n    }\n  }\n`;\n\nif (!env.GITLAB_PROJECT_PATH) {\n  const fullPath = await arg(\"Search project\", async (input) => {\n    return (\n      await graphQLClient.request(projects, { name: input })\n    ).projects.nodes.map((project) => ({\n      name: project.nameWithNamespace,\n      description: project.fullPath,\n      value: project.fullPath,\n    }));\n  });\n\n  await cli(\"set-env-var\", \"GITLAB_PROJECT_PATH\", fullPath);\n}\n\nconst queryMrs = gql`\n  query($projectPath: ID!) {\n    project(fullPath: $projectPath) {\n      mergeRequests(state: opened, sort: UPDATED_DESC) {\n        nodes {\n          title\n          webUrl\n          iid\n          draft\n          description\n          createdAt\n          approvedBy {\n            nodes {\n              name\n              username\n            }\n          }\n          author {\n            name\n            username\n            avatarUrl\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst query = gql`\n  query($iid: String!, $projectPath: ID!) {\n    project(fullPath: $projectPath) {\n      mergeRequest(iid: $iid) {\n        commitsWithoutMergeCommits(first: 1) {\n          nodes {\n            authoredDate\n          }\n        }\n        headPipeline {\n          status\n        }\n        notes {\n          nodes {\n            updatedAt\n            author {\n              username\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nlet nextMR;\nconst myMrs = [];\nconst drafts = [];\nconst awaitingReview = [];\nconst alreadyCommented = [];\nconst haveAuthorCommented = [];\nconst haveOthersCommented = [];\nconst haveFailingPipeline = [];\nconst alreadyApprovedByMe = [];\nconst alreadyApprovedByOthers = [];\n\nconst {\n  project: {\n    mergeRequests: { nodes: mergeRequests },\n  },\n} = await graphQLClient.request(queryMrs, {\n  projectPath: env.GITLAB_PROJECT_PATH,\n});\n\narg(\"Processing...\");\nlog(\"Show list\", flag.showList);\nlog(\"Checking\", mergeRequests.length, \"MRs\");\n\nfor (let mr of mergeRequests) {\n  log(\"Checking MR\", mr.title, `(${mr.author.username})`);\n  const approvedBy = mr.approvedBy.nodes.map((node) => node.username);\n\n  if (mr.author.username === username) {\n    log(\"^ This is my MR\");\n    myMrs.push(mr);\n    continue;\n  }\n\n  if (mr.draft) {\n    drafts.push(mr);\n    log(\"^ This is a draft\");\n    continue;\n  }\n\n  if (approvedBy.includes(username)) {\n    log(\"^ Approved by me\");\n    alreadyApprovedByMe.push(mr);\n    continue;\n  } else {\n    if (approvedBy.length >= requiredApprovals) {\n      log(\"^ Approved by others\");\n      alreadyApprovedByOthers.push(mr);\n      continue;\n    }\n\n    const {\n      project: { mergeRequest },\n    } = await graphQLClient.request(query, {\n      iid: mr.iid,\n      projectPath: env.GITLAB_PROJECT_PATH,\n    });\n\n    const pipelineStatus = mergeRequest.headPipeline.status;\n\n    if (pipelineStatus !== \"SUCCESS\") {\n      log(\"^ Failed pipeline\");\n      haveFailingPipeline.push(mr);\n      continue;\n    }\n\n    const comments = mergeRequest.notes.nodes;\n\n    const anyLatestComment = comments[0];\n    const myLatestComment = comments.find(\n      (comment) => comment.author.username === username\n    );\n    const authorLatestComment = comments.find(\n      (comment) => comment.author.username === mr.author.username\n    );\n\n    if (myLatestComment) {\n      const latestCommitTime = dayjs(\n        mergeRequest.commitsWithoutMergeCommits.nodes[0].authoredDate\n      );\n      const myLatestCommentTime = dayjs(myLatestComment.updatedAt);\n\n      if (latestCommitTime.isBefore(myLatestCommentTime)) {\n        log(\"^ awaits new commits after my comments\");\n        alreadyCommented.push(mr);\n        continue;\n      }\n\n      if (authorLatestComment) {\n        const authorLatestCommentTime = dayjs(authorLatestComment.updatedAt);\n\n        if (authorLatestCommentTime.isAfter(myLatestComment.updatedAt)) {\n          log(\"^ have some comments by the MR author after my comment\");\n          haveAuthorCommented.push(mr);\n          continue;\n        }\n      }\n\n      if (anyLatestComment) {\n        const latestCommentTime = dayjs(anyLatestComment.updatedAt);\n\n        if (latestCommentTime.isAfter(myLatestComment.updatedAt)) {\n          log(\"^ have some comments by other after my comment\");\n          haveOthersCommented.push(mr);\n          continue;\n        }\n      }\n    }\n\n    if (!flag.showList) {\n      nextMR = mr;\n      break;\n    } else {\n      awaitingReview.push(mr);\n    }\n  }\n}\n\nfunction createJiraLinks(text) {\n  return text.replace(\n    /[A-Z]{1,5}-[0-9]*/g,\n    (ticketNumber) => `[${ticketNumber}](${jiraDomain}}/browse/${ticketNumber})`\n  );\n}\n\nfunction getName(mr) {\n  if (mr.author.username === username) {\n    return `${!mr.draft && mr.approvedBy.nodes.length < 2 ? \"!A \" : \"\"}${\n      mr.title\n    }`;\n  }\n\n  return mr.title;\n}\n\nfunction getChoices(mrs, description) {\n  return mrs.map((mr) => ({\n    name: getName(mr),\n    value: mr.webUrl,\n    description: description,\n    img: mr.author.avatarUrl.includes(\"http\")\n      ? mr.author.avatarUrl\n      : domain + mr.author.avatarUrl,\n    preview: md(\n      `# ${createJiraLinks(mr.title)}\n## Created ${dayjs(mr.createdAt).fromNow()} by ${mr.author.name}\n\n## ${description}\n\n## Approved by\n${\n  mr.approvedBy.nodes.length\n    ? mr.approvedBy.nodes\n        .map(\n          (user) => `* ${user.name}\n`\n        )\n        .join(\"\")\n    : \"- nobody\"\n}\n\n${createJiraLinks(\n  mr.description.replace(\n    /\\/uploads\\//g,\n    domain + \"/uploads/\" + env.GITLAB_PROJECT_PATH + \"/\"\n  )\n)}`\n    ),\n  }));\n}\n\nif (nextMR) {\n  await focusTab(nextMR.webUrl);\n} else {\n  const choices = [\n    ...getChoices(awaitingReview, \"Awaiting Review\"),\n    ...getChoices(haveAuthorCommented, \"Author have comments after you\"),\n    ...getChoices(haveOthersCommented, \"Someone have comments after you\"),\n    ...getChoices(myMrs, \"My merge request\"),\n    ...getChoices(haveFailingPipeline, \"Failing Pipeline\"),\n    ...getChoices(alreadyCommented, \"You have commented on this\"),\n    ...getChoices(alreadyApprovedByOthers, \"Already approved by others\"),\n    ...getChoices(alreadyApprovedByMe, \"Already approved by you\"),\n    ...getChoices(drafts, \"Draft\"),\n  ];\n\n  if (choices.length) {\n    const mr = await arg(\"Open MR:\", choices);\n\n    if (mr) {\n      focusTab(mr);\n    }\n  }\n}\n\nThis one I use every day at work. It checks a project for any MR that have no approvals and open it for me automatically.\nIn case there is no MR that I should review - it opens arg with a list of all MRs that I might be interested in in this order:\n\nAll MRs that I approved but author have comments after me\nAll MRs that I approved but someone have comments after me\nAll my MRs\nAll MRs that have a pipeline failing\nAll MRs that I have already commented\nAll MRs that is already approved by others\nAll MR s that is already approved by me\nAll Draft Mrs.\n\nFirst time you run it i'll ask you to configure it with gitlab domain, token and your username, jira domain and number of approvals required for each MR."},{"name":"Conventional comments","createdAt":"2021-09-18T19:47:08Z","value":"https://github.com/johnlindquist/kit/discussions/439","description":"Created by hakubo","img":"https://avatars.githubusercontent.com/u/1018759?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Install comment\n// Menu: Conventional comment\n// Description: Comments that are easy to grok and grep\n// Author: Jakub Olek\n// Twitter: @JakubOlek\n// Shortcut: opt 0\n// Based on: https://hemdan.hashnode.dev/conventional-comments\n\nconst type = await arg(\"Label\", [\n  {\n    name: \"üëè praise\",\n    value: \"**üëè praise**: \",\n    description:\n      \"Praises highlight something positive. Try to leave at least one of these comments per review (if it exists :^)\",\n  },\n  {\n    name: \"ü§ì nitpick\",\n    value: \"**ü§ì nitpick**: \",\n    description:\n      \"Nitpicks are small, trivial, but necessary changes. Distinguishing nitpick comments significantly helps direct the reader's attention to comments requiring more involvement.\",\n  },\n  {\n    name: \"üéØ suggestion\",\n    value: \"**üéØ suggestion**: \",\n    description:\n      \"Suggestions are specific requests to improve the subject under review. It is assumed that we all want to do what's best, so these comments are never dismissed as ‚Äúmere suggestions‚Äù, but are taken seriously.\",\n  },\n  {\n    name: \"üî® issue\",\n    value: \"**üî® issue**: \",\n    description:\n      \"Issues represent user-facing problems. If possible, it's great to follow this kind of comment with a suggestion.\",\n  },\n  {\n    name: \"‚ùî question\",\n    value: \"**‚ùî question**: \",\n    description:\n      \"Questions are appropriate if you have a potential concern but are not quite sure if it's relevant or not. Asking the author for clarification or investigation can lead to a quick resolution.\",\n  },\n  {\n    name: \"üí≠ thought\",\n    value: \"**üí≠ thought**: \",\n    description:\n      \"Thoughts represent an idea that popped up from reviewing. These comments are non-blocking by nature, but they are extremely valuable and can lead to more focused initiatives and mentoring opportunities.\",\n  },\n  {\n    name: \"üí£ chore\",\n    value: \"**üí£ chore**: \",\n    description:\n      \"Chores are simple tasks that must be done before the subject can be ‚Äúofficially‚Äù accepted. Usually, these comments reference some common processes. Try to leave a link to the process described so that the reader knows how to resolve the chore.\",\n  },\n]);\n\nsetSelectedText(type);\nSimple list of conventional comments ready to be used.\nhttps://conventionalcomments.org/"},{"name":"Computer Info","createdAt":"2021-09-13T20:28:09Z","value":"https://github.com/johnlindquist/kit/discussions/433","description":"Created by stevebarakat","img":"https://avatars.githubusercontent.com/u/3830326?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Install computer-info\n// Menu: Computer Info\n// Description: Gets Computer info\n// Author: S.Barakat\n\nimport os from \"os\";\n\nconst homeDirectory = os.homedir();\n\nconst osPlatform = os.platform();\n\nconst cpu = os.cpus();\nconst coreCount = cpu.length;\nconst cpuModel = cpu[0].model;\nconst cpuSpeed = cpu[0].speed;\n\nlet info = `\n* OS: ${osPlatform}\n* Home: ${homeDirectory}\n* CPU: ${cpuModel}\n* Speed: ${cpuSpeed} MHz\n* Cores: ${coreCount}\n`\n\n\nawait say(\n  `\n  Your home directory is: ${homeDirectory}. \n  The OS platform is: ${osPlatform}. \n  The processor speed is ${cpuSpeed} megahertz.\n  Your ${cpuModel} has ${coreCount} cores.\n  `\n);\n\nawait div(md(info), `p-4`)"},{"name":"Create new Blog Post","createdAt":"2021-09-03T13:25:47Z","value":"https://github.com/johnlindquist/kit/discussions/420","description":"Created by kentcdodds","img":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"I'm even using metascraper to scrape unsplash for an image, it's alt text, and author (unsplash does not make any of these things easy, yes I realize they have an API, but their terms say you have to hotlink to them if you use it and I don't want to).\nI'm using cloudinary auto-uploads so I don't have to bother uploading the photo manually either :)\nInstall new-post\n// Menu: New Post\n// Description: Create a new blog post\n// Author: Kent C. Dodds\n// Shortcut: command option control p\n// Twitter: @kentcdodds\n\nconst dateFns = await npm('date-fns')\nconst prettier = await npm('prettier')\nconst YAML = await npm('yaml')\nconst slugify = await npm('@sindresorhus/slugify')\nconst {format: formatDate} = await npm('date-fns')\nconst makeMetascraper = await npm('metascraper')\nconst {$filter, toRule} = await npm('@metascraper/helpers')\n\nconst unsplashTitleToAlt = toRule(str => str.replace(/ photo ‚Äì .*$/, ''))\nconst unsplashOGTitleToAuthor = toRule(str =>\n  str.replace(/Photo by (.*?) on Unsplash/, '$1'),\n)\nconst unsplashImageToPhotoId = toRule(str =>\n  new URL(str).pathname.replace('/', ''),\n)\n\nconst metascraper = makeMetascraper([\n  {\n    unsplashPhotoId: [\n      unsplashImageToPhotoId($ =>\n        $('meta[property=\"og:image\"]').attr('content'),\n      ),\n    ],\n  },\n  {\n    author: [\n      unsplashOGTitleToAuthor($ =>\n        $('meta[property=\"og:title\"]').attr('content'),\n      ),\n    ],\n  },\n  {alt: [unsplashTitleToAlt($ => $('title').text())]},\n])\n\nasync function getMetadata(url) {\n  const html = await fetch(url).then(res => res.text())\n  return metascraper({html, url})\n}\n\nconst blogDir = await env(\n  'KCD_BLOG_CONTENT_DIR',\n  `What's the path to the blog content directory on this machine?`,\n)\n\nconst title = await arg({\n  placeholder: `What's the title of this post?`,\n  hint: 'Title',\n  ignoreBlur: true,\n})\n\nconst description = await arg({\n  placeholder: `What's the description of this post?`,\n  hint: 'Description',\n  input: 'TODO: add a description',\n  ignoreBlur: true,\n})\n\nconst categories = (\n  await arg({\n    placeholder: `What are the categories of this post?`,\n    hint: 'Categories (comma separated)',\n    ignoreBlur: true,\n  })\n)\n  .split(',')\n  .map(c => c.trim())\n\nconst keywords = (\n  await arg({\n    placeholder: `What are the keywords of this post?`,\n    hint: 'Keywords (comma separated)',\n    ignoreBlur: true,\n  })\n)\n  .split(',')\n  .map(c => c.trim())\n\nconst unsplashPhotoInput = await arg({\n  placeholder: `What's the unsplash photo?`,\n  hint: 'Unsplash Photo',\n  ignoreBlur: true,\n})\nconst unsplashPhotoUrl = unsplashPhotoInput.startsWith('http')\n  ? unsplashPhotoInput\n  : `https://unsplash.com/photos/${unsplashPhotoInput}`\n\nconst metadata = await getMetadata(unsplashPhotoUrl)\n\nconst frontmatter = YAML.stringify({\n  title,\n  date: dateFns.format(new Date(), 'yyyy-MM-dd'),\n  description,\n  categories,\n  meta: {keywords},\n  bannerCloudinaryId: `unsplash/${metadata.unsplashPhotoId}`,\n  bannerAlt: metadata.alt,\n  bannerCredit: `Photo by [${metadata.author}](${unsplashPhotoUrl})`,\n})\n\nconst md = `---\n${frontmatter}\n---\n\nBe excellent to each other.\n`\n\n// prettify the markdown\nconst prettyMd = await prettier.format(md, {\n  parser: 'markdown',\n  arrowParens: 'avoid',\n  bracketSpacing: false,\n  embeddedLanguageFormatting: 'auto',\n  htmlWhitespaceSensitivity: 'css',\n  insertPragma: false,\n  jsxBracketSameLine: false,\n  jsxSingleQuote: false,\n  printWidth: 80,\n  proseWrap: 'always',\n  quoteProps: 'as-needed',\n  requirePragma: false,\n  semi: false,\n  singleQuote: true,\n  tabWidth: 2,\n  trailingComma: 'all',\n  useTabs: false,\n  vueIndentScriptAndStyle: false,\n})\n\nconst filename = slugify(title, {decamelize: false})\nconst newFile = path.join(blogDir, `${filename}.mdx`)\nawait writeFile(newFile, prettyMd)\nawait edit(newFile)"},{"name":"Github Actions","createdAt":"2021-08-25T07:43:09Z","value":"https://github.com/johnlindquist/kit/discussions/409","description":"Created by hariombalhara","img":"https://avatars.githubusercontent.com/u/1780212?u=d13d5e4e13fac82156fe85a78a2079c560a349b8&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Github Actions Script\nI have my blog using Notion API and whenever I want to publish a post to my blog, I trigger a GitHub Workflow that does the job.\nEarlier, I used to do it using a bookmark for the workflow and 1-2 additional clicks in Github UI."},{"name":"beta.55 Improved Search, Drag, and Happiness üòä","createdAt":"2021-08-20T21:58:48Z","value":"https://github.com/johnlindquist/kit/discussions/405","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"Search Improvements\nbeta.55 has a vastly improved search:\nSearch descriptions üéâ\n\nSearch shortcuts\n\nSearch by kenv\n\nSear by \"command-name\" (if you can't think of // Menu: name)\n\nSorts by \"score\" (rather than alphabetically)\nDrag\nChoices can now take a drag property. This will make list items \"draggable\" and allow you to drag/drop to copy files from your machine (or even from URLs!) into any app. When using remote URLs, their will be a bit of \"delay\" while the file downloads (depending on the file size) between \"drag start\" and \"drop enabled\", so just be aware. I'll add some sort of download progress indicator sometime in the future, just not high priority üòÖ\n// Menu: Drag demo\n\nawait arg(\n  {\n    placeholder: \"Drag something from below\",\n    ignoreBlur: true,\n  },\n  [\n    {\n      name: \"Heart Eyes (local)\",\n      drag: \"/Users/johnlindquist/Downloads/john-hearts@2x.png\",\n      img: \"/Users/johnlindquist/Downloads/john-hearts@2x.png\",\n    },\n    {\n      name: \"React logo svg (wikipedia)\",\n      drag: \"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\",\n      img: \"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\",\n    },\n  ]\n)\n\nYou can use the drag object syntax to define a format and data\n\ntext/html: Renders the HTML payload in contentEditable elements and rich text (WYSIWYG) editors like Google Docs, Microsoft Word, and others.\ntext/plain: Sets the value of input elements, content of code editors, and the fallback from text/html.\ntext/uri-list: Navigates to the URL when dropping on the URL bar or browser page. A URL shortcut will be created when dropping on a directory or the desktop.\n\n// Menu: Drag demo\n\nawait arg(\n  {\n    placeholder: \"Drag something from below\",\n    ignoreBlur: true,\n  },\n  [\n    {\n      name: \"Padding 4\",\n      drag: {\n        format: \"text/plain\",\n        data: `className=\"p-4\"`,\n      },\n    },\n    {\n      name: \"I love code\",\n      drag: {\n        format: \"text/html\",\n        data: `<span style=\"background-color:yellow;font-family:Roboto Mono\">I ‚ù§Ô∏è code</span>`,\n      },\n    },\n  ]\n)\n\nHappiness\nI'm very happy with the state of Script Kit. When I started almost a year ago, I had no idea I could push the concept of creating/sharing/managing custom scripts so far. I think it looks great, feels speedy, and is flexible enough to handle so, so many scenarios.\nWith everything in place, next week I'm starting on creating lessons, demos, and docs. It's time to show you what Script Kit can really do üòâ\nP.S. - Thanks for all the beta-testing and feedback. It's been tremendously helpful!"},{"name":"Search MDN","createdAt":"2021-08-17T21:34:27Z","value":"https://github.com/johnlindquist/kit/discussions/400","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Install mdn-search\n// Shortcode: mdn\n// Menu: Search MDN\n// Description: Search and open MDN docs\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet searchIndexResponse = await get(\n  `https://developer.mozilla.org/en-US/search-index.json`\n)\n\nlet url = await arg(\n  `Select doc:`,\n  searchIndexResponse.data.map(({ title, url }) => ({\n    name: title,\n    description: url,\n    value: `https://developer.mozilla.org${url}`,\n  }))\n)\n\nexec(`open '${url}'`)"},{"name":"beta.46 Design, ‚öê Flags, div, fixed notify","createdAt":"2021-08-13T16:33:27Z","value":"https://github.com/johnlindquist/kit/discussions/397","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"Design/theme\nPut a lot of work into tightening up pixels and made progress towards custom themes:\n\nHere's a silly demo of me playing with theme generation:\n\n  \n    \n    \n\n    CleanShot.2021-08-13.at.09.39.11.mp4\n    \n  \n\n  \n\n  \n\n\nFlags ‚öê\nAn astute observer would notice that the Edit and Share tabs are now gone. They've been consolidated into a \"flag menu\".\nWhen you press the right key from the main menu of script, the flag menu now opens up. This shows the selected script and gives you some options. It also exposes the keyboard shortcuts associated with those options that you can use to :\n\nI've found I use cmd+o and cmd+n all the time to tweak scripts of quickly create a new one to play around with.\nCustom Flags\nYou can pass your own custom flags like so:\nInstall flags-demo\n//Menu: Flags demo\n\nlet urls = [\n  \"https://scriptkit.com\",\n  \"https://egghead.io\",\n  \"https://johnlindquist.com\",\n]\n\nlet flags = {\n  open: {\n    name: \"Open\",\n    shortcut: \"cmd+o\",\n  },\n  copy: {\n    name: \"Copy\",\n    shortcut: \"cmd+c\",\n  },\n}\n\nlet url = await arg(\n  { placeholder: `Press 'right' to see menu`, flags },\n  urls\n)\n\nif (flag?.open) {\n  $`open ${url}`\n} else if (flag?.copy) {\n  copy(url)\n} else {\n  console.log(url)\n}\nNotice that flag is a global while flags is an object you pass to arg. This is to help keep it consistent with terminal usage:\nFrom the terminal\nflags-demo --open\nWill set the global flag.open to true\n\nYou could also run this and pass in all the args:\nflags-demo https://egghead.io --copy\nIn the app, you could create a second script to pass flags to the first with. This is required if you need to pass multiple flags since the arg helper can only \"submit\" one per arg.\nawait run(`flags-demo https://egghead.io --copy`)\nI'll put together some more demos soon. There are plenty of existing CLI tools out there using flags heavily, so lots of inspiration to pull from.\nawait div()\nThere's a new div \"component\". You can pass in arbitrary HTML. This works well with the md() helper which generates html from markdown.\nInstall div-demo\n// Menu: Div Demo\n\n// Hit \"enter\" to continue, escape to exit\nawait div(`<img src=\"https://placekitten.com/320\"/>`)\n\nawait div(\n  md(\n    `\n    # Some header\n\n    ## You guessed it, an h2\n\n    * I\n    * love\n    * lists\n    `\n  )\n)\nFixed notify\nnotify is now fixed so that it doesn't open a prompt\nThe most basic usage is:\nnotify(\"Hello world\")\nnotify leverages https://www.npmjs.com/package/node-notifier\nSo the entire API should be available. Here's an example of using the \"type inside a notification\":\nInstall notify-demo\n// Menu: Notify Demo\nlet notifier = notify({\n  title: \"Notifications\",\n  message: \"Write a reply?\",\n  reply: true,\n})\n\nnotifier.on(\"replied\", async (obj, options, metadata) => {\n  await arg(metadata.activationValue)\n})"},{"name":"Genius Lyrics Lookup","createdAt":"2021-08-12T13:50:24Z","value":"https://github.com/johnlindquist/kit/discussions/392","description":"Created by dealingwith","img":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Just what it says on the tin. How can I improve this one?\nInstall song-search\n// Menu: Genius Lyrics Search\n\nlet Genius = await npm('genius-lyrics-api')\n\nlet geniusUserToken = await env(\"GENIUS_AUTH_TOKEN\")\nimport { getLyrics, searchSong } from 'genius-lyrics-api';\n\nlet songTitle = await arg(\"Song Title\")\n\nlet options = {\n  apiKey: geniusUserToken,\n  title: songTitle,\n  artist: '',\n  optimizeQuery: true\n}\n\nlet returnedSongs = await(searchSong(options).then((r) => r))\nlet returnedSongTitles = returnedSongs.map(s => s.title)\n\nlet chosenSongTitle = await arg(\"Which song?\", returnedSongTitles)\n\nlet songData = returnedSongs.filter(s => s.title == chosenSongTitle)\nlet lyrics = await(getLyrics(songData[0].url).then((r) => r))\n\nlet whatToDo = await arg(\"\", [\"Copy\", \"View\", \"Visit\"])\n\nif (whatToDo == \"Copy\") copy(lyrics)\nelse if (whatToDo == \"View\") await textarea(lyrics)\nelse if (whatToDo == \"Visit\") await focusTab(songData[0].url)"},{"name":"Resize selected images","createdAt":"2021-08-12T04:37:13Z","value":"https://github.com/johnlindquist/kit/discussions/390","description":"Created by dealingwith","img":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Resizes selected images to specified width. Note: overwrites existing files.\nInstall batch-image-resize\nlet Jimp = await npm('jimp')\n\nlet width = await arg('New width in pixels')\n\nlet selectedFiles = await getSelectedFile();\nlet filePaths = selectedFiles.split(\"\\n\");\n\nfor (let filePath of filePaths) {\n  Jimp.read(filePath, (err, image) => {\n    if (err) throw err;\n    image.resize(parseInt(width), Jimp.AUTO).write(filePath); // save\n  });\n}"},{"name":"Manipulate the clipboard content using the command line","createdAt":"2021-07-31T10:42:01Z","value":"https://github.com/johnlindquist/kit/discussions/377","description":"Created by pomdtr","img":"https://avatars.githubusercontent.com/u/17577332?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"This script allows to quickly run and preview any shell command on the clipboard content using the command line.\nExample usecase -> urlencode a string, extract column from a csv, run a jq command...\nYou can also chain shell commands using pipes.\nInstall pipe\n// Menu: Pipe Clipboard to Command\n// Decription: Manipulate clipboard content using the command line\n// Author: pomdtr\n\nprocess.env.PATH = `${process.env.HOME}/.local/bin:/usr/local/bin/:${process.env.PATH}`;\n\nfunction codeblock(text) {\n  const triple_backquote = \"```\";\n  return `${triple_backquote}shell\\n${text}\\n${triple_backquote}`;\n}\n\n// Persist clipoard inside a file\nconst clipboardContent = await paste();\nconst tempfile = `${kit.tempdir()}/input.txt`;\nawait kit.writeFile(tempfile, clipboardContent, {\n  flag: \"w\",\n  encoding: \"utf-8\",\n});\n\nlet command = \"\";\nlet [stdout, stderr, code] = [null, null, 0];\nlet panelContent = await kit.readFile(tempfile, { encoding: \"utf-8\" });\n\nwhile (true) {\n  command = await arg(\n    {\n      placeholder: \"Input Command:\",\n      className: \"p-2\",\n      input: command,\n      hint: \"Hit enter to run command and save output to clipboard, esc to dismiss window.\"\n    },\n    md(codeblock(panelContent))\n  );\n\n  if (command) {\n    ({ stdout, stderr, code } = exec(`cat ${tempfile} | ${command}`));\n    panelContent = code == 0 ? stdout : stderr;\n    if (code == 0) {\n      panelContent = stdout;\n    } else {\n      panelContent = stderr;\n    }\n  } else {\n    panelContent = await kit.readFile(tempfile, { encoding: \"utf-8\" });\n  }\n\n  await copy(panelContent);\n}"},{"name":"Generate TS Interfaces from JSON input","createdAt":"2021-07-29T20:12:56Z","value":"https://github.com/johnlindquist/kit/discussions/373","description":"Created by benjaminmodayil","img":"https://avatars.githubusercontent.com/u/12306850?u=51152dab74c9158efeb6a84a65acf2464cf84218&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Hi everyone,\nJust made this quick script and thought I'd share. My company is updating our codebases to use TypeScript and wanted a way to quickly generate interfaces from JSON input. I'm usually right clicking and copying parts of API responses in the Network tab to pick out the JSON and manually type things out. Now I just copy the JSON, paste into Kit, and then save a few moments of my time.\nScript\n// Title: Generate types\n// Description: Paste your JSON in and get your Interfaces straight to your clipboard\n// Author: Benjamin Modayil\n// Twitter: @24props\n\nlet {json2ts} = await npm('json-ts')\n\nlet schema = await arg(\"What is the schema?\");\nawait copy(`${json2ts(schema)}`)\n\nnotify({\n  title: 'Interfaces copied to the clipboard',\n  message: \"Paste your interfaces into a text editor\"\n})\nexit() // needed otherwise scriptkit hangs open\nI haven't tested the script that much yet, but something that could be tweaked would be wrapping json-ts in a try/catch and outputting a different notification depending on the result.\nAnother thing to note is that the output from json-ts could always be improved from the developer using the script. I would assume for json-ts that it's pretty hard to generate union types without more data to comb through and it's up to the developer to determine when you might need flexibility number | string or strictness from something like \"success\" | \"error\" | \"warning\". Also, from the example output below, json-ts generates the property previous as null, based on the data provided, but I'm guessing it's actually supposed to be a string like next. All this to say: \"use at your own discretion\".\nExample\nGo to this Pokemon API JSON link, copy JSON, paste into script, paste into editor, and see the below output:\ninterface IRootObject {\n    count: number;\n    next: string;\n    previous: null;\n    results: IResultsItem[];\n}\ninterface IResultsItem {\n    name: string;\n    url: string;\n}"},{"name":"beta.33 `console.log` component, cmd+o to Open, `className`","createdAt":"2021-07-22T22:44:19Z","value":"https://github.com/johnlindquist/kit/discussions/365","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"console.log Component\nThe follow code will create the below prompt (üëÄ notice the black background logging component):\nlet { stdout } = await $`ls ~/projects | grep kit`\n\nawait arg(`Select a kit dir`, stdout.split(\"\\n\"))\n\nconsole.log(chalk`{green.bold The current date is:}`)\nconsole.log(new Date().toLocaleDateString())\nawait arg()\n\nThe log even persists between prompts:\nlet first = await arg(\"First name\")\nconsole.log(first)\nlet last = await arg(\"Last name\")\nconsole.log(`${first} ${last}`)\nlet age = await arg(\"Age\")\nconsole.log(`${first} ${last} ${age}`)\nlet emotion = await arg(\"Emotion\")\nconsole.log(`${first} ${last} ${age} ${emotion}`)\nawait arg()\n\nClick the \"edit\" icon to open the full log in your editor:\n\ncmd+o to Open\nFrom the main menu, hitting cmd+o will open:\n\nThe currently selected script from the main menu\nThe currently running script\nAny \"choice\" that provides a \"filePath\" prop:\n\nawait arg(`cmd+o to open file`, [\n  {\n    name: \"Karabiner config\",\n    filePath: \"~/.dotfiles/karabiner/karabiner.edn\",\n  },\n  {\n    name: \"zshrc\",\n    filePath: \"~/.zshrc\",\n  },\n])\nI've found this really useful when I want to tweak the running script, but I don't want to go back through the process of finding it.\nExperimental className\nYou can pass className into the arg options to affect the container for the list items or panel. Most classes from Tailwind should be available. Feel free to play around with it and let me know how it goes üòá:\nawait arg(\n  {\n    className: \"p-4 bg-black font-mono text-xl text-white\",\n  },\n  `\n  <p>Working on Script Kit today</p>\n  <img src=\"https://i.imgflip.com/5hc0v4.jpg\" title=\"made at imgflip.com\"/>`\n)\n\nawait arg(\n  {\n    className: \"p-4 bg-black font-mono text-xl text-white\",\n  },\n  [\"Eat\", \"more\", \"tacos üåÆ\"]\n)"},{"name":"Daily Story","createdAt":"2021-07-20T18:16:42Z","value":"https://github.com/johnlindquist/kit/discussions/357","description":"Created by kentcdodds","img":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Wrote a new script where I can quickly write little stories of what's going on in my life. It's kind of like a little journal. I set the DAILY_STORY_DIRECTORY to a folder in dropbox.\nThe only thing I'm unsure of right now is I want to use textarea but I don't know how to actually submit what's been typed. Hitting \"enter\" just (correctly) inserts a newline. I tried ‚åò+enter and that didn't work. Anyone know how to submit a textarea?\nInstall daily-story\n// Menu: Daily Story\n// Description: Write a quick story\n// Author: Kent C. Dodds\n// Shortcut: command option control o\n// Twitter: @kentcdodds\n\nconst dateFns = await npm('date-fns')\nconst filenamify = await npm('filenamify')\nconst prettier = await npm('prettier')\n\nconst storyDir = await env(\n  'DAILY_STORY_DIRECTORY',\n  `Where do you want daily stories to be saved?`,\n)\n\nconst story = await arg({placeholder: 'Write your story here'})\n\nconst today = dateFns.format(new Date(), 'yyyy-MM-dd')\nconst date = await arg({\n  input: today,\n  hint: 'When did this happen?',\n})\nconst title = await arg({\n  placeholder: 'What do you want to call this story?',\n  hint: 'Title',\n})\n\nconst md = `---\ntitle: ${title}\ndate: ${date}\nwritten: ${today}\n---\n\n${story}\n`\n\n// prettify the markdown\nconst prettyMd = await prettier.format(md, {\n  parser: 'markdown',\n  arrowParens: 'avoid',\n  bracketSpacing: false,\n  embeddedLanguageFormatting: 'auto',\n  htmlWhitespaceSensitivity: 'css',\n  insertPragma: false,\n  jsxBracketSameLine: false,\n  jsxSingleQuote: false,\n  printWidth: 80,\n  proseWrap: 'always',\n  quoteProps: 'as-needed',\n  requirePragma: false,\n  semi: false,\n  singleQuote: true,\n  tabWidth: 2,\n  trailingComma: 'all',\n  useTabs: false,\n  vueIndentScriptAndStyle: false,\n})\n\nconst filename = filenamify(\n  `${date}-${title.toLowerCase().replace(/ /g, '-')}.md`,\n  {replacement: '-'},\n)\nawait writeFile(path.join(storyDir, filename), prettyMd)"},{"name":"beta.29 M1 build, install remote kenvs, polish, upcoming lessons","createdAt":"2021-07-16T18:29:00Z","value":"https://github.com/johnlindquist/kit/discussions/353","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"I'm starting on lessons/docs on Monday. If you have anything specific you want me to cover, please reply below!\nM1 Build\nIf you're on an M1 mac, you can download the new M1 build from https://www.scriptkit.com/\n\nDownload https://www.scriptkit.com/\nQuit Kit. *note - typing kit quit or k q in the app is the fastest way to quit.\nDrag/drop to overwrite your previous build\nKit should now auto-update from the M1 channel\nOpen Kit\n\nKenv Management\nThere are a lot of tools to help manage other kenvs. They're in the Kit menu and once you've installed a remote kenv (which is really just a git repo with a scripts dir), then more options show up in the Edit menu to move scripts between kenvs, etc. I'll cover this in detail in the docs/lessons\nPolish\nLots of UI work:\n\nRemembering position - Each script with a //Shortcut will remember its last individual prompt position. For example, if you have a script that uses textarea, then drag it to the upper right, the next time you launch that script, it will launch in that position.\n//Image metadata - Scripts can now have images:\n\n//Image: https://placekitten.com/64\nor\n//Image: logo.png\nwill load from ~/.kenv/assets/logo.png\n\nSpinner - added a spinner for when you submit a prompt and the process needs to do some work before opening the next prompt\n\n\n\nResizing - Lots of work on getting window resizing behavior consistent between different UIs. This was a huge pain, but you'll probably never appreciate it üòÖ\nLots more - many more small things\n\nLessons!\nI'm starting to work on lessons next week and getting back into streaming schedule. I would ‚ô•Ô∏è to hear any specific questions or lessons you would like to see to help you remove some friction from your day. I'll be posting the lessons over on egghead.io for your viewing pleasure. Please ask questions in the replies!"},{"name":"Generate fake data with faker.js","createdAt":"2021-07-10T10:00:11Z","value":"https://github.com/johnlindquist/kit/discussions/341","description":"Created by JCofman","img":"https://avatars.githubusercontent.com/u/2118956?u=dd12813efdeb91151f98fcecd5c078f29bed6ff9&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Here is a simple one to generate fake data with https://github.com/marak/Faker.js/ and save it to clipboard.\n// Menu: Fake\n// Description: generate fake data with faker.js\n// Author: Jacob Cofman\n// Twitter: @jcofman\n\nconst faker = await npm(\"faker\");\n\nfunction getMethodFakerData(method) {\n  return Object.keys(faker[method]);\n}\n\nconst fakerMethods = [\n  \"name\",\n  \"address\",\n  \"phone\",\n  \"internet\",\n  \"company\",\n  \"image\",\n  \"lorem\",\n  \"helpers\",\n  \"date\",\n  \"random\",\n  \"finance\",\n  \"hacker\",\n  \"system\",\n  \"commerce\",\n  \"database\",\n  \"animal\",\n  \"git\",\n  \"music\",\n  \"datatype\",\n];\n\nconst method = await arg(\"Select-Base-Method:\", fakerMethods);\n\nconst fakerBaseMethods = getMethodFakerData(method);\n\nconst script = await arg(\"Select-Script:\", fakerBaseMethods);\n\nconst result = await faker[method][script]();\ncopy(result);\nawait arg(result);"},{"name":"ConvertKit lookup","createdAt":"2021-07-08T05:07:55Z","value":"https://github.com/johnlindquist/kit/discussions/336","description":"Created by kentcdodds","img":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Created a new script to easily query convert kit because I was tired of the manual process of going to convert kit and clicking around to find a particular user. Wrote this in 2 minutes (had some of the convert kit API code already). Man I love ScriptKit.\nInstall convert-kit-lookup\n// Menu: ConvertKit > Lookup\n// Description: Query convertkit\n// Author: Kent C. Dodds\n// Twitter: @kentcdodds\n\nconst CONVERT_KIT_API_SECRET = await env('CONVERT_KIT_API_SECRET')\nconst CONVERT_KIT_API_KEY = await env('CONVERT_KIT_API_KEY')\n\nconst query = await arg('query')\nlet url\nif (query.includes('@')) {\n  const sub = await getConvertKitSubscriber(query)\n  if (sub?.id) {\n    url = `https://app.convertkit.com/subscribers/${sub.id}`\n  }\n}\n\nif (!url) {\n  url = `https://app.convertkit.com/subscribers?utf8=%E2%9C%93&q=${query}&status=all`\n}\nexec(`open \"${url}\"`)\n\nasync function getConvertKitSubscriber(email) {\n  const url = new URL('https://api.convertkit.com/v3/subscribers')\n  url.searchParams.set('api_secret', CONVERT_KIT_API_SECRET)\n  url.searchParams.set('email_address', email)\n\n  const resp = await fetch(url.toString())\n  const json = await resp.json()\n  const {subscribers: [subscriber] = []} = json\n\n  return subscriber\n}"},{"name":"Title Case Selected Text","createdAt":"2021-07-01T14:06:36Z","value":"https://github.com/johnlindquist/kit/discussions/335","description":"Created by dealingwith","img":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Here's a really quick one I decided to spin up this morning:\nInstall title-case\nlet { titleCase } = await npm(\"title-case\");\nlet selectedText = await getSelectedText();\nlet value = titleCase(selectedText);\nawait setSelectedText(value);\n...also, a tiny variant on the above I like to call The Proper Namifier‚Ñ¢\nlet { titleCase } = await npm(\"title-case\");\nlet selectedText = await getSelectedText();\nlet value = titleCase(selectedText) + '‚Ñ¢';\nawait setSelectedText(value);"},{"name":"Beta.20 MOAR SPEED! ‚ö°Ô∏è","createdAt":"2021-06-26T17:03:40Z","value":"https://github.com/johnlindquist/kit/discussions/330","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"Process Pools and Virtualized Lists\n\n  \n    \n    \n\n    2021-06-26.10-32-23.mp4\n    \n  \n\n  \n\n  \n\n\nExperimental textarea\nFeel free to play around with the textarea for multiline input.\nlet value = await textarea()\nThe API of textarea will change (it currently just sets the placeholder), but it will always return the string value of the textarea, so there won't be any breaking changes if you just keep the default behavior. cmd+s submits. cmd+w cancels.\nExperimental editor (this will become a paid  üíµ feature later this year)\nAs an upgrade to textarea, await editor() will give you a full editor experience. Same as the textarea, the API will also change, but will always return a string of the content.\n// Defaults to markdown\nlet value = await editor()\n\n‚ö†Ô∏è API is subject to change!\n\nlet value = await editor(\"markdown\", `\n## Preloaded content\n\n* nice\n`)\nlet value = await editor(\"javascript\", `\nconsole.log(\"Support other languages\")\n`)\nA note on paid features\nEverything you've used so far in the Script Kit app will stay free. The core kit is open-source MIT.\nThe paid features will be add-ons to the core experience: Themes, Editor, Widgets, Screenshots, Record Audio, and many more fun ideas. These will roll out experimentally in the free version first then move exclusively to the paid version. Expect the paid versions later this year."},{"name":"Compress selected images with Tinify","createdAt":"2021-06-24T17:28:25Z","value":"https://github.com/johnlindquist/kit/discussions/328","description":"Created by vojtaholik","img":"https://avatars.githubusercontent.com/u/25487857?u=a371b702ae9208d23d523acc1fcd02ce6573ffe0&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"// Menu: Tinify\n// Description: Compress selected images with Tinify\n// Author: Vojta Holik\n// Twitter: @vjthlk\n\nlet tinify = await npm(\"tinify\");\nlet fs = await import(\"fs\");\nlet selectedFiles = await getSelectedFile();\n\ntinify.key = env.TINIFY_API_KEY;\n\nlet filePaths = selectedFiles.split(\"\\n\");\n\nfor (let filePath of filePaths) {\n  let directory = path.dirname(filePath);\n  let extension = path.extname(filePath);\n  let originalFileName = path.basename(filePath);\n  let suffix = \"-optimized\";\n  let newFileName = originalFileName.replace(extension, suffix + extension);\n\n  fs.readFile(filePath, (err, sourceData) => {\n    if (err) throw err;\n    tinify.fromBuffer(sourceData).toBuffer((err, resultData) => {\n      if (err) throw err;\n      fs.writeFile(`${directory}/` + newFileName, resultData, (err) => {\n        if (err) throw err;\n      });\n    });\n  });\n}\nGet your api key on tinify.com/dashboard/api (assuming you're logged in) and add it to ~/.kenv/.env file like so:\n# ...\nTINIFY_API_KEY=your_key\n\n\n  You can change file names and directory to best suite your workflow. Since I often work with @2x images I adjusted the script to correctly suffix that part.\nlet isHD = originalFileName.includes(\"@2x\");\nlet newFileName = isHD\n  ? originalFileName\n      .replace(\"@2x\", \"\")\n      .replace(extension, `${suffix}@2x${extension}`)\n  : originalFileName.replace(extension, `${suffix}${extension}`);"},{"name":"Paste last item from clipboard","createdAt":"2021-06-20T07:15:54Z","value":"https://github.com/johnlindquist/kit/discussions/325","description":"Created by JoepKockelkorn","img":"https://avatars.githubusercontent.com/u/12891645?u=eb9ed13c1bc9eeccf0b87ddbeea8778c7c32c05a&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"With two globals you can paste the last item from the clipboard:\nawait setSelectedText(await paste());"},{"name":"Slugify selected file names","createdAt":"2021-06-15T08:26:48Z","value":"https://github.com/johnlindquist/kit/discussions/320","description":"Created by vojtaholik","img":"https://avatars.githubusercontent.com/u/25487857?u=a371b702ae9208d23d523acc1fcd02ce6573ffe0&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"// Menu: Slugify file name\n// Description: Slugify selected files\n// Author: Vojta Holik\n// Twitter: @vjthlk\n\nlet slugify = await npm(\"slugify\")\nlet selectedFiles = await getSelectedFile()\n\nconst filePaths = selectedFiles.split(\"\\n\")\n\nfor (let filePath of filePaths) {\n  let originalFileName = path.basename(filePath)\n  let newFileName = slugify(originalFileName, {\n    lower: true,\n  })\n  let newFilePath = path.join(\n    path.dirname(filePath),\n    newFileName\n  )\n\n  cp(filePath, newFilePath)\n}"},{"name":"Beta.19 New Features - Gotta go fast! üèéüí®","createdAt":"2021-06-07T20:47:28Z","value":"https://github.com/johnlindquist/kit/discussions/312","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"Beta.19 is all about speed! I've finally landed on an approach I love to get the prompt moving waaaay faster.\nCouple videos below:\nInstant Prompts\n\n  \n    \n    \n\n    2021-06-07.14-29-37.mp4\n    \n  \n\n  \n\n  \n\n\n// Shortcut: option 5\n\nlet { items } = await db(async () => {\n  let response = await get(\n    `https://api.github.com/users/johnlindquist/repos`\n  )\n\n  return response.data\n})\n\nawait arg(\"Select repo\", items)\nInstant Tabs\n\n  \n    \n    \n\n    2021-06-07.14-23-13.mp4\n    \n  \n\n  \n\n  \n\n\nInstant Main Menu\nThe main menu now also leverages the concepts behind Instant Prompts listed above.\nFaster in the future\nThese conventions laid the groundwork for caching prompt data, but I still have plenty ideas to speed things, especially around how the app launches the process. I'm looking forward to making this even faster for you!\nI'm also starting the work on an \"Instant Textarea\" because I know popping open a little textarea to take/save notes/ideas is something many people would use. üìù"},{"name":"Cloudinary upload","createdAt":"2021-06-07T05:28:35Z","value":"https://github.com/johnlindquist/kit/discussions/310","description":"Created by kentcdodds","img":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"I made this handy little script that makes it really easy for me to upload images to cloudinary.\nI just realized that I need to make it so I can create a new folder from script kit (right now you can only choose from folders that already exist). But it should make it much easier for me to get images up to cloudinary while I'm in the zone writing a blog post :)\n// Menu: Cloudinary upload\n// Description: Upload an image to cloudinary\n// Shortcut: command option control c\n// Author: Kent C. Dodds\n// Twitter: @kentcdodds\n\nimport path from 'path'\n\nconst cloudinaryCloudName = await env('CLOUDINARY_CLOUD_NAME')\nconst cloudinaryKey = await env('CLOUDINARY_API_KEY')\nconst cloudinarySecret = await env('CLOUDINARY_API_SECRET')\nconst cloudiaryConsoleId = await env('CLOUDINARY_CONSOLE_ID')\n\nawait npm('cloudinary')\nimport cloudinary from 'cloudinary'\n\nconst cacheDb = await db('cloudinary-cache', {lastChoice: '', folders: {}})\nawait cacheDb.read()\n\ncloudinary.config({\n  cloud_name: cloudinaryCloudName,\n  api_key: cloudinaryKey,\n  api_secret: cloudinarySecret,\n  secure: true,\n})\n\nconst actions = {\n  CREATE_NEW: 'creating new folder',\n  REFRESH_CACHE: 'refreshing cache',\n  OPEN_DIR: 'opening directory',\n}\n\nlet chosenDirectory = await cacheDb.data.lastChoice\nlet lastSelection\nwhile (true) {\n  // if the last action was to create a new directory then we know the chosen\n  // directory is new and has no folders otherwise we have to wait a few seconds\n  // for the API to be prepared for us to make a request for the contents.\n  const directories =\n    lastSelection === actions.CREATE_NEW\n      ? []\n      : await getFolders(chosenDirectory)\n  lastSelection = await arg(\n    `Select directory in ${chosenDirectory}`,\n    [\n      {name: '.', value: '.', description: '‚úÖ Choose this directory'},\n      !chosenDirectory\n        ? null\n        : {name: '..', value: '..', description: '‚§¥Ô∏è Go up a directory'},\n      ...directories.map(folder => ({\n        name: folder.name,\n        value: folder.path,\n        description: '‚§µÔ∏è Select directory',\n      })),\n      {\n        name: 'Open directory',\n        value: actions.OPEN_DIR,\n        description: 'üåê Open this directory in the browser',\n      },\n      {\n        name: 'Refresh cache',\n        value: actions.REFRESH_CACHE,\n        description: 'üîÑ Refresh the cache for this directory',\n      },\n      {\n        name: 'Create new directory',\n        value: actions.CREATE_NEW,\n        description: '‚ûï Create a new directory here',\n      },\n    ].filter(Boolean),\n  )\n  if (lastSelection === '..') {\n    chosenDirectory = chosenDirectory.split('/').slice(0, -1).join('/')\n  } else if (lastSelection === '.') {\n    break\n  } else if (lastSelection === actions.CREATE_NEW) {\n    const newFolderName = await arg(`What's the new folder name?`)\n    const newDirectory = `${chosenDirectory}/${newFolderName}`\n    const result = await cloudinary.v2.api.create_folder(newDirectory)\n    delete cacheDb.data.folders[chosenDirectory]\n    chosenDirectory = newDirectory\n  } else if (lastSelection === actions.REFRESH_CACHE) {\n    delete cacheDb.data.folders[chosenDirectory]\n  } else if (lastSelection === actions.OPEN_DIR) {\n    await openFolder(chosenDirectory)\n  } else {\n    chosenDirectory = lastSelection\n  }\n}\n\ncacheDb.data.lastChoice = chosenDirectory\nawait cacheDb.write()\n\nconst images = await arg({\n  placeholder: 'Drop the image(s) you want to upload',\n  drop: true,\n  ignoreBlur: true,\n})\nfor (const image of images) {\n  const defaultName = path.parse(image.path).name\n\n  const name =\n    (await arg({\n      placeholder: `Name of this image?`,\n      hint: `Default is: \"${defaultName}\"`,\n    })) || defaultName\n\n  const uploadedImage = await cloudinary.v2.uploader.upload(image.path, {\n    public_id: name,\n    overwrite: false,\n    folder: chosenDirectory,\n  })\n\n  // If you have multiple files then this isn't really useful unless you have\n  // clipbloard history (which I recommend you get!)\n  await copy(uploadedImage.secure_url)\n}\n\nawait openFolder(chosenDirectory)\n\nfunction openFolder(folder) {\n  const encodedFolder = encodeURIComponent(folder)\n  console.log('opening')\n  return exec(\n    `open \"https://cloudinary.com/console/${cloudiaryConsoleId}/media_library/folders/${encodedFolder}\"`,\n  )\n}\n\nasync function getFolders(directory) {\n  const cachedDirectories = cacheDb.data.folders[directory]\n  if (cachedDirectories) {\n    return cachedDirectories\n  }\n\n  try {\n    const {folders: directories} = !directory\n      ? await cloudinary.v2.api.root_folders()\n      : await cloudinary.v2.api.sub_folders(directory)\n\n    cacheDb.data.folders[directory] = directories\n\n    await cacheDb.write()\n\n    return directories\n  } catch (error) {\n    console.error('error with the directory')\n    return []\n  }\n}"},{"name":"My attempt with Notion API","createdAt":"2021-06-04T23:37:23Z","value":"https://github.com/johnlindquist/kit/discussions/306","description":"Created by Alarid","img":"https://avatars.githubusercontent.com/u/5678065?u=e2e528a3ee58b5150a1947c7ded93695b35a8779&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Hey folks üëã\nSo I have this big \"Tasks\" database in Notion where I put all my tasks (personal/work/projects). Each task has many properties, including a \"Status\" (ToDo, Doing, Done, ...) and a \"Day\" (_Monday, Tuesday, ...) which I use in a view called \"Week planner\". It's a board view, one column for each value of the property \"Day\", which allows me to have a nice view of what needs to be done this week. I found myself using mainly this view for inserting new tasks. In fact, if I need to do something for tomorrow or the day after, then I add a new task in this column.\nSince Notion released their APIs, I thought \"How cool it would be to do this with Kit!\". I finally did it, and I'm loving it already. This is gonna save me so much time. If I'm working on something and a new task pop into my mind, I can add it from anywhere in a few seconds.\nHere is the script for those interested (UPDATED VERSION: thanks John for the tips)\n// Menu: New task\n// Description: Add a new task in Notion\n\nconst { newTask, getProperties, syncProperties } = await lib(\"notion-tasks\")\n\nlet taskName = await arg({\n  placeholder: \"Task name\",\n  hint: `Type \"sync\" to sync`,\n})\nif (taskName === \"sync\") {\n  try {\n    await syncProperties()\n    notify({\n      title: \"‚úÖ Notion sync\",\n      message: \"Tasks properties successfully cached locally\",\n    })\n  } catch (err) {\n    notify({\n      title: \"‚õîÔ∏è Notion sync\",\n      message: \"Something went wrong\",\n    })\n    console.error(err)\n  }\n  taskName = await arg(\"Task name\")\n}\n\nconst { statusOptions, dayOptions, tagOptions } = getProperties()\n\nconst status = await arg(\n  \"Status\",\n  statusOptions.map((opt) => opt.name)\n)\nconst day = await arg(\n  \"Day\",\n  dayOptions.map((opt) => opt.name)\n)\nconst tag = await arg(\n  \"Tag\",\n  tagOptions.map((opt) => opt.name)\n)\n\ntry {\n  await newTask(taskName, status, day, tag)\n  send(\"HIDE_APP\")\n  notify({\n    title: \"‚úÖ New task added\",\n    message: `${taskName} for ${day} (${status})`,\n  })\n} catch (err) {\n  send(\"HIDE_APP\")\n  notify({\n    title: \"‚õîÔ∏è New task\",\n    message: `Something went wrong`,\n  })\n  console.error(err)\n}\nAnd the lib file (.kenv/lib/notion-tasks.js)\nconst notionToken = await env(\"NOTION_USER_TOKEN\")\nconst databaseId = \"06d55db47a994f429132d5d8fd9edd2a\"\nconst tasksDb = await db(\"tasks\", {\n  properties: {\n    statusOptions: [],\n    dayOptions: [],\n    tagOptions: [],\n  },\n})\nexport const getProperties = () => tasksDb.properties\n\nexport async function syncProperties() {\n  const { data } = await get(\n    `https://api.notion.com/v1/databases/${databaseId}`,\n    {\n      headers: {\n        Authorization: `Bearer ${notionToken}`,\n        \"Content-Type\": \"application/json\",\n        \"Notion-Version\": \"2021-05-13\",\n      },\n    }\n  )\n  const {\n    Status: {\n      select: { options: statusOptions },\n    },\n    Day: {\n      multi_select: { options: dayOptions },\n    },\n    Tag: {\n      multi_select: { options: tagOptions },\n    },\n  } = data.properties\n\n  tasksDb.properties = { statusOptions, dayOptions, tagOptions }\n  await tasksDb.write()\n}\n\nexport async function newTask(taskName, status, day, tag) {\n  return await post(\n    \"https://api.notion.com/v1/pages\",\n    {\n      parent: { database_id: databaseId },\n      properties: {\n        Name: {\n          title: [{ text: { content: taskName } }],\n        },\n        Status: {\n          select: { name: status },\n        },\n        Day: {\n          multi_select: [{ name: day }],\n        },\n        Tag: {\n          multi_select: [{ name: tag }],\n        },\n      },\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${notionToken}`,\n        \"Content-Type\": \"application/json\",\n        \"Notion-Version\": \"2021-05-13\",\n      },\n    }\n  )\n}\nMaybe I'm missing something about caching though üòÖ Any feedback/improvement ideas appreciated. And once again, thanks @johnlindquist for this amazing app, I use it every single day and it has definitely made my life easier üôè"},{"name":"How to Get Your Scripts Featured on ScriptKit.com üòé","createdAt":"2021-06-04T20:07:36Z","value":"https://github.com/johnlindquist/kit/discussions/305","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"TL;DR\n\nHelp -> Create kenv\nGit init new kenv, push to github\nReply, dm, contact me somehow with the repo üòá\n\nHere's a video walking you through it:\n\n  \n    \n    \n\n    2021-06-04.13-58-38.mp4"},{"name":"Beta.18 Changes/Features (`db` has a breaking change)","createdAt":"2021-06-04T18:09:55Z","value":"https://github.com/johnlindquist/kit/discussions/304","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"‚ö†Ô∏èBreaking: New db helper\nlowdb updated to 2.0, so I updated the db helper to support it.\n\naccess/mutate the objects in the db directly. Then .write() to save your changes to the file.\nawait db() and await myDb.write()\n\nExample with a simple object:\nlet shoppingListDb = await db(\"shopping-list\", {\n  list: [\"apples\", \"bananas\"],\n})\n\nlet item = await arg(\"Add to list\")\nshoppingListDb.list.push(item)\nawait shoppingListDb.write()\n\nawait arg(\"Shopping list\", shoppingListDb.list)\nYou can also use an async function to store the initial data:\nlet reposDb = await db(\"repos\", async () => {\n  let response = await get(\n    \"https://api.github.com/users/johnlindquist/repos\"\n  )\n\n  return {\n    repos: response.data,\n  }\n})\n\nawait arg(\"Select repo\", reposDb.repos)\nText Area prompt\nlet text = await textarea()\n\ninspect(text)\n\nOptional value\narg choice objects used to require a value. Now if you don't provide a value, it will simply return the entire object:\nlet person = await arg(\"Select\", [\n  { name: \"John\", location: \"Chair\" },\n  { name: \"Mindy\", location: \"Couch\" },\n])\n\nawait arg(person.location)\n‚öóÔ∏è Experimental \"Multiple kenvs\"\nThere was a ton üèãÔ∏è‚Äç‚ôÄÔ∏è of internal work over the past couple weeks to get this working. The \"big idea\" is supporting multiple kit environments. For example:\n\nprivate/personal kenv\nshared kenv\ncompany kenv\nproduct kenv\n\nFuture plans\nIn an upcoming release:\n\nyou'll be able to \"click to install kenv from repo\" (just like we do with individual scripts)\nupdate a git-controlled kenv (like a company kenv)\nthe main prompt will be able to search for all scripts across kenvs.\nIf multiple kenvs exist, creating a new script will ask you which kenv to create it in.\n\nFor now, you can try adding/creating/switching the help menu. It should all work fine, but will be waaaay cooler in the future üòé\n\nImproved Error Prompt\nNow when an error occurs, it takes the error data, shuts down the script, then prompts you on what to do. For example, trying to use the old db would result in this:\n\nImproved Tab Switching\nSwitching tabs will now cancel the previous tabs' script. Previously, if you quickly switched tabs on the main menu, the \"Hot\" tab results might show up in a different tab because the loaded after the tab switched. The internals around message passing between the script and the app now have a cancellation mechanism so you only get the latest result that matches the prompt/tab. (This was also a ton of internals refactoring work üòÖ)"},{"name":"Another Notion example -- select a random item from a database","createdAt":"2021-05-30T04:23:32Z","value":"https://github.com/johnlindquist/kit/discussions/297","description":"Created by dealingwith","img":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Like the last Notion example I posted, this one interfaces with my giant, singular Tasks database in Notion. This one selects one task at random (that does not have a status of Done or Archive).\nInstall notion-random-task\nlet notionToken = await env('NOTION_USER_TOKEN')\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\n\nlet {data} = await post(\n  `https://api.notion.com/v1/databases/${databaseID}/query`,\n{\n  \"filter\": {\n    \"and\": [\n      {\n        \"property\": \"Status\",\n        \"select\": {\n          \"does_not_equal\": \"Done\"\n        }\n      },\n      {\n        \"property\": \"Status\",\n        \"select\": {\n          \"does_not_equal\": \"Archive\"\n        }\n      }\n    ]\n  },\n  page_size: 100\n},\n{\n  headers: {\n    Authorization: `Bearer ${notionToken}`,\n    \"Content-Type\": \"application/json\",\n    \"Notion-Version\": \"2021-05-13\"\n  }\n})\n\nlet tasks = data.results\nlet task = tasks[Math.floor(Math.random() * tasks.length)];\nlet pageID = task.id.replace(/-/g, \"\");\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\ncopy(pageURL)\n\nawait focusTab(pageURL, \"Google Chrome Beta\")\nI also created one that only queries for tasks with no status (the \"inbox\")...\nInstall notion-random-from-inbox\nlet notionToken = await env('NOTION_USER_TOKEN')\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\n\nlet {data} = await post(\n  `https://api.notion.com/v1/databases/${databaseID}/query`,\n{\n  \"filter\": \n  {\n    \"property\": \"Status\",\n    \"select\": {\n      \"is_empty\": true\n    }\n  },\n  page_size: 50\n},\n{\n  headers: {\n    Authorization: `Bearer ${notionToken}`,\n    \"Content-Type\": \"application/json\",\n    \"Notion-Version\": \"2021-05-13\"\n  }\n})\n\nlet tasks = data.results\nlet task = tasks[Math.floor(Math.random() * tasks.length)];\nlet pageID = task.id.replace(/-/g, \"\");\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\ncopy(pageURL)\n\nawait focusTab(pageURL, \"Google Chrome Beta\")\nIs there a better way to open the link in a browser? I stole this method from Ian Jones."},{"name":"Shorten with netlify-shortener","createdAt":"2021-05-27T02:50:35Z","value":"https://github.com/johnlindquist/kit/discussions/295","description":"Created by kentcdodds","img":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"netlify-shortener\nInstall shorten\n// Menu: Shorten\n// Description: Shorten a given URL with a given short name via netlify-shortener\n// Shortcut: command option control s\n// Author: Kent C. Dodds\n// Twitter: @kentcdodds\n\nconst dir = await env(\n  'SHORTEN_REPO_DIRECTORY',\n  'Where is your netlify-shortener repo directory?',\n)\n\nconst longURL = await arg(`What's the full URL?`)\n// TODO: figure out how to make this optional\nconst shortName = await arg(`What's the short name?`)\nconst netlifyShortenerPath = path.join(\n  dir,\n  'node_modules/netlify-shortener/dist/index.js',\n)\nconst {baseUrl} = JSON.parse(await readFile(path.join(dir, 'package.json')))\n\nsetPlaceholder(`Creating redirect: ${baseUrl}/${shortName} -> ${longURL}`)\nconst result = exec(\n  `node \"${netlifyShortenerPath}\" \"${longURL}\" \"${shortName}\"`,\n)\n\nconst {stderr, stdout} = result\n\nif (result.code === 0) {\n  const lastLine = stdout.split('\\n').filter(Boolean).slice(-1)[0]\n  notify({\n    title: '‚úÖ Short URL created',\n    message: lastLine,\n  })\n} else {\n  const getErr = str => str.match(/Error: (.+)\\n/)?.[1]\n  const error = getErr(stderr) ?? getErr(stdout) ?? 'Unknown error'\n  console.error({stderr, stdout})\n  notify({\n    title: '‚ùå Short URL not created',\n    message: error,\n  })\n}\nIt's a bit of a hack in some places, but it works!"},{"name":"Kill Notification","createdAt":"2021-05-21T20:26:44Z","value":"https://github.com/johnlindquist/kit/discussions/288","description":"Created by gm90","img":"https://avatars.githubusercontent.com/u/285740?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Inspired by Tyler Hall, a quick shortcut key to clear a mac notification with the awkward Big Sur UX  with the tiny cross click area.\n// Shortcut: command option k\n// Menu: Kill Notification\n// Description: Kill pesky mac os notification inspired by 240px-invisible-pixels @ https://tyler.io/240-invisible-pixels/\n// Author: Gary McCann\n\nconst robot = await npm (\"robotjs\");\nconst screenSize = robot.getScreenSize();\nconst xPosition = screenSize.width - 354;\nconst yPosition = 47;\n\nrobot.moveMouse(xPosition, yPosition);\n\nsetTimeout(() => {  \n  robot.mouseClick();\n}, 100)"},{"name":"Post to Notion","createdAt":"2021-05-20T04:14:00Z","value":"https://github.com/johnlindquist/kit/discussions/286","description":"Created by dealingwith","img":"https://avatars.githubusercontent.com/u/124208?u=5b2a19548fc1db39a17293af84a845aef2906dc5&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"I thought the Notion API might be a fun thing to play with via Script Kit. I have a singular \"tasks\" database that I use to capture all manner of things, so I always want to insert pages into it in order to process them later. These scripts will require you to update the databaseID value in the code itself. I could see an expansion of this script to allow for the selection of a specific Notion database from a list.\nThe second script below takes a second input in order to insert content into the new page -- I was wondering if there is a way to allow multiline text input via Script Kit, which would make that script more robust.\nYou can get a Notion API token here and find quick-start instructions here, as well as the API reference here.\nFor a quick overview of the data model, check out Chris Biscardi's video here. For a more in-depth overview, check out this Notion blog post.\nInstall notion-add-task\nlet notionToken = await env('NOTION_USER_TOKEN')\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\nlet content = await arg('Enter Task')\n\nlet {data} = await post(\n  'https://api.notion.com/v1/pages', {\n  \"parent\": { \"database_id\": databaseID },\n  \"properties\": {\n    \"Name\": {\n      \"title\": [\n        {\n          \"text\": {\n            \"content\": content\n          }\n        }\n      ]\n    }\n  }\n},\n{\n  headers: {\n    Authorization: `Bearer ${notionToken}`,\n  }\n})\n\nlet pageID = data.id.replace(/-/g, \"\");\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\n\ncopy(pageURL)\nInstall notion-add-task-with-content\nlet notionToken = await env('NOTION_USER_TOKEN')\nlet databaseID = \"3859b567fda3464ea5a69d5ccb56274b\"\nlet content = await arg('Enter Task')\n\nlet {data} = await post(\n  'https://api.notion.com/v1/pages', {\n  \"parent\": { \"database_id\": databaseID },\n  \"properties\": {\n    \"Name\": {\n      \"title\": [\n        {\n          \"text\": {\n            \"content\": content\n          }\n        }\n      ]\n    }\n  }\n},\n{\n  headers: {\n    Authorization: `Bearer ${notionToken}`,\n    \"Content-Type\": \"application/json\",\n    \"Notion-Version\": \"2021-05-13\"\n  }\n})\n\nlet bodyContent = await arg('Enter Content')\n\nlet {bodyData} = await patch(\n  `https://api.notion.com/v1/blocks/${data.id}/children`, {\n  \"children\": [\n    {\n      \"object\": \"block\",\n      \"type\": \"paragraph\",\n      \"paragraph\": {\n        \"text\": [\n          {\n            \"type\": \"text\",\n            \"text\": {\n              \"content\": bodyContent\n            }\n          }\n        ]\n      }\n    }\n  ]\n},\n{\n  headers: {\n    Authorization: `Bearer ${notionToken}`,\n    \"Content-Type\": \"application/json\",\n    \"Notion-Version\": \"2021-05-13\"\n  }\n})\n\nlet pageID = data.id.replace(/-/g, \"\");\nlet pageURL = `https://notion.so/${databaseID}?p=${pageID}`\n\ncopy(pageURL)\n(I just noticed that I haven't updated the first script to pass the \"Notion-Version\" header, but it seems unnecessary for now.)"},{"name":"npm search","createdAt":"2021-05-18T21:53:16Z","value":"https://github.com/johnlindquist/kit/discussions/283","description":"Created by iansu","img":"https://avatars.githubusercontent.com/u/433725?u=7e3bc90109dae2debbf59a2c822f3daca50f6aa7&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Install npm\nThis is a very simple script that I made to search npm and open the results in your browser. I took a quick look and didn't see anything similar here so I figured I would share it, even though the script itself isn't particularly interesting.\n// Menu: npm\n// Description: Search npm\n// Author: Ian Sutherland\n// Twitter: @iansu\n\nawait arg(\"Search query:\", async () => {\n  let query = await arg(\"Search query:\")\n\n  exec(`open https://www.npmjs.com/search?q=${query}`)\n})"},{"name":"‚ú®NEW FEATURES‚ú® beta.17","createdAt":"2021-05-18T20:24:57Z","value":"https://github.com/johnlindquist/kit/discussions/282","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"New features are separated into the comments below:"},{"name":"Twimage Download (tweet image)","createdAt":"2021-05-17T05:21:38Z","value":"https://github.com/johnlindquist/kit/discussions/269","description":"Created by kentcdodds","img":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"I made a little script to download images from tweets and set exif data to info derived from the tweet. Especially helpful is the creation date and the GPS data (if the tweet includes location).\nI'm using this to go back to pictures people have taken of me speaking at conferences and adding them to my personal photo library and make sure they appear at the right time in my photo library timeline.\nInstall twimage-download\n// Menu: Twimage Download\n// Description: Download twitter images and set their exif info based on the tweet metadata\n// Shortcut: fn ctrl opt cmd t\n// Author: Kent C. Dodds\n// Twitter: @kentcdodds\n\nimport fs from 'fs'\nimport {fileURLToPath, URL} from 'url'\n\nconst exiftool = await npm('node-exiftool')\nconst exiftoolBin = await npm('dist-exiftool')\nconst fsExtra = await npm('fs-extra')\n\nconst baseOut = home('Pictures/twimages')\n\nconst token = await env('TWITTER_BEARER_TOKEN')\nconst twitterUrl = await arg('Twitter URL')\nconsole.log(`Starting with ${twitterUrl}`)\n\nconst tweetId = new URL(twitterUrl).pathname.split('/').slice(-1)[0]\nconst params = new URLSearchParams()\nparams.set('ids', tweetId)\nparams.set('user.fields', 'username')\nparams.set('tweet.fields', 'author_id,created_at,geo')\nparams.set('media.fields', 'url')\nparams.set('expansions', 'author_id,attachments.media_keys,geo.place_id')\nconst response = await get(\n  `https://api.twitter.com/2/tweets?${params.toString()}`,\n  {\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  },\n)\n\nconst json = /** @type import('../types/twimage-download').JsonResponse */ (\n  response.data\n)\n\nconst ep = new exiftool.ExiftoolProcess(exiftoolBin)\n\nawait ep.open()\n\nfor (const tweet of json.data) {\n  const {attachments, geo, id, text, created_at} = tweet\n  if (!attachments) throw new Error(`No attachements: ${tweet.id}`)\n  const author = json.includes.users.find(u => u.id === tweet.author_id)\n  if (!author) throw new Error(`wut? No author? ${tweet.id}`)\n\n  const link = `https://twitter.com/${author.username}/status/${id}`\n  const {latitude, longitude} = geo ? await getGeoCoords(geo.place_id) : {}\n\n  for (const mediaKey of attachments.media_keys) {\n    const media = json.includes.media.find(m => mediaKey === m.media_key)\n    if (!media) throw new Error(`Huh... no media found...`)\n    const formattedDate = formatDate(created_at)\n    const colonDate = formattedDate.replace(/-/g, ':')\n    const formattedTimestamp = formatTimestamp(created_at)\n    const filename = new URL(media.url).pathname.split('/').slice(-1)[0]\n    const filepath = path.join(\n      baseOut,\n      formattedDate.split('-').slice(0, 2).join('-'),\n      filename,\n    )\n\n    await download(media.url, filepath)\n\n    console.log(`Updating exif metadata for ${filepath}`)\n    await ep.writeMetadata(\n      filepath,\n      {\n        ImageDescription: `${text} ‚Äì ${link}`,\n        Keywords: 'photos from tweets',\n        DateTimeOriginal: formattedTimestamp,\n        FileModifyDate: formattedTimestamp,\n        ModifyDate: formattedTimestamp,\n        CreateDate: formattedTimestamp,\n        ...(geo\n          ? {\n              GPSLatitudeRef: latitude > 0 ? 'North' : 'South',\n              GPSLongitudeRef: longitude > 0 ? 'East' : 'West',\n              GPSLatitude: latitude,\n              GPSLongitude: longitude,\n              GPSDateStamp: colonDate,\n              GPSDateTime: formattedTimestamp,\n            }\n          : null),\n      },\n      ['overwrite_original'],\n    )\n  }\n}\n\nawait ep.close()\nconsole.log(`All done with ${twitterUrl}`)\n\nfunction formatDate(t) {\n  const d = new Date(t)\n  return `${d.getFullYear()}-${padZero(d.getMonth() + 1)}-${padZero(\n    d.getDate(),\n  )}`\n}\nfunction formatTimestamp(t) {\n  const d = new Date(t)\n  const formattedDate = formatDate(t)\n  return `${formatDate(t)} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n}\nfunction padZero(n) {\n  return String(n).padStart(2, '0')\n}\n\nasync function getGeoCoords(placeId) {\n  const response = await get(\n    `https://api.twitter.com/1.1/geo/id/${placeId}.json`,\n    {\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    },\n  )\n  const [longitude, latitude] = response.data.centroid\n  return {latitude, longitude}\n}\n\nasync function download(url, out) {\n  console.log(`downloading ${url} to ${out}`)\n  await fsExtra.ensureDir(path.dirname(out))\n\n  const writer = fs.createWriteStream(out)\n  const response = await get(url, {responseType: 'stream'})\n  response.data.pipe(writer)\n\n  return new Promise((resolve, reject) => {\n    writer.on('finish', () => resolve(out))\n    writer.on('error', reject)\n  })\n}"},{"name":"Create Gist from Clipboard","createdAt":"2021-05-14T00:19:42Z","value":"https://github.com/johnlindquist/kit/discussions/266","description":"Created by gr2m","img":"https://avatars.githubusercontent.com/u/39992?u=1ee38610bb2d8a082b3e84db7ecacf78149d061b&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Install create-gist-from-clipboard\n// Menu: Create gist from clipboard\n// Description: Creates a new GitHub Gist with the contents of your current clipboard\n// Author: Gregor Martynus\n// Twitter: @gr2m\n\n// https://github.com/gr2m/scriptkit-octokit/\nconst { Octokit } = await npm(\"scriptkit-octokit\");\nconst octokit = new Octokit({\n  auth: {\n    scopes: [\"gist\"],\n  },\n});\n\n// copy the content from the current clipboard\nconst content = await paste();\n\nif (!content) {\n  console.log(\"clipboard is empty\");\n  exit();\n}\n\nconst { data } = await octokit.rest.gists.create({\n  description: \"Created using https://github.com/johnlindquist/kit/discussions/266\",\n  public: false,\n  files: {\n    \"clipboard.txt\": { content },\n  },\n});\n\nawait copy(data.html_url);\nconsole.log(\"Gist created at %s\", data.html_url);\nI highly recommend setting a shortcut, e.g. add to the top:\n// Shortcut: command option g"},{"name":"Word Game üéØ","createdAt":"2021-05-07T22:01:23Z","value":"https://github.com/johnlindquist/kit/discussions/253","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Install word-game\n// Menu: Word Game\n// Description: Guess letters to win!\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet playAgain = true\n\nwhile (playAgain) {\n  let {\n    data: [word],\n  } = await get(\n    `https://random-word-api.herokuapp.com/word`\n  )\n\n  let correct = false\n  let guesses = []\n\n  while (!correct) {\n    let [...letters] = await arg(\n      { placeholder: \"Guess a letter/s:\", hint: word }, //remove hint to make it more challenging üòâ\n      word\n        .split(\"\")\n        .map(char => (guesses.includes(char) ? char : \"*\"))\n        .join(\"\")\n    )\n    guesses = guesses.concat(...letters)\n\n    correct = word\n      .split(\"\")\n      .every(char => guesses.includes(char))\n  }\n\n  playAgain = await arg(`üèÜ \"${word}\"! Play Again?`, [\n    { name: \"Yes\", value: true },\n    { name: \"No\", value: false },\n  ])\n}"},{"name":"Open a GitHub repo (including org and private repos, as well as pagination)","createdAt":"2021-05-07T18:51:28Z","value":"https://github.com/johnlindquist/kit/discussions/252","description":"Created by mandiwise","img":"https://avatars.githubusercontent.com/u/1518780?u=af82f867331be805d51330c3f8e1f7ab8169837b&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"This script allows you to authenticate with a GitHub personal access token and open repos from your user account or any organizations you belong to. It also displays private repos and handles pagination if the repo count exceeds 100 (just scroll to the bottom of the list and you'll see a \"Load more...\" option, when applicable).\n\n// Menu: Open a GitHub Repo\n// Description: Launch a GitHub repo in your browser\n// Author: Mandi Wise\n// Twitter: @mandiwise\n\n// Learn how to create a personal access token for GitHub here:\n// https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\n\nlet { Octokit } = await npm(\"octokit\");\n\nconst GH_PERSONAL_ACCESS_TOKEN = await env(\"GH_PERSONAL_ACCESS_TOKEN\");\nconst octokit = new Octokit({ auth: GH_PERSONAL_ACCESS_TOKEN });\n\nconst ORGS_PER_PAGE = 20;\nconst REPOS_PER_PAGE = 100;\n\n// GraphQL operations\n\nconst GetAccounts = `query GetAccounts($first: Int) { \n  viewer { \n    organizations(first: $first) {\n      edges {\n        node {\n          login\n          name\n          url\n        }\n      }\n    }\n    login\n    name\n    url\n  }\n}`;\n\nconst ReposPage = `fragment ReposPage on RepositoryConnection {\n  edges {\n    node {\n      name\n      description\n      url\n    }\n  }\n  pageInfo {\n    endCursor\n    hasNextPage\n  }\n}`;\n\nconst GetOrgRepos = `query GetOrgRepos($first: Int, $after: String, $login: String!) {\n  viewer { \n    organization(login: $login) {\n      repositories(\n        first: $first\n        after: $after\n        orderBy: { field: UPDATED_AT, direction: DESC }\n      ) {\n        ...ReposPage\n      }\n    }\n  }\n}\n${ReposPage}\n`;\n\nconst GetUserRepos = `query GetUserRepos($first: Int, $after: String) {\n  viewer { \n    repositories(\n      first: $first\n      after: $after\n      orderBy: {field: UPDATED_AT, direction: DESC}\n      affiliations: OWNER\n    ) {\n      ...ReposPage\n    }\n  }\n}\n${ReposPage}\n`;\n\n// Get user and their organizations in a list\n\nlet dots = 0;\nconst accountsPlaceholderIntervalId = setInterval(() => {\n  setPlaceholder(`Loading GitHub accounts`.padEnd(++dots, \".\"));\n}, 100);\n\nconst { viewer } = await octokit.graphql(GetAccounts, { first: ORGS_PER_PAGE });\n\nif (!viewer) {\n  exit(1);\n}\n\nconst { login, name, url, organizations } = viewer;\nconst accounts = [\n  { name, value: login, description: url, type: \"user\" },\n  ...organizations.edges.map(({ node: { login, name, url } }) => ({\n    name,\n    value: login,\n    description: url,\n    type: \"org\"\n  }))\n].sort((a, b) => (a.name > b.name ? 1 : -1));\n\nclearInterval(accountsPlaceholderIntervalId);\ndots = 0;\n\nconst accountChoice = await arg(\"Which account?\", accounts);\nconst { type: accountType } = accounts.find(\n  account => accountChoice === account.value\n);\n\n// Get repo list for the user or organization\n\nlet repositoriesAndLoadMore = [];\n\nasync function fetchRepositories(variables) {\n  const reposPlaceholderIntervalId = setInterval(() => {\n    setPlaceholder(`Loading repositories`.padEnd(++dots, \".\"));\n  }, 100);\n\n  let edges, endCursor, hasNextPage;\n  const oldLoadMore = repositoriesAndLoadMore.find(({ value }) =>\n    value.startsWith(\"load-more-after-\")\n  );\n\n  if (oldLoadMore) {\n    repositoriesAndLoadMore.pop();\n  }\n\n  if (accountType === \"org\") {\n    ({\n      viewer: {\n        organization: {\n          repositories: {\n            edges,\n            pageInfo: { endCursor, hasNextPage }\n          }\n        }\n      }\n    } = await octokit.graphql(GetOrgRepos, {\n      login: accountChoice,\n      ...variables\n    }));\n  } else {\n    ({\n      viewer: {\n        repositories: {\n          edges,\n          pageInfo: { endCursor, hasNextPage }\n        }\n      }\n    } = await octokit.graphql(GetUserRepos, variables));\n  }\n\n  repositoriesAndLoadMore = [\n    ...repositoriesAndLoadMore,\n    ...edges.map(({ node: { description, name, url } }) => ({\n      name,\n      description,\n      value: url\n    }))\n  ];\n\n  if (hasNextPage) {\n    repositoriesAndLoadMore.push({\n      name: \"Load more...\",\n      value: `load-more-after-${endCursor}`\n    });\n  }\n\n  clearInterval(reposPlaceholderIntervalId);\n  dots = 0;\n\n  if (!repositoriesAndLoadMore.length) {\n    exit(1);\n  }\n\n  let repoChoice = await arg(\"Which project?\", repositoriesAndLoadMore);\n\n  if (repoChoice.startsWith(\"load-more-after-\")) {\n    await fetchRepositories({\n      first: REPOS_PER_PAGE,\n      after: repoChoice.split(\"-\").pop()\n    });\n  } else {\n    exec(`open ${repoChoice}`);\n  }\n}\n\nawait fetchRepositories({ first: REPOS_PER_PAGE });"},{"name":"Snippets","createdAt":"2021-05-07T08:35:22Z","value":"https://github.com/johnlindquist/kit/discussions/249","description":"Created by hakubo","img":"https://avatars.githubusercontent.com/u/1018759?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Small snippets manager with builtin support for variables.\nVariables are defined as an array of function so they can be anything, arg, getSelectedText etc.\nSnippet can also be a simple string if it has no variables\nInstall Snippets\n// Menu: Snippets\n// Description: Snippets collection\n// Author: Jakub Olek\n// Twitter: @JakubOlek\n// Shortcut: opt -\n\nconst { setSelectedText } = await kit(\"text\");\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst snippetMap = {\n  useState: {\n    args: [() => arg(\"variable name\"), () => arg(\"variable value\")],\n    template: (name, value) =>\n      `const [${name}, set${capitalizeFirstLetter(name)}] = useState(${value})`,\n  },\n  name: \"Jakub Olek\",\n  date: new Date().toLocaleDateString(\"en-GB\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  }),\n  test: {\n    args: [() => arg(\"should\")],\n    template: (testName) => `test(\"should ${testName}\", function() {\n\n  })`,\n  },\n  component: {\n    args: [() => arg(\"component name\")],\n    template: (componentName) => `function ${capitalizeFirstLetter(\n      componentName\n    )}() {\n      return\n    }`,\n  },\n};\n\nconst snippetName = await arg(\"Snippet\", Object.keys(snippetMap));\n\nlet result = snippetMap[snippetName];\nconst { args, template } = result;\n\nif (template) {\n  const variables = [];\n\n  if (args) {\n    for (let i = 0; i < args.length; i++) {\n      const variable = args[i];\n\n      if (typeof variable !== \"string\") {\n        variables.push(await variable());\n      }\n    }\n  }\n\n  setSelectedText(template(...variables));\n} else {\n  setSelectedText(result);\n}"},{"name":"Set GitHub profile status","createdAt":"2021-05-06T20:31:36Z","value":"https://github.com/johnlindquist/kit/discussions/246","description":"Created by gr2m","img":"https://avatars.githubusercontent.com/u/39992?u=1ee38610bb2d8a082b3e84db7ecacf78149d061b&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Install set-github-status\n//Shortcut: command shift -\n// Menu: Set GitHub Status\n// Description: Sets the status text on your GitHub Profile\n\nconst message = await arg(\"What would you like to say?\");\nconst token = await env(\"GITHUB_STATUS_TOKEN\", {\n  secret: true,\n  ignoreBlur: true,\n  hint: md(\n    `Create a token [on GitHub](https://github.com/settings/tokens/new?scopes=user&description=kit%20script)`\n  ),\n});\n\nconst response = await post(\n  \"https://api.github.com/graphql\",\n  {\n    query: `mutation ($text:String) {\n      changeUserStatus(input:{message:$text}) {\n        status {\n          message\n        }\n      }\n    }`,\n    variables: {\n      text: message,\n    },\n  },\n  {\n    headers: {\n      authorization: `token ${token}`,\n    },\n  }\n);"},{"name":"‚ú® NEW ‚ú® // Background: true","createdAt":"2021-05-06T19:36:22Z","value":"https://github.com/johnlindquist/kit/discussions/245","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"beta.12 brings in the ability to start/stop background tasks.\nUsing // Background :true at the top of your script will change the behavior in the main menu:\n// Background: true\n\nsetInterval(() => {}, 1000) //Some long-running process\n\n\n\nAuto (like nodemon)\n// Background: auto\n\nsetInterval(() => {}, 1000) //Some long-running process\nUsing auto, after you start the script, editing will stop/restart the script."},{"name":"Low-Fi Finder Image Grid View üñºÔ∏è","createdAt":"2021-05-04T00:50:22Z","value":"https://github.com/johnlindquist/kit/discussions/237","description":"Created by zzeleznick","img":"https://avatars.githubusercontent.com/u/5779832?u=42c63031fea8d5774f5011caf5b92ac5e61c346b&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Low-Fi Finder Image Grid View üñºÔ∏è\nWhile list views are nice, sometimes you just want a grid üòÑ. Here, I played around with displaying images in a grid layout.\nI'd even say that grids feel like a natural extension to the layouts in #231 ü§ì\nI started this project a little while back, and am currently using the html panel as opposed to choice.html. To support custom actions on selection (e.g. copy image filepath to clipboard on choice selection) within a grid context, I think that there is at least one missing piece.\n\nEnable setting className / styles of choice button parent container\n\nIn my example, I'm doing a self-described css injection to add new styles (e.g. .grid-cols-3 {grid-template-columns: repeat(3, minmax(0, 1fr))}), but the styles probably could be done in-line.\nDemo\n\nCode\n\n\nlib/image-grid.js\n\n// lib/image-grid.js\n\nconst DEFAULT_LIMIT = 10000; // 1000; // 100;\nconst DEBUG = { ENABLED: false };\n\nconst debug = (...args) => DEBUG.ENABLED && console.log(...args)\nconst info = (...args) => console.log(...args)\n\nexport const enableDebugMode = () => { DEBUG.ENABLED = true }\n\nconst getImages = (filepath, maxdepth) => {\n  // NOTE: options to use \"-ctime -90d\" / \"-atime -90d\" to filter more results\n  const findCommand = `find -E ${filepath} -iregex '.*\\.(jpg|jpeg|png|gif)' -maxdepth ${maxdepth}`\n  const findSortedCommand = `${findCommand} -print0 | xargs -0 ls -at`\n  debug(\"findSortedCommand\", findSortedCommand)\n  return exec(findSortedCommand, { silent: true }).toString().split(\"\\n\").filter(v => v)\n}\n\nconst buildImageModal = (payload) => {\n  let {file} = payload;\n  const img = `<img src=\"${file}\">`\n  return `<div class=\"imgContainer\">${img}</div>`\n}\n\nconst injectCss = (html) => {\n  // our tailwind build doesn't include grid css\n  // we add some custom styles as well\n  const css = `\n    /* Mimic tailwind grid css */\n    .grid {display:grid}\n    .grid-cols-3 {grid-template-columns: repeat(3, minmax(0, 1fr))}\n    .grid-cols-4 {grid-template-columns: repeat(4, minmax(0, 1fr))}\n    .grid-cols-5 {grid-template-columns: repeat(5, minmax(0, 1fr))}\n    /* custom css to center images in grid */\n    .grid div {place-items: center; padding: clamp(1px, 4%, 25px);}\n    .imgContainer {display: flex;}\n  `\n  const style = `<style type=\"text/css\">${css}</style>`\n  return `${style}${html}`\n}\n\n\nconst buildPage = (imageObjects, limit = DEFAULT_LIMIT) => {\n  const subset = imageObjects\n      .slice(0, limit)\n      .map(file => { return { file } })\n\n  const columns = subset.length > 32 ? (subset.length > 64 ? 5 : 4) : 3\n  const modals = subset.map(buildImageModal).join('\\n')\n\n  const html = `<div class=\"grid grid-cols-${columns} pt-1 m-1\">${modals}</div>`\n  const page = injectCss(html)\n  debug(page);\n  info('buildPage: Done')\n  return page\n}\n\nexport const buildImagesPanel = async (filepath, maxdepth, limit) => {\n  const images = getImages(filepath, maxdepth);\n  info(`Found ${images.length} images`);\n  await arg({\n    input: \" \",\n  }, buildPage(images, limit));\n}\n\n\n\nview-desktop.js\n\n// Menu: View Desktop\n// Description: View Desktop Attachments\n// Author: Zach Zeleznick\n// Twitter: @zzxiv\n// Shortcut: cmd shift d\n\nconst {buildImagesPanel} = await lib(\"image-grid\")\n\nconst filepath = \"~/Desktop\"\nconst depth = \"3\"\n\nawait buildImagesPanel(filepath, depth)\n\n\n\nview-attachments.js\n\n// Menu: View Attachment\n// Description: View iMessage Attachments\n// Author: Zach Zeleznick\n// Twitter: @zzxiv\n// Shortcut: cmd shift l\n\nconst {buildImagesPanel} = await lib(\"image-grid\")\n\n// NOTE: Need to grant Kit app full disk access in Security and Privacy or find will return 0 results \nconst filepath = \"~/Library/Messages/Attachments\"\nconst depth = \"4\"\n\nawait buildImagesPanel(filepath, depth)\n\n\n\nview-downloads.js\n\n// Menu: View Download\n// Description: View Download Attachments\n// Author: Zach Zeleznick\n// Twitter: @zzxiv\n// Shortcut: cmd shift 0\n\nconst {buildImagesPanel, enableDebugMode} = await lib(\"image-grid\")\n\nconst filepath = \"~/Downloads\"\nconst depth = \"2\"\nconst limit = 42\n\nenableDebugMode()\n\nawait buildImagesPanel(filepath, depth, limit)\n\nReference\nHere are a few screenshots of the native Finder window on macOS 10.14 that I intended to recreate in low-fidelity.\n\n\n\n\n\n\nExample search for `png` files on my Desktop\nSorting options"},{"name":"Drag and Drop Files for Data Entry and Syncing","createdAt":"2021-05-03T18:57:42Z","value":"https://github.com/johnlindquist/kit/discussions/236","description":"Created by zacjones93","img":"https://avatars.githubusercontent.com/u/6188161?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"My fianc√© does product shots for a local plant shop in the area. She will have dozens of plants to shoot that result in hundreds of photos.\nPart of the job is organizing and uploading them to google photos. This means she has been renaming hundreds of files individually. üò≠\nThe system they have down is: {PLANT_NAME}{DETAIL?}{POT_SIZE}_{number}. So for any given plant it will have several 'product' shots and several 'detail' shots taken for it.\nA simple script but going to save hours of data entry!\n\n  \n    \n    \n\n    png.metadata-.Script.Kit.mp4\n    \n  \n\n  \n\n  \n\n\nDownload Link\n\ncode\n\nconst fs = await npm(\"fs\"); \nconst plantName = await arg(\"Enter a plant name:\");\nconst potSize = await arg(\"Enter pot size: \");\nconst shotType = await arg(\"Is this product or detail?\", [\"product\", \"detail\"]);\n\nconst photos = await drop(\"Drop your images\");\nconsole.log(photos);\n\n\nlet renamePhotoToDirectory = (path, plantName) => {\n // going to be a env variable\n  let targetDirectory = \"/Users/zac/Desktop/photops/photos\";\n\n  let photoPath = `${targetDirectory}/${plantName}`;\n\n  fs.rename(path, photoPath, (err) => {\n    if (err) return console.log(\"there was an error: \", err);\n\n    console.log(\"selectedFiles renamed\");\n  });\n};\n\nphotos.map((plant, index) => {\n  if (shotType === \"detail\") {\n    renamePhotoToDirectory(\n      plant.path,\n      `${plantName}Detail${potSize}_${index + 1}.png`\n    );\n  } else {\n    renamePhotoToDirectory(plant.path, `${plantName}${potSize}_${index + 1}.png`);\n  }\n});"},{"name":"Tweet Script","createdAt":"2021-05-03T14:58:26Z","value":"https://github.com/johnlindquist/kit/discussions/235","description":"Created by chrislaughlin","img":"https://avatars.githubusercontent.com/u/495517?u=12a5fbe7d6e91d3ba2bcb9a603fca020e62912fb&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Send Tweet from Kit, provides a way to send a tweet directly from Kit. When the script is run it will ask you to enter a tweet then it will run sentiment analysis on the tweet. If the tweet is positive it will be posted, if it's negative you will be prompted to confirm the send.\n// Shortcut: opt t\nlet Twitter = await npm('twitter-lite');\nlet Sent = await npm('sentiment');\n\nlet envOptions = {\n    hint: md(\n      `You need to [create an app](https://developer.twitter.com/en/apps) to get these keys/tokens`,\n    ),\n    ignoreBlur: true,\n    secret: true,\n  }\n  \n\nlet client = new Twitter({\n    consumer_key: await env('TWITTER_CONSUMER_KEY', envOptions),\n    consumer_secret: await env('TWITTER_CONSUMER_SECRET', envOptions),\n    access_token_key: await env('TWITTER_ACCESS_TOKEN_KEY', envOptions),\n    access_token_secret: await env('TWITTER_ACCESS_TOKEN_SECRET', envOptions),\n});\n\nconst sentiment = new Sent();\n\nlet tweet = await arg(\"what's on your mind?\");\n\nconst { score } = sentiment.analyze(tweet);\n\nconst isNeg = score < 0;\n\nlet shouldPost = await arg(\"Thats a little üßÇy\", [\n    { name: \"yeah I know sean anyway\", value: true },\n    {name: \"oh yeah don't post that\", value: false },\n])\n\nif (shouldPost) {\n    await client.post('statuses/update', {\n        status: `Random thought: ${tweet}`,\n    }).catch(error => console.log(error));\n}"},{"name":"My IP","createdAt":"2021-05-03T14:57:28Z","value":"https://github.com/johnlindquist/kit/discussions/234","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Install my-ip\n// Menu: My IP\n// Description: Displays and copies IP to clipboard\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet network = await npm(\"network\")\nlet { promisify } = await npm(\"es6-promisify\")\n\nlet ip = await promisify(network.get_public_ip)()\n\ncopy(ip)\nawait arg(ip)"},{"name":"Google Home Speak Text","createdAt":"2021-05-03T14:27:28Z","value":"https://github.com/johnlindquist/kit/discussions/233","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"Install google-home-speak\n// Menu: Google Home Speak Text\n// Description: Tell Google Home to speak a message\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet GoogleHome = await npm(\"google-home-push\")\n// Find your device IP on your router or\n// Home App -> Device -> Settings Gear -> Device Information\nlet home = new GoogleHome(\"10.0.0.3\")\n\nhome.speak(await arg(\"Speak:\"))"},{"name":"AWS Select profile","createdAt":"2021-05-03T08:26:23Z","value":"https://github.com/johnlindquist/kit/discussions/232","description":"Created by udondan","img":"https://avatars.githubusercontent.com/u/6443408?v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDg0MTcw","name":"Share","emoji":":smiling_face_with_three_hearts:"},"bodyText":"This is a helper to switch AWS profiles, which then can be used by other scripts.\nThe script parses the ~/.aws/config file and let's the user select one of the configured profiles. The current active profile is marked with a star.\n\nThe selected value then will be stored as AWS_PROFILE in the env file.\nTo use the profile name in another script, you can get the value via:\nconst region = await env('AWS_PROFILE');\n// Menu: AWS Select Profile\n// Description: Select AWS profile from you AWS config\n// Author: Daniel Schroeder\n// Twitter: @udondan\nimport { readFileSync } from 'fs';\n\nconst ini = await npm('ini');\nconst awsConf = `${process.env.HOME}/.aws/config`;\n\nconst config = ini.parse(readFileSync(awsConf, 'utf-8'));\n\nconst currentMarker = ' ‚òÖ';\nconst currentProfile = env['AWS_PROFILE'];\n\nconst sections = Object.keys(config).reduce(function (filtered, section) {\n  if (section.startsWith('profile ')) {\n    let profileName = section.replace('profile ', '');\n    if (profileName == currentProfile) {\n      profileName += currentMarker;\n    }\n    filtered.push(profileName);\n  }\n  return filtered;\n}, []);\n\nconst profile = await arg(\n  {\n    placeholder: 'Select profile',\n    hint: `parsed from ${awsConf}`,\n  },\n  sections.sort()\n);\nawait cli('set-env-var', 'AWS_PROFILE', profile.replace(currentMarker, ''));"},{"name":"// Watch: metadata üëÄ","createdAt":"2021-04-29T14:31:31Z","value":"https://github.com/johnlindquist/kit/discussions/213","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"Script Kit now supports // Watch: metadata\n// Watch: ~/projects/thoughts/**/*.md\n\nlet { say } = await kit(\"speech\")\n\nsay(\"journal updated\")\n\n// Watch:  supports any file name, glob, or array (Kit will JSON.parse the array).\nScripts will run on the \"change\" event\nRead more about supported globbing\n\n\nRead about the other metadata\n\nI would LOVE to hear about scenarios you would use this for or if you run into any issues üôè"},{"name":"beta.96 - Design, Drop, and Hotkeys! Oh my!","createdAt":"2021-04-16T20:32:44Z","value":"https://github.com/johnlindquist/kit/discussions/150","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"2021-04-16.14-10-18.mp4\n    \n  \n\n  \n\n  \n\n\nCan't wait to see what you build! Happy Scripting this weekend! üòá"},{"name":"*New* Choice Preview","createdAt":"2021-04-09T21:43:36Z","value":"https://github.com/johnlindquist/kit/discussions/119","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"2021-04-09.11-41-01.mp4\n    \n  \n\n  \n\n  \n\n\nInstall google-image-search\n// Menu: Google Image Search\n// Description: Searches Google Images\n// Author: John Lindquist\n// Twitter: @johnlindquist\n\nlet gis = await npm(\"g-i-s\")\n\nlet selectedImageUrl = await arg(\n  \"Image search:\",\n  async input => {\n    if (input.length < 3) return []\n\n    let searchResults = await new Promise(res => {\n      gis(input, (_, results) => {\n        res(results)\n      })\n    })\n\n    return searchResults.map(({ url }) => {\n      return {\n        name: url.split(\"/\").pop().replace(/\\?.*/g, \"\"),\n        value: url,\n        preview: `<img src=\"${url}\" />`,\n      }\n    })\n  }\n)\n\ncopy(selectedImageUrl)\nInstall giphy-search\n// Menu: Giphy\n// Description: Search giphy. Paste markdown link.\n// Author: John Lindquist\n// Twitter: @johnlindquist\nlet download = await npm(\"image-downloader\")\nlet queryString = await npm(\"query-string\")\nlet { setSelectedText } = await kit(\"text\")\n\nif (!env.GIPHY_API_KEY) {\n  show(\n    `<div class=\"p-4\">\n      <div>\n        Grab an API Key from the Giphy dev dashboard:\n      </div>\n      <a href=\"https://developers.giphy.com/dashboard/\">Here</a>\n    </div>`\n  )\n}\nlet GIPHY_API_KEY = await env(\"GIPHY_API_KEY\")\n\nlet search = q =>\n  `https://api.giphy.com/v1/gifs/search?api_key=${GIPHY_API_KEY}&q=${q}&limit=10&offset=0&rating=g&lang=en`\n\nlet { input, url } = await arg(\n  \"Search giphy:\",\n  async input => {\n    if (!input) return []\n    let query = search(input)\n    let { data } = await get(query)\n\n    return data.data.map(gif => {\n      return {\n        name: gif.title.trim() || gif.slug,\n        value: {\n          input,\n          url: gif.images.downsized_medium.url,\n        },\n        preview: `<img src=\"${gif.images.downsized_medium.url}\" alt=\"\">`,\n      }\n    })\n  }\n)\n\nlet formattedLink = await arg(\"Format to paste\", [\n  {\n    name: \"URL Only\",\n    value: url,\n  },\n  {\n    name: \"Markdown Image Link\",\n    value: `![${input}](${url})`,\n  },\n  {\n    name: \"HTML <img>\",\n    value: `<img src=\"${url}\" alt=\"${input}\">`,\n  },\n])\n\nsetSelectedText(formattedLink)"},{"name":"Types are here!","createdAt":"2021-04-03T18:08:24Z","value":"https://github.com/johnlindquist/kit/discussions/112","description":"Created by johnlindquist","img":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","category":{"id":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyODIwMDgw","name":"Announcements","emoji":":loudspeaker:"},"bodyText":"Update (1.1.0-beta.86) adds a ~/.kit/kit.d.ts to allow better code hinting and completion.\n‚ùóÔ∏èAfter updating, you will need to manually \"link\" your ~/.kenv to your ~/.kit for the benefits (This will happen automatically for new users during install)\nMethod 1 - Install and run this script\nClick to install link-kit\nawait cli(\"install\", \"~/.kit\")\nMethod  2 - In your terminal\nPATH=~/.kit/node/bin ~/.kit/node/bin/npm --prefix ~/.kenv i ~/.kit\nNow your scripts in your ~/.kenv/scripts should have completion/hinting for globals included in the \"preloaded\" scripts.\n\nI still need to add types for the helpers that load scripts from dirs kit(), cli(), etc.\n\nPlease let me know how it goes and if you have any questions. Thanks!"}]